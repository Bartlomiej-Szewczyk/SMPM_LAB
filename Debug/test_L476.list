
test_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c86c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028e0  0800ca00  0800ca00  0001ca00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e0  0800f2e0  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2e0  0800f2e0  0001f2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2e8  0800f2e8  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2e8  0800f2e8  0001f2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2ec  0800f2ec  0001f2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800f2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  20000234  0800f524  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b80  0800f524  00020b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195f7  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003192  00000000  00000000  0003985b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  0003e008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296da  00000000  00000000  0003f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d8e  00000000  00000000  00068b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa833  00000000  00000000  000818d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017c10b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000702c  00000000  00000000  0017c160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9e4 	.word	0x0800c9e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	0800c9e4 	.word	0x0800c9e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <SPIx_Write>:
  * @brief  SPI Write a byte to device
  * @param  Value: value to be written
  * @retval None
  */
static void SPIx_Write(uint8_t Value)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(hnucleo_Spi, (uint8_t *) &Value, 1, SPIX_TOUT);
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <SPIx_Write+0x34>)
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	1df9      	adds	r1, r7, #7
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f005 fb05 	bl	8006506 <HAL_SPI_Transmit>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SPIx_Write+0x2a>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 8000f06:	f000 f81f 	bl	8000f48 <SPIx_Error>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000004 	.word	0x20000004

08000f18 <SPIx_Init>:

/**
 * @brief 	SPI initialization function
 */
static void SPIx_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_SPI_Init(hnucleo_Spi);
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <SPIx_Init+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 fa25 	bl	8006370 <HAL_SPI_Init>
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000004 	.word	0x20000004

08000f30 <SPIx_DeInit>:

/**
 * @brief 	SPI deinitialization function
 */
static void SPIx_DeInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(hnucleo_Spi);
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <SPIx_DeInit+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fabc 	bl	80064b6 <HAL_SPI_DeInit>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000004 	.word	0x20000004

08000f48 <SPIx_Error>:

/**
  * @brief  SPI error treatment function
  */
static void SPIx_Error(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  SPIx_DeInit();
 8000f4c:	f7ff fff0 	bl	8000f30 <SPIx_DeInit>
  SPIx_Init();
 8000f50:	f7ff ffe2 	bl	8000f18 <SPIx_Init>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initialize the LCD
  */
void LCD_IO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Reset cycle */
  LCD_RST_HIGH();
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2102      	movs	r1, #2
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <LCD_IO_Init+0x48>)
 8000f62:	f002 feff 	bl	8003d64 <HAL_GPIO_WritePin>
  LCD_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f000 f8a2 	bl	80010b0 <LCD_Delay>
  LCD_RST_LOW();
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2102      	movs	r1, #2
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <LCD_IO_Init+0x48>)
 8000f72:	f002 fef7 	bl	8003d64 <HAL_GPIO_WritePin>
  LCD_Delay(100);
 8000f76:	2064      	movs	r0, #100	; 0x64
 8000f78:	f000 f89a 	bl	80010b0 <LCD_Delay>
  LCD_RST_HIGH();
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <LCD_IO_Init+0x48>)
 8000f82:	f002 feef 	bl	8003d64 <HAL_GPIO_WritePin>
  LCD_Delay(100);
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f000 f892 	bl	80010b0 <LCD_Delay>

  /* LCD chip select high */
  LCD_CS_HIGH();
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <LCD_IO_Init+0x48>)
 8000f92:	f002 fee7 	bl	8003d64 <HAL_GPIO_WritePin>

  /* LCD SPI Config */
  SPIx_Init();
 8000f96:	f7ff ffbf 	bl	8000f18 <SPIx_Init>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	48000800 	.word	0x48000800

08000fa4 <LCD_IO_WriteReg>:
  * @brief  Send command to select the LCD register.
  *
  * @param  LCDReg: Address of the selected register.
  */
void LCD_IO_WriteReg(uint8_t LCDReg)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  LCD_CS_LOW();
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <LCD_IO_WriteReg+0x38>)
 8000fb4:	f002 fed6 	bl	8003d64 <HAL_GPIO_WritePin>
  LCD_DC_LOW();
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <LCD_IO_WriteReg+0x38>)
 8000fbe:	f002 fed1 	bl	8003d64 <HAL_GPIO_WritePin>

  /* Send Command */
  SPIx_Write(LCDReg);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff8b 	bl	8000ee0 <SPIx_Write>

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <LCD_IO_WriteReg+0x38>)
 8000fd0:	f002 fec8 	bl	8003d64 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <LCD_IO_WriteMultipleData>:
*
* @param  pData: Pointer to the register transmission buffer
* @param  Size: Number of bytes to transmit to the LCD
*/
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t data = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]

  LCD_CS_LOW();
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	482c      	ldr	r0, [pc, #176]	; (80010a8 <LCD_IO_WriteMultipleData+0xc8>)
 8000ff8:	f002 feb4 	bl	8003d64 <HAL_GPIO_WritePin>
  LCD_DC_HIGH();
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4829      	ldr	r0, [pc, #164]	; (80010a8 <LCD_IO_WriteMultipleData+0xc8>)
 8001002:	f002 feaf 	bl	8003d64 <HAL_GPIO_WritePin>

  if (Size == 1)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <LCD_IO_WriteMultipleData+0x38>
  {
    /* Only 1 byte to be sent to LCD - general interface can be used */
    /* Send Data */
    SPIx_Write(*pData);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff65 	bl	8000ee0 <SPIx_Write>
 8001016:	e037      	b.n	8001088 <LCD_IO_WriteMultipleData+0xa8>
  }
  else
  {
    /* Several data should be sent in a row */
    /* Direct SPI accesses for optimization */
    for (counter = Size; counter != 0; counter--)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e028      	b.n	8001070 <LCD_IO_WriteMultipleData+0x90>
    {
      while (((hnucleo_Spi->Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 800101e:	bf00      	nop
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <LCD_IO_WriteMultipleData+0xcc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b02      	cmp	r3, #2
 800102e:	d1f7      	bne.n	8001020 <LCD_IO_WriteMultipleData+0x40>
      {
      }
      /* Need to invert bytes for LCD*/
      *((__IO uint8_t *)&hnucleo_Spi->Instance->DR) = *(pData + 1);
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <LCD_IO_WriteMultipleData+0xcc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	330c      	adds	r3, #12
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	7852      	ldrb	r2, [r2, #1]
 800103c:	701a      	strb	r2, [r3, #0]

      while (((hnucleo_Spi->Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 800103e:	bf00      	nop
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <LCD_IO_WriteMultipleData+0xcc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b02      	cmp	r3, #2
 800104e:	d1f7      	bne.n	8001040 <LCD_IO_WriteMultipleData+0x60>
      {
      }
      *((__IO uint8_t *)&hnucleo_Spi->Instance->DR) = *pData;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <LCD_IO_WriteMultipleData+0xcc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	330c      	adds	r3, #12
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	7812      	ldrb	r2, [r2, #0]
 800105c:	701a      	strb	r2, [r3, #0]
      counter--;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3b01      	subs	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
      pData += 2;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3302      	adds	r3, #2
 8001068:	607b      	str	r3, [r7, #4]
    for (counter = Size; counter != 0; counter--)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3b01      	subs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1d3      	bne.n	800101e <LCD_IO_WriteMultipleData+0x3e>
    }

    /* Wait until the bus is ready before releasing Chip select */
    while (((hnucleo_Spi->Instance->SR) & SPI_FLAG_BSY) != RESET)
 8001076:	bf00      	nop
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <LCD_IO_WriteMultipleData+0xcc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f7      	bne.n	8001078 <LCD_IO_WriteMultipleData+0x98>
    {
    }
  }

  /* Empty the Rx fifo */
  data = *(&hnucleo_Spi->Instance->DR);
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <LCD_IO_WriteMultipleData+0xcc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  UNUSED(data);  /* Remove GNU warning */
 8001092:	68bb      	ldr	r3, [r7, #8]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8001094:	2201      	movs	r2, #1
 8001096:	2104      	movs	r1, #4
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <LCD_IO_WriteMultipleData+0xc8>)
 800109a:	f002 fe63 	bl	8003d64 <HAL_GPIO_WritePin>
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000800 	.word	0x48000800
 80010ac:	20000004 	.word	0x20000004

080010b0 <LCD_Delay>:
  *
  * @param  Delay: delay in ms.
  * @retval None
  */
void LCD_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f002 fa67 	bl	800358c <HAL_Delay>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <Pulse_Counter>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Pulse_Counter(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	if (pulse_cnt > 0) pulse_cnt--;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <Pulse_Counter+0x30>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dd05      	ble.n	80010e0 <Pulse_Counter+0x18>
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <Pulse_Counter+0x30>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <Pulse_Counter+0x30>)
 80010dc:	6013      	str	r3, [r2, #0]
	else
	{
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
		__HAL_TIM_SET_COUNTER(&htim2, 2000);
	}
}
 80010de:	e008      	b.n	80010f2 <Pulse_Counter+0x2a>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 80010e0:	2104      	movs	r1, #4
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <Pulse_Counter+0x34>)
 80010e4:	f005 ff48 	bl	8006f78 <HAL_TIM_PWM_Stop_IT>
		__HAL_TIM_SET_COUNTER(&htim2, 2000);
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <Pulse_Counter+0x34>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000a90 	.word	0x20000a90
 80010fc:	20000a94 	.word	0x20000a94

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0a0      	sub	sp, #128	; 0x80
 8001104:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f002 f9c5 	bl	8003494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 fa6b 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 fcb3 	bl	8001a78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001112:	f000 fc81 	bl	8001a18 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001116:	f000 fc15 	bl	8001944 <MX_TIM4_Init>
  MX_TIM2_Init();
 800111a:	f000 fb9b 	bl	8001854 <MX_TIM2_Init>
  MX_SPI2_Init();
 800111e:	f000 fb5b 	bl	80017d8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001122:	f000 fad9 	bl	80016d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001126:	f000 fb17 	bl	8001758 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* Stepstick */
  HAL_TIM_Base_Start(&htim4);
 800112a:	48d7      	ldr	r0, [pc, #860]	; (8001488 <main+0x388>)
 800112c:	f005 fd0e 	bl	8006b4c <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(MOT_RESET_GPIO_Port, MOT_RESET_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f002 fe13 	bl	8003d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOT_MODE1_GPIO_Port, MOT_MODE1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2110      	movs	r1, #16
 8001142:	48d2      	ldr	r0, [pc, #840]	; (800148c <main+0x38c>)
 8001144:	f002 fe0e 	bl	8003d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOT_MODE2_GPIO_Port, MOT_MODE2_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	48cf      	ldr	r0, [pc, #828]	; (800148c <main+0x38c>)
 800114e:	f002 fe09 	bl	8003d64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOT_RESET_GPIO_Port, MOT_RESET_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f002 fe02 	bl	8003d64 <HAL_GPIO_WritePin>

  /* LCD */
  BSP_LCD_Init();
 8001160:	f001 fcf4 	bl	8002b4c <BSP_LCD_Init>
  BSP_LCD_DisplayOn();
 8001164:	f002 f878 	bl	8003258 <BSP_LCD_DisplayOn>

  BSP_LCD_DisplayStringAtLine(2, (uint8_t *) "testTestTest");
 8001168:	49c9      	ldr	r1, [pc, #804]	; (8001490 <main+0x390>)
 800116a:	2002      	movs	r0, #2
 800116c:	f001 fe4a 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>

  BSP_LCD_Clear(LCD_COLOR_YELLOW);
 8001170:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001174:	f001 fd62 	bl	8002c3c <BSP_LCD_Clear>

  BSP_LCD_DisplayStringAtLine(3, (uint8_t *) "test");
 8001178:	49c6      	ldr	r1, [pc, #792]	; (8001494 <main+0x394>)
 800117a:	2003      	movs	r0, #3
 800117c:	f001 fe42 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>

  /* Sensors */
  HAL_I2C_Init(&hi2c1);
 8001180:	48c5      	ldr	r0, [pc, #788]	; (8001498 <main+0x398>)
 8001182:	f002 fe21 	bl	8003dc8 <HAL_I2C_Init>
  HAL_I2C_Init(&hi2c2);
 8001186:	48c5      	ldr	r0, [pc, #788]	; (800149c <main+0x39c>)
 8001188:	f002 fe1e 	bl	8003dc8 <HAL_I2C_Init>

  /* Flick */
  flick_reset();
 800118c:	f001 f8de 	bl	800234c <flick_reset>
  flick_set_param(0x90, 0x20, 0x20); //ustawienie odpowiednich parametrow do wlaczenia airwheela
 8001190:	2220      	movs	r2, #32
 8001192:	2120      	movs	r1, #32
 8001194:	2090      	movs	r0, #144	; 0x90
 8001196:	f001 f8ef 	bl	8002378 <flick_set_param>
  flick_set_param(0x97, 0x08, 0x08); //ustawienie odpowiednich parametrow do wlaczenia dotyku
 800119a:	2208      	movs	r2, #8
 800119c:	2108      	movs	r1, #8
 800119e:	2097      	movs	r0, #151	; 0x97
 80011a0:	f001 f8ea 	bl	8002378 <flick_set_param>
  flick_set_param(0x85, 0x66, 0x66); //ustawienie odpowiednich parametrow do wlaczenia przesunięcia nad flickiem.
 80011a4:	2266      	movs	r2, #102	; 0x66
 80011a6:	2166      	movs	r1, #102	; 0x66
 80011a8:	2085      	movs	r0, #133	; 0x85
 80011aa:	f001 f8e5 	bl	8002378 <flick_set_param>
                                     //Ustawiony został bit 1, 2, 5, 6. 37 strona w dokumentacji tlumaczy co oznaczaja odpowiednie bity

  /* IMU */
  uint8_t i2c2_buf[10];
  HAL_I2C_Mem_Read(&hi2c2, ACC_GYRO_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 1, 1);
 80011ae:	2301      	movs	r3, #1
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	220f      	movs	r2, #15
 80011c0:	21d6      	movs	r1, #214	; 0xd6
 80011c2:	48b6      	ldr	r0, [pc, #728]	; (800149c <main+0x39c>)
 80011c4:	f003 f98e 	bl	80044e4 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c2, 0x1e<<1, 0x0f, I2C_MEMADD_SIZE_8BIT, i2c2_buf+1, 1, 1);
 80011c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011cc:	3301      	adds	r3, #1
 80011ce:	2201      	movs	r2, #1
 80011d0:	9202      	str	r2, [sp, #8]
 80011d2:	2201      	movs	r2, #1
 80011d4:	9201      	str	r2, [sp, #4]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	220f      	movs	r2, #15
 80011dc:	213c      	movs	r1, #60	; 0x3c
 80011de:	48af      	ldr	r0, [pc, #700]	; (800149c <main+0x39c>)
 80011e0:	f003 f980 	bl	80044e4 <HAL_I2C_Mem_Read>

  char str[40];
  sprintf(str, "Who? A/G:%02x M:%02x", i2c2_buf[0], i2c2_buf[1]);
 80011e4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80011e8:	461a      	mov	r2, r3
 80011ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80011ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80011f2:	49ab      	ldr	r1, [pc, #684]	; (80014a0 <main+0x3a0>)
 80011f4:	f008 f942 	bl	800947c <siprintf>
  BSP_LCD_DisplayStringAtLine(10, (uint8_t *) str);
 80011f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011fc:	4619      	mov	r1, r3
 80011fe:	200a      	movs	r0, #10
 8001200:	f001 fe00 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>

  /* cfg gyro */
  i2c2_buf[0] = 0x38;		// enable X,Y,Z axes
 8001204:	2338      	movs	r3, #56	; 0x38
 8001206:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  HAL_I2C_Mem_Write(&hi2c2, ACC_GYRO_ADDR, CTRL10_C, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 1, 1);
 800120a:	2301      	movs	r3, #1
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	2219      	movs	r2, #25
 800121c:	21d6      	movs	r1, #214	; 0xd6
 800121e:	489f      	ldr	r0, [pc, #636]	; (800149c <main+0x39c>)
 8001220:	f003 f84c 	bl	80042bc <HAL_I2C_Mem_Write>
  i2c2_buf[0] = 0x14;		// 13 Hz ODR, 500 dps
 8001224:	2314      	movs	r3, #20
 8001226:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  HAL_I2C_Mem_Write(&hi2c2, ACC_GYRO_ADDR, CTRL2_G, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 1, 1);
 800122a:	2301      	movs	r3, #1
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	2211      	movs	r2, #17
 800123c:	21d6      	movs	r1, #214	; 0xd6
 800123e:	4897      	ldr	r0, [pc, #604]	; (800149c <main+0x39c>)
 8001240:	f003 f83c 	bl	80042bc <HAL_I2C_Mem_Write>

  // cfg acc
  i2c2_buf[0] = 0x38;		// enable X,Y,Z axes
 8001244:	2338      	movs	r3, #56	; 0x38
 8001246:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  HAL_I2C_Mem_Write(&hi2c2, ACC_GYRO_ADDR, CTRL9_XL, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 1, 1);
 800124a:	2301      	movs	r3, #1
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2218      	movs	r2, #24
 800125c:	21d6      	movs	r1, #214	; 0xd6
 800125e:	488f      	ldr	r0, [pc, #572]	; (800149c <main+0x39c>)
 8001260:	f003 f82c 	bl	80042bc <HAL_I2C_Mem_Write>
  i2c2_buf[0] = 0x10;		// 13 Hz ODR, +/- 2 g
 8001264:	2310      	movs	r3, #16
 8001266:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  HAL_I2C_Mem_Write(&hi2c2, ACC_GYRO_ADDR, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 1, 1);
 800126a:	2301      	movs	r3, #1
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	2210      	movs	r2, #16
 800127c:	21d6      	movs	r1, #214	; 0xd6
 800127e:	4887      	ldr	r0, [pc, #540]	; (800149c <main+0x39c>)
 8001280:	f003 f81c 	bl	80042bc <HAL_I2C_Mem_Write>
	  uint32_t gesture, touch;

	  airwheel_data_t airwheel;
	  char str[20];

	  flick_poll_data(&gesture, &touch, &airwheel);
 8001284:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001288:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800128c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001290:	4618      	mov	r0, r3
 8001292:	f001 f8bb 	bl	800240c <flick_poll_data>

	  if(airwheel.new_data == FLICK_NEW_DATA)
 8001296:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800129a:	2b01      	cmp	r3, #1
 800129c:	f040 8093 	bne.w	80013c6 <main+0x2c6>
	  {
	  	  BSP_LCD_Clear(LCD_COLOR_YELLOW);
 80012a0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80012a4:	f001 fcca 	bl	8002c3c <BSP_LCD_Clear>
		  BSP_LCD_DrawCircle(50, 110, 22);
 80012a8:	2216      	movs	r2, #22
 80012aa:	216e      	movs	r1, #110	; 0x6e
 80012ac:	2032      	movs	r0, #50	; 0x32
 80012ae:	f001 fe17 	bl	8002ee0 <BSP_LCD_DrawCircle>
		  BSP_LCD_FillCircle(50, 110, 12);
 80012b2:	220c      	movs	r2, #12
 80012b4:	216e      	movs	r1, #110	; 0x6e
 80012b6:	2032      	movs	r0, #50	; 0x32
 80012b8:	f001 ff3c 	bl	8003134 <BSP_LCD_FillCircle>

		  sprintf(str, "pos: %02d cnt: %02d", airwheel.position, airwheel.count);
 80012bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80012c0:	461a      	mov	r2, r3
 80012c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80012c6:	f107 0014 	add.w	r0, r7, #20
 80012ca:	4976      	ldr	r1, [pc, #472]	; (80014a4 <main+0x3a4>)
 80012cc:	f008 f8d6 	bl	800947c <siprintf>
		  BSP_LCD_DisplayStringAtLine(4, (uint8_t *) str);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	2004      	movs	r0, #4
 80012d8:	f001 fd94 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>

		  uint8_t circy = 110 - 12 * sin(2*3.1416*airwheel.position/32);
 80012dc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_i2d>
 80012e6:	a366      	add	r3, pc, #408	; (adr r3, 8001480 <main+0x380>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff f984 	bl	80005f8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <main+0x3a8>)
 80012fe:	f7ff faa5 	bl	800084c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	ec43 2b17 	vmov	d7, r2, r3
 800130a:	eeb0 0a47 	vmov.f32	s0, s14
 800130e:	eef0 0a67 	vmov.f32	s1, s15
 8001312:	f00a fb31 	bl	800b978 <sin>
 8001316:	ec51 0b10 	vmov	r0, r1, d0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <main+0x3ac>)
 8001320:	f7ff f96a 	bl	80005f8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	f04f 0000 	mov.w	r0, #0
 800132c:	4960      	ldr	r1, [pc, #384]	; (80014b0 <main+0x3b0>)
 800132e:	f7fe ffab 	bl	8000288 <__aeabi_dsub>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc35 	bl	8000ba8 <__aeabi_d2uiz>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		  uint8_t circx = 50 - 12 * cos(2*3.1416*airwheel.position/32);
 8001344:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8eb 	bl	8000524 <__aeabi_i2d>
 800134e:	a34c      	add	r3, pc, #304	; (adr r3, 8001480 <main+0x380>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f950 	bl	80005f8 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <main+0x3a8>)
 8001366:	f7ff fa71 	bl	800084c <__aeabi_ddiv>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	ec43 2b17 	vmov	d7, r2, r3
 8001372:	eeb0 0a47 	vmov.f32	s0, s14
 8001376:	eef0 0a67 	vmov.f32	s1, s15
 800137a:	f00a faad 	bl	800b8d8 <cos>
 800137e:	ec51 0b10 	vmov	r0, r1, d0
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <main+0x3ac>)
 8001388:	f7ff f936 	bl	80005f8 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	f04f 0000 	mov.w	r0, #0
 8001394:	4947      	ldr	r1, [pc, #284]	; (80014b4 <main+0x3b4>)
 8001396:	f7fe ff77 	bl	8000288 <__aeabi_dsub>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fc01 	bl	8000ba8 <__aeabi_d2uiz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

		  BSP_LCD_FillCircle(circx, circy, 3);
 80013ac:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80013b6:	b291      	uxth	r1, r2
 80013b8:	2203      	movs	r2, #3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 feba 	bl	8003134 <BSP_LCD_FillCircle>

		  airwheel.new_data = FLICK_NO_DATA;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  }
	  if(gesture&(1<<1))
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <main+0x2d8>
		  BSP_LCD_Clear(LCD_COLOR_GREEN);
 80013d0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80013d4:	f001 fc32 	bl	8002c3c <BSP_LCD_Clear>
	  if(gesture&(1<<2))
 80013d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <main+0x2e8>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80013e2:	201f      	movs	r0, #31
 80013e4:	f001 fc2a 	bl	8002c3c <BSP_LCD_Clear>

	  sprintf(str, "g:%lx             ", gesture);
 80013e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4932      	ldr	r1, [pc, #200]	; (80014b8 <main+0x3b8>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f008 f843 	bl	800947c <siprintf>
	  BSP_LCD_DisplayStringAtLine(1, (uint8_t *) str);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	2001      	movs	r0, #1
 80013fe:	f001 fd01 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>
	  sprintf(str, "gest:%d           ", (uint8_t) gesture);
 8001402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	492b      	ldr	r1, [pc, #172]	; (80014bc <main+0x3bc>)
 800140e:	4618      	mov	r0, r3
 8001410:	f008 f834 	bl	800947c <siprintf>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t *) str);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	2002      	movs	r0, #2
 800141c:	f001 fcf2 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>
	  sprintf(str, "t:%lx             ", touch);
 8001420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4926      	ldr	r1, [pc, #152]	; (80014c0 <main+0x3c0>)
 8001428:	4618      	mov	r0, r3
 800142a:	f008 f827 	bl	800947c <siprintf>
	  BSP_LCD_DisplayStringAtLine(3, (uint8_t *) str);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	2003      	movs	r0, #3
 8001436:	f001 fce5 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>


	  if ((uint8_t) gesture == 2)
 800143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d105      	bne.n	800144e <main+0x34e>
		  HAL_GPIO_TogglePin(MOT_DIR1_GPIO_Port, MOT_DIR1_Pin);
 8001442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f002 fca3 	bl	8003d94 <HAL_GPIO_TogglePin>

	  /* IMU */
	  HAL_I2C_Mem_Read(&hi2c2, ACC_GYRO_ADDR, STATUS_REG, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 1, 1);
 800144e:	2301      	movs	r3, #1
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2301      	movs	r3, #1
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	221e      	movs	r2, #30
 8001460:	21d6      	movs	r1, #214	; 0xd6
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <main+0x39c>)
 8001464:	f003 f83e 	bl	80044e4 <HAL_I2C_Mem_Read>
	  uint8_t tmp_stat = i2c2_buf[0];
 8001468:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800146c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	  if (tmp_stat & SR_XLDA)
 8001470:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d048      	beq.n	800150e <main+0x40e>
 800147c:	e022      	b.n	80014c4 <main+0x3c4>
 800147e:	bf00      	nop
 8001480:	2e48e8a7 	.word	0x2e48e8a7
 8001484:	401921ff 	.word	0x401921ff
 8001488:	200009ac 	.word	0x200009ac
 800148c:	48000400 	.word	0x48000400
 8001490:	0800ca00 	.word	0x0800ca00
 8001494:	0800ca10 	.word	0x0800ca10
 8001498:	200009f8 	.word	0x200009f8
 800149c:	20000a44 	.word	0x20000a44
 80014a0:	0800ca18 	.word	0x0800ca18
 80014a4:	0800ca30 	.word	0x0800ca30
 80014a8:	40400000 	.word	0x40400000
 80014ac:	40280000 	.word	0x40280000
 80014b0:	405b8000 	.word	0x405b8000
 80014b4:	40490000 	.word	0x40490000
 80014b8:	0800ca44 	.word	0x0800ca44
 80014bc:	0800ca58 	.word	0x0800ca58
 80014c0:	0800ca6c 	.word	0x0800ca6c
	  {
		  HAL_I2C_Mem_Read(&hi2c2, ACC_GYRO_ADDR, OUTX_L_XL, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 6, 1);
 80014c4:	2301      	movs	r3, #1
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2306      	movs	r3, #6
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2301      	movs	r3, #1
 80014d4:	2228      	movs	r2, #40	; 0x28
 80014d6:	21d6      	movs	r1, #214	; 0xd6
 80014d8:	483a      	ldr	r0, [pc, #232]	; (80015c4 <main+0x4c4>)
 80014da:	f003 f803 	bl	80044e4 <HAL_I2C_Mem_Read>
		  sprintf(str, "acc %+4hi%+4hi%+4hi",
				  (int8_t)*(i2c2_buf+1), (int8_t)*(i2c2_buf+3), (int8_t)*(i2c2_buf+5));
 80014de:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80014e2:	b25b      	sxtb	r3, r3
		  sprintf(str, "acc %+4hi%+4hi%+4hi",
 80014e4:	461a      	mov	r2, r3
				  (int8_t)*(i2c2_buf+1), (int8_t)*(i2c2_buf+3), (int8_t)*(i2c2_buf+5));
 80014e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80014ea:	b25b      	sxtb	r3, r3
		  sprintf(str, "acc %+4hi%+4hi%+4hi",
 80014ec:	4619      	mov	r1, r3
				  (int8_t)*(i2c2_buf+1), (int8_t)*(i2c2_buf+3), (int8_t)*(i2c2_buf+5));
 80014ee:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80014f2:	b25b      	sxtb	r3, r3
		  sprintf(str, "acc %+4hi%+4hi%+4hi",
 80014f4:	f107 0014 	add.w	r0, r7, #20
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	460b      	mov	r3, r1
 80014fc:	4932      	ldr	r1, [pc, #200]	; (80015c8 <main+0x4c8>)
 80014fe:	f007 ffbd 	bl	800947c <siprintf>
		  BSP_LCD_DisplayStringAtLine(12, (uint8_t *) str);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	200c      	movs	r0, #12
 800150a:	f001 fc7b 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>
	  }
	  if (tmp_stat & SR_GDA)
 800150e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d024      	beq.n	8001564 <main+0x464>
	  {
		  HAL_I2C_Mem_Read(&hi2c2, ACC_GYRO_ADDR, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, i2c2_buf, 6, 1);
 800151a:	2301      	movs	r3, #1
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2306      	movs	r3, #6
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	2222      	movs	r2, #34	; 0x22
 800152c:	21d6      	movs	r1, #214	; 0xd6
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <main+0x4c4>)
 8001530:	f002 ffd8 	bl	80044e4 <HAL_I2C_Mem_Read>
		  sprintf(str, "gyro %+4hi%+4hi%+4hi",
				  (int8_t)*(i2c2_buf+1), (int8_t)*(i2c2_buf+3), (int8_t)*(i2c2_buf+5));
 8001534:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001538:	b25b      	sxtb	r3, r3
		  sprintf(str, "gyro %+4hi%+4hi%+4hi",
 800153a:	461a      	mov	r2, r3
				  (int8_t)*(i2c2_buf+1), (int8_t)*(i2c2_buf+3), (int8_t)*(i2c2_buf+5));
 800153c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001540:	b25b      	sxtb	r3, r3
		  sprintf(str, "gyro %+4hi%+4hi%+4hi",
 8001542:	4619      	mov	r1, r3
				  (int8_t)*(i2c2_buf+1), (int8_t)*(i2c2_buf+3), (int8_t)*(i2c2_buf+5));
 8001544:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001548:	b25b      	sxtb	r3, r3
		  sprintf(str, "gyro %+4hi%+4hi%+4hi",
 800154a:	f107 0014 	add.w	r0, r7, #20
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	460b      	mov	r3, r1
 8001552:	491e      	ldr	r1, [pc, #120]	; (80015cc <main+0x4cc>)
 8001554:	f007 ff92 	bl	800947c <siprintf>
		  BSP_LCD_DisplayStringAtLine(11, (uint8_t *) str);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	200b      	movs	r0, #11
 8001560:	f001 fc50 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>
	  }

	  HAL_Delay(100);
 8001564:	2064      	movs	r0, #100	; 0x64
 8001566:	f002 f811 	bl	800358c <HAL_Delay>

	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800156a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <main+0x4d0>)
 8001570:	f002 fbe0 	bl	8003d34 <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	f47f ae84 	bne.w	8001284 <main+0x184>
	  {
		  float cnt = (float)__HAL_TIM_GetCounter(&htim4) / 10;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <main+0x4d4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800158a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800158e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001592:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

		  uint8_t str[20];
		  sprintf((char*)str, "mot %.1f\r", cnt);
 8001596:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4638      	mov	r0, r7
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <main+0x4d8>)
 80015a4:	f007 ff6a 	bl	800947c <siprintf>
		  BSP_LCD_DisplayStringAtLine(5, (uint8_t *) str);
 80015a8:	463b      	mov	r3, r7
 80015aa:	4619      	mov	r1, r3
 80015ac:	2005      	movs	r0, #5
 80015ae:	f001 fc29 	bl	8002e04 <BSP_LCD_DisplayStringAtLine>

		  pulse_cnt = 500;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <main+0x4dc>)
 80015b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015b8:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80015ba:	2104      	movs	r1, #4
 80015bc:	4808      	ldr	r0, [pc, #32]	; (80015e0 <main+0x4e0>)
 80015be:	f005 fb8f 	bl	8006ce0 <HAL_TIM_PWM_Start_IT>
  {
 80015c2:	e65f      	b.n	8001284 <main+0x184>
 80015c4:	20000a44 	.word	0x20000a44
 80015c8:	0800ca80 	.word	0x0800ca80
 80015cc:	0800ca94 	.word	0x0800ca94
 80015d0:	48000800 	.word	0x48000800
 80015d4:	200009ac 	.word	0x200009ac
 80015d8:	0800caac 	.word	0x0800caac
 80015dc:	20000a90 	.word	0x20000a90
 80015e0:	20000a94 	.word	0x20000a94

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0b8      	sub	sp, #224	; 0xe0
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ee:	2244      	movs	r2, #68	; 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 fad0 	bl	8008b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2288      	movs	r2, #136	; 0x88
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f007 fac2 	bl	8008b98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001622:	2310      	movs	r3, #16
 8001624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001628:	2302      	movs	r3, #2
 800162a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800163a:	230a      	movs	r3, #10
 800163c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001640:	2307      	movs	r3, #7
 8001642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001656:	4618      	mov	r0, r3
 8001658:	f003 fbe2 	bl	8004e20 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001662:	f000 fad3 	bl	8001c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001666:	230f      	movs	r3, #15
 8001668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2303      	movs	r3, #3
 800166e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001684:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001688:	2104      	movs	r1, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f003 ffae 	bl	80055ec <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001696:	f000 fab9 	bl	8001c0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800169a:	23c2      	movs	r3, #194	; 0xc2
 800169c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169e:	2300      	movs	r3, #0
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f004 f9a3 	bl	80059f8 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80016b8:	f000 faa8 	bl	8001c0c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016c0:	f003 fb58 	bl	8004d74 <HAL_PWREx_ControlVoltageScaling>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0xea>
  {
    Error_Handler();
 80016ca:	f000 fa9f 	bl	8001c0c <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	37e0      	adds	r7, #224	; 0xe0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_I2C1_Init+0x74>)
 80016de:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <MX_I2C1_Init+0x78>)
 80016e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_I2C1_Init+0x74>)
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <MX_I2C1_Init+0x7c>)
 80016e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 132;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_I2C1_Init+0x74>)
 80016ea:	2284      	movs	r2, #132	; 0x84
 80016ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_I2C1_Init+0x74>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_I2C1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_I2C1_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_I2C1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_I2C1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_I2C1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001712:	480e      	ldr	r0, [pc, #56]	; (800174c <MX_I2C1_Init+0x74>)
 8001714:	f002 fb58 	bl	8003dc8 <HAL_I2C_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800171e:	f000 fa75 	bl	8001c0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001722:	2100      	movs	r1, #0
 8001724:	4809      	ldr	r0, [pc, #36]	; (800174c <MX_I2C1_Init+0x74>)
 8001726:	f003 fa7f 	bl	8004c28 <HAL_I2CEx_ConfigAnalogFilter>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001730:	f000 fa6c 	bl	8001c0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001734:	2100      	movs	r1, #0
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_I2C1_Init+0x74>)
 8001738:	f003 fac1 	bl	8004cbe <HAL_I2CEx_ConfigDigitalFilter>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001742:	f000 fa63 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200009f8 	.word	0x200009f8
 8001750:	40005400 	.word	0x40005400
 8001754:	00702991 	.word	0x00702991

08001758 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_I2C2_Init+0x74>)
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <MX_I2C2_Init+0x78>)
 8001760:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702991;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_I2C2_Init+0x74>)
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <MX_I2C2_Init+0x7c>)
 8001766:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_I2C2_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <MX_I2C2_Init+0x74>)
 8001770:	2201      	movs	r2, #1
 8001772:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_I2C2_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_I2C2_Init+0x74>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <MX_I2C2_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_I2C2_Init+0x74>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_I2C2_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <MX_I2C2_Init+0x74>)
 8001794:	f002 fb18 	bl	8003dc8 <HAL_I2C_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800179e:	f000 fa35 	bl	8001c0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4809      	ldr	r0, [pc, #36]	; (80017cc <MX_I2C2_Init+0x74>)
 80017a6:	f003 fa3f 	bl	8004c28 <HAL_I2CEx_ConfigAnalogFilter>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017b0:	f000 fa2c 	bl	8001c0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_I2C2_Init+0x74>)
 80017b8:	f003 fa81 	bl	8004cbe <HAL_I2CEx_ConfigDigitalFilter>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017c2:	f000 fa23 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000a44 	.word	0x20000a44
 80017d0:	40005800 	.word	0x40005800
 80017d4:	00702991 	.word	0x00702991

080017d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_SPI2_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <MX_SPI2_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_SPI2_Init+0x74>)
 80017e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_SPI2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI2_Init+0x74>)
 80017f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI2_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_SPI2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI2_Init+0x74>)
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI2_Init+0x74>)
 800180e:	2210      	movs	r2, #16
 8001810:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI2_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI2_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_SPI2_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI2_Init+0x74>)
 8001826:	2207      	movs	r2, #7
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_SPI2_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI2_Init+0x74>)
 8001832:	2200      	movs	r2, #0
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_SPI2_Init+0x74>)
 8001838:	f004 fd9a 	bl	8006370 <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 f9e3 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000948 	.word	0x20000948
 8001850:	40003800 	.word	0x40003800

08001854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	; 0x38
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <MX_TIM2_Init+0xec>)
 8001888:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <MX_TIM2_Init+0xec>)
 8001890:	2250      	movs	r2, #80	; 0x50
 8001892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_TIM2_Init+0xec>)
 8001896:	2210      	movs	r2, #16
 8001898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <MX_TIM2_Init+0xec>)
 800189c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a2:	4b27      	ldr	r3, [pc, #156]	; (8001940 <MX_TIM2_Init+0xec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <MX_TIM2_Init+0xec>)
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ae:	4824      	ldr	r0, [pc, #144]	; (8001940 <MX_TIM2_Init+0xec>)
 80018b0:	f005 f8f4 	bl	8006a9c <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018ba:	f000 f9a7 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c8:	4619      	mov	r1, r3
 80018ca:	481d      	ldr	r0, [pc, #116]	; (8001940 <MX_TIM2_Init+0xec>)
 80018cc:	f005 fe60 	bl	8007590 <HAL_TIM_ConfigClockSource>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80018d6:	f000 f999 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018da:	4819      	ldr	r0, [pc, #100]	; (8001940 <MX_TIM2_Init+0xec>)
 80018dc:	f005 f99e 	bl	8006c1c <HAL_TIM_PWM_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80018e6:	f000 f991 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ea:	2320      	movs	r3, #32
 80018ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <MX_TIM2_Init+0xec>)
 80018fa:	f006 fc43 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001904:	f000 f982 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001908:	2360      	movs	r3, #96	; 0x60
 800190a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 800190c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001910:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	2204      	movs	r2, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM2_Init+0xec>)
 8001922:	f005 fd25 	bl	8007370 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800192c:	f000 f96e 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM2_Init+0xec>)
 8001932:	f000 faf1 	bl	8001f18 <HAL_TIM_MspPostInit>

}
 8001936:	bf00      	nop
 8001938:	3738      	adds	r7, #56	; 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000a94 	.word	0x20000a94

08001944 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <MX_TIM4_Init+0xcc>)
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <MX_TIM4_Init+0xd0>)
 8001976:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <MX_TIM4_Init+0xcc>)
 800197a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800197e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <MX_TIM4_Init+0xcc>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_TIM4_Init+0xcc>)
 8001988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_TIM4_Init+0xcc>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_TIM4_Init+0xcc>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800199a:	481d      	ldr	r0, [pc, #116]	; (8001a10 <MX_TIM4_Init+0xcc>)
 800199c:	f005 f87e 	bl	8006a9c <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80019a6:	f000 f931 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4619      	mov	r1, r3
 80019b6:	4816      	ldr	r0, [pc, #88]	; (8001a10 <MX_TIM4_Init+0xcc>)
 80019b8:	f005 fdea 	bl	8007590 <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019c2:	f000 f923 	bl	8001c0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80019c6:	2305      	movs	r3, #5
 80019c8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80019ca:	2360      	movs	r3, #96	; 0x60
 80019cc:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 80019ce:	2302      	movs	r3, #2
 80019d0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 80019d2:	230f      	movs	r3, #15
 80019d4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <MX_TIM4_Init+0xcc>)
 80019de:	f005 fe9d 	bl	800771c <HAL_TIM_SlaveConfigSynchro>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM4_Init+0xa8>
  {
    Error_Handler();
 80019e8:	f000 f910 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80019ec:	2310      	movs	r3, #16
 80019ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019f4:	463b      	mov	r3, r7
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_TIM4_Init+0xcc>)
 80019fa:	f006 fbc3 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8001a04:	f000 f902 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3730      	adds	r7, #48	; 0x30
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200009ac 	.word	0x200009ac
 8001a14:	40000800 	.word	0x40000800

08001a18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <MX_USART2_UART_Init+0x5c>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_USART2_UART_Init+0x58>)
 8001a5c:	f006 fc38 	bl	80082d0 <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a66:	f000 f8d1 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000ae0 	.word	0x20000ae0
 8001a74:	40004400 	.word	0x40004400

08001a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa6:	4b55      	ldr	r3, [pc, #340]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	4a54      	ldr	r2, [pc, #336]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab2:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a4e      	ldr	r2, [pc, #312]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <MX_GPIO_Init+0x184>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin|FLICK_TS_Pin
 8001aee:	2200      	movs	r2, #0
 8001af0:	21e7      	movs	r1, #231	; 0xe7
 8001af2:	4843      	ldr	r0, [pc, #268]	; (8001c00 <MX_GPIO_Init+0x188>)
 8001af4:	f002 f936 	bl	8003d64 <HAL_GPIO_WritePin>
                          |FLICK_RESET_Pin|MOT_REF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MOT_DIR1_Pin|MOT_RESET_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b02:	f002 f92f 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_MODE1_Pin|MOT_MODE2_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2150      	movs	r1, #80	; 0x50
 8001b0a:	483e      	ldr	r0, [pc, #248]	; (8001c04 <MX_GPIO_Init+0x18c>)
 8001b0c:	f002 f92a 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <MX_GPIO_Init+0x190>)
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4836      	ldr	r0, [pc, #216]	; (8001c00 <MX_GPIO_Init+0x188>)
 8001b26:	f001 fe67 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	482f      	ldr	r0, [pc, #188]	; (8001c00 <MX_GPIO_Init+0x188>)
 8001b42:	f001 fe59 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001b46:	2302      	movs	r3, #2
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b52:	2302      	movs	r3, #2
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4828      	ldr	r0, [pc, #160]	; (8001c00 <MX_GPIO_Init+0x188>)
 8001b5e:	f001 fe4b 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin MOT_DIR1_Pin MOT_RESET_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|MOT_DIR1_Pin|MOT_RESET_Pin;
 8001b62:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f001 fe3b 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLICK_TS_Pin */
  GPIO_InitStruct.Pin = FLICK_TS_Pin;
 8001b82:	2320      	movs	r3, #32
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b86:	2311      	movs	r3, #17
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLICK_TS_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4819      	ldr	r0, [pc, #100]	; (8001c00 <MX_GPIO_Init+0x188>)
 8001b9a:	f001 fe2d 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLICK_RESET_Pin MOT_REF_Pin */
  GPIO_InitStruct.Pin = FLICK_RESET_Pin|MOT_REF_Pin;
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <MX_GPIO_Init+0x188>)
 8001bb6:	f001 fe1f 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_FAULT_Pin */
  GPIO_InitStruct.Pin = MOT_FAULT_Pin;
 8001bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOT_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f001 fe11 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT_MODE1_Pin MOT_MODE2_Pin */
  GPIO_InitStruct.Pin = MOT_MODE1_Pin|MOT_MODE2_Pin;
 8001bd6:	2350      	movs	r3, #80	; 0x50
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_GPIO_Init+0x18c>)
 8001bee:	f001 fe03 	bl	80037f8 <HAL_GPIO_Init>

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000800 	.word	0x48000800
 8001c04:	48000400 	.word	0x48000400
 8001c08:	10110000 	.word	0x10110000

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_MspInit+0x44>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_MspInit+0x44>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_MspInit+0x44>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_MspInit+0x44>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_MspInit+0x44>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6593      	str	r3, [r2, #88]	; 0x58
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_MspInit+0x44>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	; 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <HAL_I2C_MspInit+0xdc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d129      	bne.n	8001cda <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca4:	2312      	movs	r3, #18
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4823      	ldr	r0, [pc, #140]	; (8001d48 <HAL_I2C_MspInit+0xe4>)
 8001cbc:	f001 fd9c 	bl	80037f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cd8:	e02d      	b.n	8001d36 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <HAL_I2C_MspInit+0xe8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d128      	bne.n	8001d36 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001cfc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d02:	2312      	movs	r3, #18
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <HAL_I2C_MspInit+0xe4>)
 8001d1a:	f001 fd6d 	bl	80037f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001d24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_I2C_MspInit+0xe0>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
}
 8001d36:	bf00      	nop
 8001d38:	3730      	adds	r7, #48	; 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40005400 	.word	0x40005400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	40005800 	.word	0x40005800

08001d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <HAL_SPI_MspInit+0xb4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d144      	bne.n	8001dfc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a24      	ldr	r2, [pc, #144]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_SPI_MspInit+0xb8>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dca:	2305      	movs	r3, #5
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <HAL_SPI_MspInit+0xbc>)
 8001dd6:	f001 fd0f 	bl	80037f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dec:	2305      	movs	r3, #5
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	4806      	ldr	r0, [pc, #24]	; (8001e10 <HAL_SPI_MspInit+0xc0>)
 8001df8:	f001 fcfe 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40003800 	.word	0x40003800
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	48000800 	.word	0x48000800
 8001e10:	48000400 	.word	0x48000400

08001e14 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_SPI_MspDeInit+0x38>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10e      	bne.n	8001e44 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_SPI_MspDeInit+0x3c>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_SPI_MspDeInit+0x3c>)
 8001e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58

    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_3);
 8001e32:	2108      	movs	r1, #8
 8001e34:	4807      	ldr	r0, [pc, #28]	; (8001e54 <HAL_SPI_MspDeInit+0x40>)
 8001e36:	f001 fe89 	bl	8003b4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e3e:	4806      	ldr	r0, [pc, #24]	; (8001e58 <HAL_SPI_MspDeInit+0x44>)
 8001e40:	f001 fe84 	bl	8003b4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40003800 	.word	0x40003800
 8001e50:	40021000 	.word	0x40021000
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48000400 	.word	0x48000400

08001e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d114      	bne.n	8001ea8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	201c      	movs	r0, #28
 8001e9c:	f001 fc75 	bl	800378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea0:	201c      	movs	r0, #28
 8001ea2:	f001 fc8e 	bl	80037c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ea6:	e02c      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_TIM_Base_MspInit+0xb4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d127      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_TIM_Base_MspInit+0xb0>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = B1_TIMER_IN_Pin;
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(B1_TIMER_IN_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_TIM_Base_MspInit+0xb8>)
 8001efe:	f001 fc7b 	bl	80037f8 <HAL_GPIO_Init>
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40000800 	.word	0x40000800
 8001f14:	48000400 	.word	0x48000400

08001f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d11b      	bne.n	8001f72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_TIM_MspPostInit+0x64>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <HAL_TIM_MspPostInit+0x64>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_TIM_MspPostInit+0x64>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOT_PWM1_Pin;
 8001f52:	2308      	movs	r3, #8
 8001f54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f56:	2312      	movs	r3, #18
 8001f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOT_PWM1_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <HAL_TIM_MspPostInit+0x68>)
 8001f6e:	f001 fc43 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	48000400 	.word	0x48000400

08001f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_UART_MspInit+0x7c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d128      	bne.n	8001ff8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_UART_MspInit+0x80>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_UART_MspInit+0x80>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_UART_MspInit+0x80>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_UART_MspInit+0x80>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_UART_MspInit+0x80>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_UART_MspInit+0x80>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff4:	f001 fc00 	bl	80037f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40004400 	.word	0x40004400
 8002004:	40021000 	.word	0x40021000

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <MemManage_Handler+0x4>

08002022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler+0x4>

0800202e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f001 fa76 	bl	800354c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <TIM2_IRQHandler+0x14>)
 800206a:	f005 f861 	bl	8007130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  Pulse_Counter();
 800206e:	f7ff f82b 	bl	80010c8 <Pulse_Counter>

  /* USER CODE END TIM2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000a94 	.word	0x20000a94

0800207c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:

int _kill(int pid, int sig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002096:	f006 fd55 	bl	8008b44 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
	return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:

void _exit (int status)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
	while (1) {}		/* Make sure we hang here */
 80020be:	e7fe      	b.n	80020be <_exit+0x12>

080020c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e00a      	b.n	80020e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020d2:	f3af 8000 	nop.w
 80020d6:	4601      	mov	r1, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf0      	blt.n	80020d2 <_read+0x12>
	}

return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e009      	b.n	8002120 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbf1      	blt.n	800210c <_write+0x12>
	}
	return len;
 8002128:	687b      	ldr	r3, [r7, #4]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_close>:

int _close(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	return -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215a:	605a      	str	r2, [r3, #4]
	return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_isatty>:

int _isatty(int file)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	return 1;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f006 fcba 	bl	8008b44 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20018000 	.word	0x20018000
 80021fc:	00000400 	.word	0x00000400
 8002200:	20000250 	.word	0x20000250
 8002204:	20000b80 	.word	0x20000b80

08002208 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <SystemInit+0x64>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <SystemInit+0x64>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <SystemInit+0x68>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <SystemInit+0x68>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <SystemInit+0x68>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <SystemInit+0x68>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <SystemInit+0x68>)
 8002234:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002238:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800223c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <SystemInit+0x68>)
 8002240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002244:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <SystemInit+0x68>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <SystemInit+0x68>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <SystemInit+0x68>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <SystemInit+0x64>)
 800225a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800225e:	609a      	str	r2, [r3, #8]
#endif
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00
 8002270:	40021000 	.word	0x40021000

08002274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002278:	f7ff ffc6 	bl	8002208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800227c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800227e:	e003      	b.n	8002288 <LoopCopyDataInit>

08002280 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002282:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002284:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002286:	3104      	adds	r1, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002288:	480a      	ldr	r0, [pc, #40]	; (80022b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800228c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800228e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002290:	d3f6      	bcc.n	8002280 <CopyDataInit>
	ldr	r2, =_sbss
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002294:	e002      	b.n	800229c <LoopFillZerobss>

08002296 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002296:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002298:	f842 3b04 	str.w	r3, [r2], #4

0800229c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <LoopForever+0x16>)
	cmp	r2, r3
 800229e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022a0:	d3f9      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f006 fc55 	bl	8008b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a6:	f7fe ff2b 	bl	8001100 <main>

080022aa <LoopForever>:

LoopForever:
    b LoopForever
 80022aa:	e7fe      	b.n	80022aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80022b0:	0800f2f0 	.word	0x0800f2f0
	ldr	r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022b8:	20000234 	.word	0x20000234
	ldr	r2, =_sbss
 80022bc:	20000234 	.word	0x20000234
	ldr	r3, = _ebss
 80022c0:	20000b80 	.word	0x20000b80

080022c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC1_2_IRQHandler>
	...

080022c8 <flick_receive>:
 * and if available, receives it to the @b flick_payload buffer.
 *
 * @return Type of the message received
 */
flick_msg_t flick_receive(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af02      	add	r7, sp, #8
	flick_msg_t ret = FLICK_MSG_NO_MSG;
 80022ce:	2304      	movs	r3, #4
 80022d0:	71fb      	strb	r3, [r7, #7]

	// only if the TS is asserted by the MGC3X30
	if (FLICK_TS_GET() == GPIO_PIN_RESET)
 80022d2:	2120      	movs	r1, #32
 80022d4:	481a      	ldr	r0, [pc, #104]	; (8002340 <flick_receive+0x78>)
 80022d6:	f001 fd2d 	bl	8003d34 <HAL_GPIO_ReadPin>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d129      	bne.n	8002334 <flick_receive+0x6c>
	{
		FLICK_TS_LOW();
 80022e0:	2200      	movs	r2, #0
 80022e2:	2120      	movs	r1, #32
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <flick_receive+0x78>)
 80022e6:	f001 fd3d 	bl	8003d64 <HAL_GPIO_WritePin>

		// get header
		HAL_I2C_Master_Receive(hi2cflick, FLICK_ADDR, flick_payload, 255, 10);
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <flick_receive+0x7c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	230a      	movs	r3, #10
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	23ff      	movs	r3, #255	; 0xff
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <flick_receive+0x80>)
 80022f6:	2184      	movs	r1, #132	; 0x84
 80022f8:	f001 feea 	bl	80040d0 <HAL_I2C_Master_Receive>

		switch (flick_payload[3])
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <flick_receive+0x80>)
 80022fe:	78db      	ldrb	r3, [r3, #3]
 8002300:	2b91      	cmp	r3, #145	; 0x91
 8002302:	d00c      	beq.n	800231e <flick_receive+0x56>
 8002304:	2b91      	cmp	r3, #145	; 0x91
 8002306:	dc0d      	bgt.n	8002324 <flick_receive+0x5c>
 8002308:	2b15      	cmp	r3, #21
 800230a:	d002      	beq.n	8002312 <flick_receive+0x4a>
 800230c:	2b83      	cmp	r3, #131	; 0x83
 800230e:	d003      	beq.n	8002318 <flick_receive+0x50>
 8002310:	e008      	b.n	8002324 <flick_receive+0x5c>
		{
			case 0x15:
				ret = FLICK_MSG_SYSTEM_STATUS;
 8002312:	2300      	movs	r3, #0
 8002314:	71fb      	strb	r3, [r7, #7]
				break;
 8002316:	e008      	b.n	800232a <flick_receive+0x62>
			case 0x83:
				ret = FLICK_MSG_FW_VERSION_INFO;
 8002318:	2301      	movs	r3, #1
 800231a:	71fb      	strb	r3, [r7, #7]
				break;
 800231c:	e005      	b.n	800232a <flick_receive+0x62>
			case 0x91:
				ret = FLICK_MSG_SENSOR_DATA;
 800231e:	2302      	movs	r3, #2
 8002320:	71fb      	strb	r3, [r7, #7]
				break;
 8002322:	e002      	b.n	800232a <flick_receive+0x62>
			default:
				ret = FLICK_MSG_UNKNOWN;
 8002324:	2303      	movs	r3, #3
 8002326:	71fb      	strb	r3, [r7, #7]
				break;
 8002328:	bf00      	nop
		}

		FLICK_TS_HIGH();
 800232a:	2201      	movs	r2, #1
 800232c:	2120      	movs	r1, #32
 800232e:	4804      	ldr	r0, [pc, #16]	; (8002340 <flick_receive+0x78>)
 8002330:	f001 fd18 	bl	8003d64 <HAL_GPIO_WritePin>
	}

	return ret;
 8002334:	79fb      	ldrb	r3, [r7, #7]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	48000800 	.word	0x48000800
 8002344:	20000000 	.word	0x20000000
 8002348:	20000254 	.word	0x20000254

0800234c <flick_reset>:

void flick_reset(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	FLICK_RESET_LOW();
 8002350:	2200      	movs	r2, #0
 8002352:	2140      	movs	r1, #64	; 0x40
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <flick_reset+0x28>)
 8002356:	f001 fd05 	bl	8003d64 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800235a:	200a      	movs	r0, #10
 800235c:	f001 f916 	bl	800358c <HAL_Delay>
	FLICK_RESET_HIGH();
 8002360:	2201      	movs	r2, #1
 8002362:	2140      	movs	r1, #64	; 0x40
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <flick_reset+0x28>)
 8002366:	f001 fcfd 	bl	8003d64 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800236a:	200a      	movs	r0, #10
 800236c:	f001 f90e 	bl	800358c <HAL_Delay>

	//flick_msg_t msg_type = flick_receive();
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	48000800 	.word	0x48000800

08002378 <flick_set_param>:

void flick_set_param(uint16_t param_ID, uint32_t arg0, uint32_t arg1)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af02      	add	r7, sp, #8
 800237e:	4603      	mov	r3, r0
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	81fb      	strh	r3, [r7, #14]
	uint8_t msg[16] = {0};
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]

	msg[0] = 0x10;
 8002396:	2310      	movs	r3, #16
 8002398:	743b      	strb	r3, [r7, #16]
	msg[3] = 0xA2;
 800239a:	23a2      	movs	r3, #162	; 0xa2
 800239c:	74fb      	strb	r3, [r7, #19]
	msg[4] = param_ID & 0xFF;
 800239e:	89fb      	ldrh	r3, [r7, #14]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	753b      	strb	r3, [r7, #20]
	msg[5] = param_ID >> 8;
 80023a4:	89fb      	ldrh	r3, [r7, #14]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	757b      	strb	r3, [r7, #21]
	msg[8] = arg0 & 0xFF;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	763b      	strb	r3, [r7, #24]
	msg[9] = (arg0>>8) & 0xFF;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	767b      	strb	r3, [r7, #25]
	msg[10] = (arg0>>16) & 0xFF;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	76bb      	strb	r3, [r7, #26]
	msg[11] = (arg0>>24) & 0xFF;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	0e1b      	lsrs	r3, r3, #24
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	76fb      	strb	r3, [r7, #27]
	msg[12] = arg1 & 0xFF;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	773b      	strb	r3, [r7, #28]
	msg[13] = (arg1>>8) & 0xFF;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	777b      	strb	r3, [r7, #29]
	msg[14] = (arg1>>16) & 0xFF;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	77bb      	strb	r3, [r7, #30]
	msg[15] = (arg1>>24) & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Master_Transmit(hi2cflick, FLICK_ADDR, msg, 16, 10);
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <flick_set_param+0x90>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f107 0210 	add.w	r2, r7, #16
 80023f2:	230a      	movs	r3, #10
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2310      	movs	r3, #16
 80023f8:	2184      	movs	r1, #132	; 0x84
 80023fa:	f001 fd75 	bl	8003ee8 <HAL_I2C_Master_Transmit>
}
 80023fe:	bf00      	nop
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000

0800240c <flick_poll_data>:

flick_data_t flick_poll_data(uint32_t* gest_info, uint32_t* touch_info, airwheel_data_t* airwheel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
	flick_data_t ret = FLICK_NO_DATA;
 8002418:	2300      	movs	r3, #0
 800241a:	75fb      	strb	r3, [r7, #23]

	if (flick_receive() == FLICK_MSG_SENSOR_DATA)
 800241c:	f7ff ff54 	bl	80022c8 <flick_receive>
 8002420:	4603      	mov	r3, r0
 8002422:	2b02      	cmp	r3, #2
 8002424:	d17b      	bne.n	800251e <flick_poll_data+0x112>
	{
		uint16_t data_out_mask = (flick_payload[5] << 8) + flick_payload[4]; //strona 42 w dokumentacji
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <flick_poll_data+0x11c>)
 8002428:	795b      	ldrb	r3, [r3, #5]
 800242a:	b29b      	uxth	r3, r3
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <flick_poll_data+0x11c>)
 8002432:	791b      	ldrb	r3, [r3, #4]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4413      	add	r3, r2
 8002438:	82bb      	strh	r3, [r7, #20]
		uint8_t sys_info = flick_payload[7];
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <flick_poll_data+0x11c>)
 800243c:	79db      	ldrb	r3, [r3, #7]
 800243e:	74fb      	strb	r3, [r7, #19]

		uint8_t data_ptr = 8;
 8002440:	2308      	movs	r3, #8
 8002442:	75bb      	strb	r3, [r7, #22]

		// check DSPStatus field
		if (data_out_mask & (1<<0))
 8002444:	8abb      	ldrh	r3, [r7, #20]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <flick_poll_data+0x48>
		{
			data_ptr += 2;
 800244e:	7dbb      	ldrb	r3, [r7, #22]
 8002450:	3302      	adds	r3, #2
 8002452:	75bb      	strb	r3, [r7, #22]
		}

		// check GestureInfo field
		if (data_out_mask & (1<<1))
 8002454:	8abb      	ldrh	r3, [r7, #20]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01c      	beq.n	8002498 <flick_poll_data+0x8c>
		{
			*gest_info = (flick_payload[3+data_ptr] << 24) +
 800245e:	7dbb      	ldrb	r3, [r7, #22]
 8002460:	3303      	adds	r3, #3
 8002462:	4a31      	ldr	r2, [pc, #196]	; (8002528 <flick_poll_data+0x11c>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	061a      	lsls	r2, r3, #24
					(flick_payload[2+data_ptr] << 16) +
 8002468:	7dbb      	ldrb	r3, [r7, #22]
 800246a:	3302      	adds	r3, #2
 800246c:	492e      	ldr	r1, [pc, #184]	; (8002528 <flick_poll_data+0x11c>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	041b      	lsls	r3, r3, #16
			*gest_info = (flick_payload[3+data_ptr] << 24) +
 8002472:	441a      	add	r2, r3
					(flick_payload[1+data_ptr] << 8) +
 8002474:	7dbb      	ldrb	r3, [r7, #22]
 8002476:	3301      	adds	r3, #1
 8002478:	492b      	ldr	r1, [pc, #172]	; (8002528 <flick_poll_data+0x11c>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	021b      	lsls	r3, r3, #8
					(flick_payload[2+data_ptr] << 16) +
 800247e:	4413      	add	r3, r2
					flick_payload[data_ptr];
 8002480:	7dba      	ldrb	r2, [r7, #22]
 8002482:	4929      	ldr	r1, [pc, #164]	; (8002528 <flick_poll_data+0x11c>)
 8002484:	5c8a      	ldrb	r2, [r1, r2]
					(flick_payload[1+data_ptr] << 8) +
 8002486:	4413      	add	r3, r2
 8002488:	461a      	mov	r2, r3
			*gest_info = (flick_payload[3+data_ptr] << 24) +
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	601a      	str	r2, [r3, #0]

			data_ptr += 4;
 800248e:	7dbb      	ldrb	r3, [r7, #22]
 8002490:	3304      	adds	r3, #4
 8002492:	75bb      	strb	r3, [r7, #22]
			ret = FLICK_NEW_DATA;
 8002494:	2301      	movs	r3, #1
 8002496:	75fb      	strb	r3, [r7, #23]
		}

		// check TouchInfo field
		if (data_out_mask & (1<<2))
 8002498:	8abb      	ldrh	r3, [r7, #20]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01c      	beq.n	80024dc <flick_poll_data+0xd0>
		{
			*touch_info = (flick_payload[3+data_ptr] << 24) +
 80024a2:	7dbb      	ldrb	r3, [r7, #22]
 80024a4:	3303      	adds	r3, #3
 80024a6:	4a20      	ldr	r2, [pc, #128]	; (8002528 <flick_poll_data+0x11c>)
 80024a8:	5cd3      	ldrb	r3, [r2, r3]
 80024aa:	061a      	lsls	r2, r3, #24
					(flick_payload[2+data_ptr] << 16) +
 80024ac:	7dbb      	ldrb	r3, [r7, #22]
 80024ae:	3302      	adds	r3, #2
 80024b0:	491d      	ldr	r1, [pc, #116]	; (8002528 <flick_poll_data+0x11c>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	041b      	lsls	r3, r3, #16
			*touch_info = (flick_payload[3+data_ptr] << 24) +
 80024b6:	441a      	add	r2, r3
					(flick_payload[1+data_ptr] << 8) +
 80024b8:	7dbb      	ldrb	r3, [r7, #22]
 80024ba:	3301      	adds	r3, #1
 80024bc:	491a      	ldr	r1, [pc, #104]	; (8002528 <flick_poll_data+0x11c>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	021b      	lsls	r3, r3, #8
					(flick_payload[2+data_ptr] << 16) +
 80024c2:	4413      	add	r3, r2
					flick_payload[data_ptr];
 80024c4:	7dba      	ldrb	r2, [r7, #22]
 80024c6:	4918      	ldr	r1, [pc, #96]	; (8002528 <flick_poll_data+0x11c>)
 80024c8:	5c8a      	ldrb	r2, [r1, r2]
					(flick_payload[1+data_ptr] << 8) +
 80024ca:	4413      	add	r3, r2
 80024cc:	461a      	mov	r2, r3
			*touch_info = (flick_payload[3+data_ptr] << 24) +
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	601a      	str	r2, [r3, #0]

			data_ptr += 4;
 80024d2:	7dbb      	ldrb	r3, [r7, #22]
 80024d4:	3304      	adds	r3, #4
 80024d6:	75bb      	strb	r3, [r7, #22]
			ret = FLICK_NEW_DATA;
 80024d8:	2301      	movs	r3, #1
 80024da:	75fb      	strb	r3, [r7, #23]
		}

		// check AirWheelInfo field
		if ((data_out_mask & (1<<3)) && (sys_info & (1<<1)))
 80024dc:	8abb      	ldrh	r3, [r7, #20]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01b      	beq.n	800251e <flick_poll_data+0x112>
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d016      	beq.n	800251e <flick_poll_data+0x112>
		{
			airwheel->position = flick_payload[data_ptr] & 0x1F;
 80024f0:	7dbb      	ldrb	r3, [r7, #22]
 80024f2:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <flick_poll_data+0x11c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	705a      	strb	r2, [r3, #1]
			airwheel->count = flick_payload[data_ptr] >>5;
 8002500:	7dbb      	ldrb	r3, [r7, #22]
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <flick_poll_data+0x11c>)
 8002504:	5cd3      	ldrb	r3, [r2, r3]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	b2da      	uxtb	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	709a      	strb	r2, [r3, #2]
			airwheel->new_data = FLICK_NEW_DATA;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]

			data_ptr += 2;
 8002514:	7dbb      	ldrb	r3, [r7, #22]
 8002516:	3302      	adds	r3, #2
 8002518:	75bb      	strb	r3, [r7, #22]
			ret = FLICK_NEW_DATA;
 800251a:	2301      	movs	r3, #1
 800251c:	75fb      	strb	r3, [r7, #23]
			ret = FLICK_NEW_DATA;
		}*/

	}

	return ret;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000254 	.word	0x20000254

0800252c <st7735_Init>:
  * @brief  Initialize the ST7735 LCD Component.
  * @param  None
  * @retval None
  */
void st7735_Init(void)
{    
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	71fb      	strb	r3, [r7, #7]
  
  /* Initialize ST7735 low level bus layer -----------------------------------*/
  LCD_IO_Init();
 8002536:	f7fe fd0f 	bl	8000f58 <LCD_IO_Init>
  /* Out of sleep mode, 0 args, no delay */
  st7735_WriteReg(LCD_REG_17, 0x00); 
 800253a:	2100      	movs	r1, #0
 800253c:	2011      	movs	r0, #17
 800253e:	f000 f9b0 	bl	80028a2 <st7735_WriteReg>
  /* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
  LCD_IO_WriteReg(LCD_REG_177);
 8002542:	20b1      	movs	r0, #177	; 0xb1
 8002544:	f7fe fd2e 	bl	8000fa4 <LCD_IO_WriteReg>
  data = 0x01;
 8002548:	2301      	movs	r3, #1
 800254a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 800254c:	1dfb      	adds	r3, r7, #7
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fd45 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = 0x2C;
 8002556:	232c      	movs	r3, #44	; 0x2c
 8002558:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fd3e 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = 0x2D;
 8002564:	232d      	movs	r3, #45	; 0x2d
 8002566:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	2101      	movs	r1, #1
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fd37 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */    
  st7735_WriteReg(LCD_REG_178, 0x01);
 8002572:	2101      	movs	r1, #1
 8002574:	20b2      	movs	r0, #178	; 0xb2
 8002576:	f000 f994 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_178, 0x2C);
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	20b2      	movs	r0, #178	; 0xb2
 800257e:	f000 f990 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_178, 0x2D);
 8002582:	212d      	movs	r1, #45	; 0x2d
 8002584:	20b2      	movs	r0, #178	; 0xb2
 8002586:	f000 f98c 	bl	80028a2 <st7735_WriteReg>
  /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */ 
  st7735_WriteReg(LCD_REG_179, 0x01);
 800258a:	2101      	movs	r1, #1
 800258c:	20b3      	movs	r0, #179	; 0xb3
 800258e:	f000 f988 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2C);
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	20b3      	movs	r0, #179	; 0xb3
 8002596:	f000 f984 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2D);
 800259a:	212d      	movs	r1, #45	; 0x2d
 800259c:	20b3      	movs	r0, #179	; 0xb3
 800259e:	f000 f980 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x01);
 80025a2:	2101      	movs	r1, #1
 80025a4:	20b3      	movs	r0, #179	; 0xb3
 80025a6:	f000 f97c 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2C);
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	20b3      	movs	r0, #179	; 0xb3
 80025ae:	f000 f978 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2D);
 80025b2:	212d      	movs	r1, #45	; 0x2d
 80025b4:	20b3      	movs	r0, #179	; 0xb3
 80025b6:	f000 f974 	bl	80028a2 <st7735_WriteReg>
  /* Display inversion ctrl, 1 arg, no delay: No inversion */
  st7735_WriteReg(LCD_REG_180, 0x07);
 80025ba:	2107      	movs	r1, #7
 80025bc:	20b4      	movs	r0, #180	; 0xb4
 80025be:	f000 f970 	bl	80028a2 <st7735_WriteReg>
  /* Power control, 3 args, no delay: -4.6V , AUTO mode */
  st7735_WriteReg(LCD_REG_192, 0xA2);
 80025c2:	21a2      	movs	r1, #162	; 0xa2
 80025c4:	20c0      	movs	r0, #192	; 0xc0
 80025c6:	f000 f96c 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_192, 0x02);
 80025ca:	2102      	movs	r1, #2
 80025cc:	20c0      	movs	r0, #192	; 0xc0
 80025ce:	f000 f968 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_192, 0x84);
 80025d2:	2184      	movs	r1, #132	; 0x84
 80025d4:	20c0      	movs	r0, #192	; 0xc0
 80025d6:	f000 f964 	bl	80028a2 <st7735_WriteReg>
  /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
  st7735_WriteReg(LCD_REG_193, 0xC5);
 80025da:	21c5      	movs	r1, #197	; 0xc5
 80025dc:	20c1      	movs	r0, #193	; 0xc1
 80025de:	f000 f960 	bl	80028a2 <st7735_WriteReg>
  /* Power control, 2 args, no delay: Opamp current small, Boost frequency */ 
  st7735_WriteReg(LCD_REG_194, 0x0A);
 80025e2:	210a      	movs	r1, #10
 80025e4:	20c2      	movs	r0, #194	; 0xc2
 80025e6:	f000 f95c 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_194, 0x00);
 80025ea:	2100      	movs	r1, #0
 80025ec:	20c2      	movs	r0, #194	; 0xc2
 80025ee:	f000 f958 	bl	80028a2 <st7735_WriteReg>
  /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */  
  st7735_WriteReg(LCD_REG_195, 0x8A);
 80025f2:	218a      	movs	r1, #138	; 0x8a
 80025f4:	20c3      	movs	r0, #195	; 0xc3
 80025f6:	f000 f954 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_195, 0x2A);
 80025fa:	212a      	movs	r1, #42	; 0x2a
 80025fc:	20c3      	movs	r0, #195	; 0xc3
 80025fe:	f000 f950 	bl	80028a2 <st7735_WriteReg>
  /* Power control, 2 args, no delay */
  st7735_WriteReg(LCD_REG_196, 0x8A);
 8002602:	218a      	movs	r1, #138	; 0x8a
 8002604:	20c4      	movs	r0, #196	; 0xc4
 8002606:	f000 f94c 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_196, 0xEE);
 800260a:	21ee      	movs	r1, #238	; 0xee
 800260c:	20c4      	movs	r0, #196	; 0xc4
 800260e:	f000 f948 	bl	80028a2 <st7735_WriteReg>
  /* Power control, 1 arg, no delay */
  st7735_WriteReg(LCD_REG_197, 0x0E);
 8002612:	210e      	movs	r1, #14
 8002614:	20c5      	movs	r0, #197	; 0xc5
 8002616:	f000 f944 	bl	80028a2 <st7735_WriteReg>
  /* Don't invert display, no args, no delay */
  LCD_IO_WriteReg(LCD_REG_32);
 800261a:	2020      	movs	r0, #32
 800261c:	f7fe fcc2 	bl	8000fa4 <LCD_IO_WriteReg>
  /* Set color mode, 1 arg, no delay: 16-bit color */
  st7735_WriteReg(LCD_REG_58, 0x05);
 8002620:	2105      	movs	r1, #5
 8002622:	203a      	movs	r0, #58	; 0x3a
 8002624:	f000 f93d 	bl	80028a2 <st7735_WriteReg>
//  data = 0x00;
//  LCD_IO_WriteMultipleData(&data, 1);
//  data = 0x9F;
//  LCD_IO_WriteMultipleData(&data, 1);
  /* gamma seq, 16 args, no delay */
  st7735_WriteReg(LCD_REG_224, 0x02);
 8002628:	2102      	movs	r1, #2
 800262a:	20e0      	movs	r0, #224	; 0xe0
 800262c:	f000 f939 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x1c);
 8002630:	211c      	movs	r1, #28
 8002632:	20e0      	movs	r0, #224	; 0xe0
 8002634:	f000 f935 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x07);
 8002638:	2107      	movs	r1, #7
 800263a:	20e0      	movs	r0, #224	; 0xe0
 800263c:	f000 f931 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x12);
 8002640:	2112      	movs	r1, #18
 8002642:	20e0      	movs	r0, #224	; 0xe0
 8002644:	f000 f92d 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x37);
 8002648:	2137      	movs	r1, #55	; 0x37
 800264a:	20e0      	movs	r0, #224	; 0xe0
 800264c:	f000 f929 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x32);
 8002650:	2132      	movs	r1, #50	; 0x32
 8002652:	20e0      	movs	r0, #224	; 0xe0
 8002654:	f000 f925 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x29);
 8002658:	2129      	movs	r1, #41	; 0x29
 800265a:	20e0      	movs	r0, #224	; 0xe0
 800265c:	f000 f921 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x2d);
 8002660:	212d      	movs	r1, #45	; 0x2d
 8002662:	20e0      	movs	r0, #224	; 0xe0
 8002664:	f000 f91d 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x29);
 8002668:	2129      	movs	r1, #41	; 0x29
 800266a:	20e0      	movs	r0, #224	; 0xe0
 800266c:	f000 f919 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x25);
 8002670:	2125      	movs	r1, #37	; 0x25
 8002672:	20e0      	movs	r0, #224	; 0xe0
 8002674:	f000 f915 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x2B);
 8002678:	212b      	movs	r1, #43	; 0x2b
 800267a:	20e0      	movs	r0, #224	; 0xe0
 800267c:	f000 f911 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x39);
 8002680:	2139      	movs	r1, #57	; 0x39
 8002682:	20e0      	movs	r0, #224	; 0xe0
 8002684:	f000 f90d 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x00);
 8002688:	2100      	movs	r1, #0
 800268a:	20e0      	movs	r0, #224	; 0xe0
 800268c:	f000 f909 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x01);
 8002690:	2101      	movs	r1, #1
 8002692:	20e0      	movs	r0, #224	; 0xe0
 8002694:	f000 f905 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x03);
 8002698:	2103      	movs	r1, #3
 800269a:	20e0      	movs	r0, #224	; 0xe0
 800269c:	f000 f901 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x10);
 80026a0:	2110      	movs	r1, #16
 80026a2:	20e0      	movs	r0, #224	; 0xe0
 80026a4:	f000 f8fd 	bl	80028a2 <st7735_WriteReg>
  /* gamma seq, 16 args, no delay */
  st7735_WriteReg(LCD_REG_225, 0x03);
 80026a8:	2103      	movs	r1, #3
 80026aa:	20e1      	movs	r0, #225	; 0xe1
 80026ac:	f000 f8f9 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x1d);
 80026b0:	211d      	movs	r1, #29
 80026b2:	20e1      	movs	r0, #225	; 0xe1
 80026b4:	f000 f8f5 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x07);
 80026b8:	2107      	movs	r1, #7
 80026ba:	20e1      	movs	r0, #225	; 0xe1
 80026bc:	f000 f8f1 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x06);
 80026c0:	2106      	movs	r1, #6
 80026c2:	20e1      	movs	r0, #225	; 0xe1
 80026c4:	f000 f8ed 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);
 80026c8:	212e      	movs	r1, #46	; 0x2e
 80026ca:	20e1      	movs	r0, #225	; 0xe1
 80026cc:	f000 f8e9 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2C);
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	20e1      	movs	r0, #225	; 0xe1
 80026d4:	f000 f8e5 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x29);
 80026d8:	2129      	movs	r1, #41	; 0x29
 80026da:	20e1      	movs	r0, #225	; 0xe1
 80026dc:	f000 f8e1 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2D);
 80026e0:	212d      	movs	r1, #45	; 0x2d
 80026e2:	20e1      	movs	r0, #225	; 0xe1
 80026e4:	f000 f8dd 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);
 80026e8:	212e      	movs	r1, #46	; 0x2e
 80026ea:	20e1      	movs	r0, #225	; 0xe1
 80026ec:	f000 f8d9 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);
 80026f0:	212e      	movs	r1, #46	; 0x2e
 80026f2:	20e1      	movs	r0, #225	; 0xe1
 80026f4:	f000 f8d5 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x37);
 80026f8:	2137      	movs	r1, #55	; 0x37
 80026fa:	20e1      	movs	r0, #225	; 0xe1
 80026fc:	f000 f8d1 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x3F);
 8002700:	213f      	movs	r1, #63	; 0x3f
 8002702:	20e1      	movs	r0, #225	; 0xe1
 8002704:	f000 f8cd 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x00);
 8002708:	2100      	movs	r1, #0
 800270a:	20e1      	movs	r0, #225	; 0xe1
 800270c:	f000 f8c9 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x00);
 8002710:	2100      	movs	r1, #0
 8002712:	20e1      	movs	r0, #225	; 0xe1
 8002714:	f000 f8c5 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x02);
 8002718:	2102      	movs	r1, #2
 800271a:	20e1      	movs	r0, #225	; 0xe1
 800271c:	f000 f8c1 	bl	80028a2 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x10);
 8002720:	2110      	movs	r1, #16
 8002722:	20e1      	movs	r0, #225	; 0xe1
 8002724:	f000 f8bd 	bl	80028a2 <st7735_WriteReg>
  /* Normal display on, no args, no delay */
  st7735_WriteReg(LCD_REG_19, 0x00);
 8002728:	2100      	movs	r1, #0
 800272a:	2013      	movs	r0, #19
 800272c:	f000 f8b9 	bl	80028a2 <st7735_WriteReg>
  /* Main screen turn on, no delay */
  st7735_WriteReg(LCD_REG_41, 0x00);
 8002730:	2100      	movs	r1, #0
 8002732:	2029      	movs	r0, #41	; 0x29
 8002734:	f000 f8b5 	bl	80028a2 <st7735_WriteReg>
  /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0xC0);
 8002738:	21c0      	movs	r1, #192	; 0xc0
 800273a:	2036      	movs	r0, #54	; 0x36
 800273c:	f000 f8b1 	bl	80028a2 <st7735_WriteReg>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <st7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOn(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_REG_19);
 8002752:	2013      	movs	r0, #19
 8002754:	f7fe fc26 	bl	8000fa4 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8002758:	200a      	movs	r0, #10
 800275a:	f7fe fca9 	bl	80010b0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_41);
 800275e:	2029      	movs	r0, #41	; 0x29
 8002760:	f7fe fc20 	bl	8000fa4 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8002764:	200a      	movs	r0, #10
 8002766:	f7fe fca3 	bl	80010b0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_54);
 800276a:	2036      	movs	r0, #54	; 0x36
 800276c:	f7fe fc1a 	bl	8000fa4 <LCD_IO_WriteReg>
  data = 0xC0;
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	2101      	movs	r1, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fc31 	bl	8000fe0 <LCD_IO_WriteMultipleData>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <st7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOff(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_REG_19);
 8002790:	2013      	movs	r0, #19
 8002792:	f7fe fc07 	bl	8000fa4 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8002796:	200a      	movs	r0, #10
 8002798:	f7fe fc8a 	bl	80010b0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_40);
 800279c:	2028      	movs	r0, #40	; 0x28
 800279e:	f7fe fc01 	bl	8000fa4 <LCD_IO_WriteReg>
  LCD_Delay(10);
 80027a2:	200a      	movs	r0, #10
 80027a4:	f7fe fc84 	bl	80010b0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_54);
 80027a8:	2036      	movs	r0, #54	; 0x36
 80027aa:	f7fe fbfb 	bl	8000fa4 <LCD_IO_WriteReg>
  data = 0xC0;
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	2101      	movs	r1, #1
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc12 	bl	8000fe0 <LCD_IO_WriteMultipleData>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <st7735_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void st7735_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	460a      	mov	r2, r1
 80027ce:	80fb      	strh	r3, [r7, #6]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80bb      	strh	r3, [r7, #4]
  uint8_t data = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteReg(LCD_REG_42);
 80027d8:	202a      	movs	r0, #42	; 0x2a
 80027da:	f7fe fbe3 	bl	8000fa4 <LCD_IO_WriteReg>
  data = (Xpos) >> 8;
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80027e8:	f107 030f 	add.w	r3, r7, #15
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fbf6 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Xpos) & 0xFF;
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80027fa:	f107 030f 	add.w	r3, r7, #15
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fbed 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteReg(LCD_REG_43); 
 8002806:	202b      	movs	r0, #43	; 0x2b
 8002808:	f7fe fbcc 	bl	8000fa4 <LCD_IO_WriteReg>
  data = (Ypos) >> 8;
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8002816:	f107 030f 	add.w	r3, r7, #15
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fbdf 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Ypos) & 0xFF;
 8002822:	88bb      	ldrh	r3, [r7, #4]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8002828:	f107 030f 	add.w	r3, r7, #15
 800282c:	2101      	movs	r1, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fbd6 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteReg(LCD_REG_44);
 8002834:	202c      	movs	r0, #44	; 0x2c
 8002836:	f7fe fbb5 	bl	8000fa4 <LCD_IO_WriteReg>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <st7735_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void st7735_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	80fb      	strh	r3, [r7, #6]
 800284c:	460b      	mov	r3, r1
 800284e:	80bb      	strh	r3, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	807b      	strh	r3, [r7, #2]
  uint8_t data = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
  if((Xpos >= ST7735_LCD_PIXEL_WIDTH) || (Ypos >= ST7735_LCD_PIXEL_HEIGHT)) 
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b81      	cmp	r3, #129	; 0x81
 800285c:	d81d      	bhi.n	800289a <st7735_WritePixel+0x58>
 800285e:	88bb      	ldrh	r3, [r7, #4]
 8002860:	2ba0      	cmp	r3, #160	; 0xa0
 8002862:	d81a      	bhi.n	800289a <st7735_WritePixel+0x58>
  {
    return;
  }
  
  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ffaa 	bl	80027c4 <st7735_SetCursor>
  
  data = RGBCode >> 8;
 8002870:	887b      	ldrh	r3, [r7, #2]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b29b      	uxth	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 800287a:	f107 030f 	add.w	r3, r7, #15
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fbad 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = RGBCode;
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 800288c:	f107 030f 	add.w	r3, r7, #15
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fba4 	bl	8000fe0 <LCD_IO_WriteMultipleData>
 8002898:	e000      	b.n	800289c <st7735_WritePixel+0x5a>
    return;
 800289a:	bf00      	nop
}  
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <st7735_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: value to write to the selected register.
  * @retval None
  */
void st7735_WriteReg(uint8_t LCDReg, uint8_t LCDRegValue)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	460a      	mov	r2, r1
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71bb      	strb	r3, [r7, #6]
  LCD_IO_WriteReg(LCDReg);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fb75 	bl	8000fa4 <LCD_IO_WriteReg>
  LCD_IO_WriteMultipleData(&LCDRegValue, 1);
 80028ba:	1dbb      	adds	r3, r7, #6
 80028bc:	2101      	movs	r1, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fb8e 	bl	8000fe0 <LCD_IO_WriteMultipleData>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <st7735_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void st7735_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4604      	mov	r4, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	80fb      	strh	r3, [r7, #6]
 80028de:	4603      	mov	r3, r0
 80028e0:	80bb      	strh	r3, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]
 80028e6:	4613      	mov	r3, r2
 80028e8:	803b      	strh	r3, [r7, #0]
  uint8_t data = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  LCD_IO_WriteReg(LCD_REG_42);
 80028ee:	202a      	movs	r0, #42	; 0x2a
 80028f0:	f7fe fb58 	bl	8000fa4 <LCD_IO_WriteReg>
  data = (Xpos) >> 8;
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80028fe:	f107 030f 	add.w	r3, r7, #15
 8002902:	2101      	movs	r1, #1
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fb6b 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Xpos) & 0xFF;
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8002910:	f107 030f 	add.w	r3, r7, #15
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fb62 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Xpos + Width - 1) >> 8;
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	4413      	add	r3, r2
 8002922:	3b01      	subs	r3, #1
 8002924:	121b      	asrs	r3, r3, #8
 8002926:	b2db      	uxtb	r3, r3
 8002928:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 800292a:	f107 030f 	add.w	r3, r7, #15
 800292e:	2101      	movs	r1, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fb55 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Xpos + Width - 1) & 0xFF;
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4413      	add	r3, r2
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8002948:	f107 030f 	add.w	r3, r7, #15
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fb46 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  LCD_IO_WriteReg(LCD_REG_43);
 8002954:	202b      	movs	r0, #43	; 0x2b
 8002956:	f7fe fb25 	bl	8000fa4 <LCD_IO_WriteReg>
  data = (Ypos) >> 8;
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	b29b      	uxth	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8002964:	f107 030f 	add.w	r3, r7, #15
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fb38 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Ypos) & 0xFF;
 8002970:	88bb      	ldrh	r3, [r7, #4]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8002976:	f107 030f 	add.w	r3, r7, #15
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fb2f 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Ypos + Height - 1) >> 8;
 8002982:	88ba      	ldrh	r2, [r7, #4]
 8002984:	883b      	ldrh	r3, [r7, #0]
 8002986:	4413      	add	r3, r2
 8002988:	3b01      	subs	r3, #1
 800298a:	121b      	asrs	r3, r3, #8
 800298c:	b2db      	uxtb	r3, r3
 800298e:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8002990:	f107 030f 	add.w	r3, r7, #15
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fb22 	bl	8000fe0 <LCD_IO_WriteMultipleData>
  data = (Ypos + Height - 1) & 0xFF;
 800299c:	88bb      	ldrh	r3, [r7, #4]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	883b      	ldrh	r3, [r7, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80029ae:	f107 030f 	add.w	r3, r7, #15
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fb13 	bl	8000fe0 <LCD_IO_WriteMultipleData>
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}
	...

080029c4 <st7735_DrawHLine>:
  * @param  Ypos: specifies the Y position.
  * @param  Length: specifies the line length.  
  * @retval None
  */
void st7735_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4604      	mov	r4, r0
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4623      	mov	r3, r4
 80029d4:	80fb      	strh	r3, [r7, #6]
 80029d6:	4603      	mov	r3, r0
 80029d8:	80bb      	strh	r3, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	807b      	strh	r3, [r7, #2]
 80029de:	4613      	mov	r3, r2
 80029e0:	803b      	strh	r3, [r7, #0]
  uint8_t counter = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  
  if(Xpos + Length > ST7735_LCD_PIXEL_WIDTH) return;
 80029e6:	88ba      	ldrh	r2, [r7, #4]
 80029e8:	883b      	ldrh	r3, [r7, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	2b82      	cmp	r3, #130	; 0x82
 80029ee:	dc1c      	bgt.n	8002a2a <st7735_DrawHLine+0x66>
  
  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);
 80029f0:	887a      	ldrh	r2, [r7, #2]
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fee4 	bl	80027c4 <st7735_SetCursor>
  
  for(counter = 0; counter < Length; counter++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e007      	b.n	8002a12 <st7735_DrawHLine+0x4e>
  {
    ArrayRGB[counter] = RGBCode;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	490b      	ldr	r1, [pc, #44]	; (8002a34 <st7735_DrawHLine+0x70>)
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	883a      	ldrh	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d8f2      	bhi.n	8002a02 <st7735_DrawHLine+0x3e>
  }
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8002a1c:	883b      	ldrh	r3, [r7, #0]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4619      	mov	r1, r3
 8002a22:	4804      	ldr	r0, [pc, #16]	; (8002a34 <st7735_DrawHLine+0x70>)
 8002a24:	f7fe fadc 	bl	8000fe0 <LCD_IO_WriteMultipleData>
 8002a28:	e000      	b.n	8002a2c <st7735_DrawHLine+0x68>
  if(Xpos + Length > ST7735_LCD_PIXEL_WIDTH) return;
 8002a2a:	bf00      	nop
}
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000354 	.word	0x20000354

08002a38 <st7735_DrawVLine>:
  * @param  Ypos: specifies the Y position.
  * @param  Length: specifies the line length.  
  * @retval None
  */
void st7735_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4623      	mov	r3, r4
 8002a48:	80fb      	strh	r3, [r7, #6]
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80bb      	strh	r3, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]
 8002a52:	4613      	mov	r3, r2
 8002a54:	803b      	strh	r3, [r7, #0]
  uint8_t counter = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  
  if(Ypos + Length > ST7735_LCD_PIXEL_HEIGHT) return;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	883b      	ldrh	r3, [r7, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	2ba1      	cmp	r3, #161	; 0xa1
 8002a62:	dc15      	bgt.n	8002a90 <st7735_DrawVLine+0x58>
  for(counter = 0; counter < Length; counter++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e00c      	b.n	8002a84 <st7735_DrawVLine+0x4c>
  {
    st7735_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	4413      	add	r3, r2
 8002a72:	b299      	uxth	r1, r3
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fee2 	bl	8002842 <st7735_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	883a      	ldrh	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d8ed      	bhi.n	8002a6a <st7735_DrawVLine+0x32>
 8002a8e:	e000      	b.n	8002a92 <st7735_DrawVLine+0x5a>
  if(Ypos + Length > ST7735_LCD_PIXEL_HEIGHT) return;
 8002a90:	bf00      	nop
  }   
}
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd90      	pop	{r4, r7, pc}

08002a98 <st7735_GetLcdPixelWidth>:
  * @brief  Gets the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t st7735_GetLcdPixelWidth(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ST7735_LCD_PIXEL_WIDTH;
 8002a9c:	2382      	movs	r3, #130	; 0x82
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <st7735_GetLcdPixelHeight>:
  * @brief  Gets the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t st7735_GetLcdPixelHeight(void)
{                          
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return ST7735_LCD_PIXEL_HEIGHT;
 8002aac:	23a1      	movs	r3, #161	; 0xa1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <st7735_DrawBitmap>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  pbmp: pointer to the Bmp picture
  * @retval None
  */
void st7735_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	603a      	str	r2, [r7, #0]
 8002ac2:	80fb      	strh	r3, [r7, #6]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	3304      	adds	r3, #4
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	330a      	adds	r3, #10
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	041b      	lsls	r3, r3, #16
 8002b00:	461a      	mov	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	085b      	lsrs	r3, r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	603b      	str	r3, [r7, #0]
  
  /* Set GRAM write direction and BGR = 0 */
  /* Memory access control: MY = 0, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0x40);
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	2036      	movs	r0, #54	; 0x36
 8002b1e:	f7ff fec0 	bl	80028a2 <st7735_WriteReg>

  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);  
 8002b22:	88ba      	ldrh	r2, [r7, #4]
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe4b 	bl	80027c4 <st7735_SetCursor>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4619      	mov	r1, r3
 8002b34:	6838      	ldr	r0, [r7, #0]
 8002b36:	f7fe fa53 	bl	8000fe0 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 0 */
  /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0xC0);
 8002b3a:	21c0      	movs	r1, #192	; 0xc0
 8002b3c:	2036      	movs	r0, #54	; 0x36
 8002b3e:	f7ff feb0 	bl	80028a2 <st7735_WriteReg>
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	71fb      	strb	r3, [r7, #7]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <BSP_LCD_Init+0x54>)
 8002b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b5c:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <BSP_LCD_Init+0x54>)
 8002b60:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <BSP_LCD_Init+0x58>)
 8002b62:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <BSP_LCD_Init+0x54>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

  lcd_drv = &st7735_drv;
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <BSP_LCD_Init+0x5c>)
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <BSP_LCD_Init+0x60>)
 8002b6e:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  lcd_drv->Init();
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <BSP_LCD_Init+0x5c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4798      	blx	r3

  /* Clear the LCD screen */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002b78:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b7c:	f000 f85e 	bl	8002c3c <BSP_LCD_Clear>

  SetDisplayWindow(WAVESHARE_1c8_LCD_X_MIN, WAVESHARE_1c8_LCD_Y_MIN,
 8002b80:	23a1      	movs	r3, #161	; 0xa1
 8002b82:	2282      	movs	r2, #130	; 0x82
 8002b84:	2101      	movs	r1, #1
 8002b86:	2002      	movs	r0, #2
 8002b88:	f000 fc62 	bl	8003450 <SetDisplayWindow>
		  ST7735_LCD_PIXEL_WIDTH, ST7735_LCD_PIXEL_HEIGHT);

  /* Initialize the font */
  BSP_LCD_SetFont(&Font12);
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <BSP_LCD_Init+0x64>)
 8002b8e:	f000 f839 	bl	8002c04 <BSP_LCD_SetFont>

  ret = LCD_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	71fb      	strb	r3, [r7, #7]

  return ret;
 8002b96:	79fb      	ldrb	r3, [r7, #7]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000b60 	.word	0x20000b60
 8002ba4:	20000014 	.word	0x20000014
 8002ba8:	200005d4 	.word	0x200005d4
 8002bac:	20000024 	.word	0x20000024
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <BSP_LCD_GetXSize+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	4798      	blx	r3
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200005d4 	.word	0x200005d4

08002bcc <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <BSP_LCD_GetYSize+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4798      	blx	r3
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200005d4 	.word	0x200005d4

08002be4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <BSP_LCD_SetTextColor+0x1c>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	20000b60 	.word	0x20000b60

08002c04 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: pointer to the font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <BSP_LCD_SetFont+0x1c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6093      	str	r3, [r2, #8]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000b60 	.word	0x20000b60

08002c24 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <BSP_LCD_GetFont+0x14>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000b60 	.word	0x20000b60

08002c3c <BSP_LCD_Clear>:
  * @brief  Clears the whole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  uint32_t color_backup = DrawProp.TextColor;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <BSP_LCD_Clear+0x64>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <BSP_LCD_Clear+0x64>)
 8002c54:	6013      	str	r3, [r2, #0]

  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e00d      	b.n	8002c78 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b29c      	uxth	r4, r3
 8002c60:	f7ff ffa8 	bl	8002bb4 <BSP_LCD_GetXSize>
 8002c64:	4603      	mov	r3, r0
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f000 f8fd 	bl	8002e6c <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	f7ff ffa8 	bl	8002bcc <BSP_LCD_GetYSize>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d3eb      	bcc.n	8002c5c <BSP_LCD_Clear+0x20>
  }
  DrawProp.TextColor = color_backup;
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <BSP_LCD_Clear+0x64>)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <BSP_LCD_Clear+0x64>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ffa7 	bl	8002be4 <BSP_LCD_SetTextColor>
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000b60 	.word	0x20000b60

08002ca4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	80bb      	strh	r3, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos + WAVESHARE_1c8_LCD_X_MIN,
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	3302      	adds	r3, #2
 8002cba:	b298      	uxth	r0, r3
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b29c      	uxth	r4, r3
		  Ypos + WAVESHARE_1c8_LCD_Y_MIN,
		  &DrawProp.pFont->table[(Ascii-' ') *\
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <BSP_LCD_DisplayChar+0x58>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002ccc:	490b      	ldr	r1, [pc, #44]	; (8002cfc <BSP_LCD_DisplayChar+0x58>)
 8002cce:	6889      	ldr	r1, [r1, #8]
 8002cd0:	88c9      	ldrh	r1, [r1, #6]
		  &DrawProp.pFont->table[(Ascii-' ') *\
 8002cd2:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <BSP_LCD_DisplayChar+0x58>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	889b      	ldrh	r3, [r3, #4]
 8002cdc:	3307      	adds	r3, #7
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da00      	bge.n	8002ce4 <BSP_LCD_DisplayChar+0x40>
 8002ce2:	3307      	adds	r3, #7
 8002ce4:	10db      	asrs	r3, r3, #3
 8002ce6:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos + WAVESHARE_1c8_LCD_X_MIN,
 8002cea:	4413      	add	r3, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4621      	mov	r1, r4
 8002cf0:	f000 fabc 	bl	800326c <DrawChar>
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	20000b60 	.word	0x20000b60

08002d00 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60ba      	str	r2, [r7, #8]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	81fb      	strh	r3, [r7, #14]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	81bb      	strh	r3, [r7, #12]
 8002d12:	4613      	mov	r3, r2
 8002d14:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002d16:	2301      	movs	r3, #1
 8002d18:	83fb      	strh	r3, [r7, #30]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8002d2a:	e002      	b.n	8002d32 <BSP_LCD_DisplayStringAt+0x32>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	617a      	str	r2, [r7, #20]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f6      	bne.n	8002d2c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002d3e:	f7ff ff39 	bl	8002bb4 <BSP_LCD_GetXSize>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <BSP_LCD_DisplayStringAt+0x100>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	889b      	ldrh	r3, [r3, #4]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d014      	beq.n	8002d80 <BSP_LCD_DisplayStringAt+0x80>
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	dc23      	bgt.n	8002da2 <BSP_LCD_DisplayStringAt+0xa2>
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d002      	beq.n	8002d64 <BSP_LCD_DisplayStringAt+0x64>
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d011      	beq.n	8002d86 <BSP_LCD_DisplayStringAt+0x86>
 8002d62:	e01e      	b.n	8002da2 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <BSP_LCD_DisplayStringAt+0x100>)
 8002d6c:	6892      	ldr	r2, [r2, #8]
 8002d6e:	8892      	ldrh	r2, [r2, #4]
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	89fb      	ldrh	r3, [r7, #14]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	83fb      	strh	r3, [r7, #30]
      break;
 8002d7e:	e013      	b.n	8002da8 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002d80:	89fb      	ldrh	r3, [r7, #14]
 8002d82:	83fb      	strh	r3, [r7, #30]
      break;
 8002d84:	e010      	b.n	8002da8 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <BSP_LCD_DisplayStringAt+0x100>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	889b      	ldrh	r3, [r3, #4]
 8002d94:	fb12 f303 	smulbb	r3, r2, r3
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	89fb      	ldrh	r3, [r7, #14]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	83fb      	strh	r3, [r7, #30]
      break;
 8002da0:	e002      	b.n	8002da8 <BSP_LCD_DisplayStringAt+0xa8>
    }
  default:
    {
      refcolumn = Xpos;
 8002da2:	89fb      	ldrh	r3, [r7, #14]
 8002da4:	83fb      	strh	r3, [r7, #30]
      break;
 8002da6:	bf00      	nop
    }
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002da8:	e012      	b.n	8002dd0 <BSP_LCD_DisplayStringAt+0xd0>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	89b9      	ldrh	r1, [r7, #12]
 8002db0:	8bfb      	ldrh	r3, [r7, #30]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ff76 	bl	8002ca4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <BSP_LCD_DisplayStringAt+0x100>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	889a      	ldrh	r2, [r3, #4]
 8002dbe:	8bfb      	ldrh	r3, [r7, #30]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
    i++;
 8002dca:	8bbb      	ldrh	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00f      	beq.n	8002df8 <BSP_LCD_DisplayStringAt+0xf8>
 8002dd8:	f7ff feec 	bl	8002bb4 <BSP_LCD_GetXSize>
 8002ddc:	4601      	mov	r1, r0
 8002dde:	8bbb      	ldrh	r3, [r7, #28]
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <BSP_LCD_DisplayStringAt+0x100>)
 8002de2:	6892      	ldr	r2, [r2, #8]
 8002de4:	8892      	ldrh	r2, [r2, #4]
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	1acb      	subs	r3, r1, r3
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <BSP_LCD_DisplayStringAt+0x100>)
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	8892      	ldrh	r2, [r2, #4]
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d2d8      	bcs.n	8002daa <BSP_LCD_DisplayStringAt+0xaa>
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3720      	adds	r7, #32
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000b60 	.word	0x20000b60

08002e04 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0...5: if the Current fonts is Font24
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002e10:	f7ff ff08 	bl	8002c24 <BSP_LCD_GetFont>
 8002e14:	4603      	mov	r3, r0
 8002e16:	88db      	ldrh	r3, [r3, #6]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	fb12 f303 	smulbb	r3, r2, r3
 8002e1e:	b299      	uxth	r1, r3
 8002e20:	2303      	movs	r3, #3
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7ff ff6b 	bl	8002d00 <BSP_LCD_DisplayStringAt>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	80fb      	strh	r3, [r7, #6]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	80bb      	strh	r3, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <BSP_LCD_DrawPixel+0x34>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <BSP_LCD_DrawPixel+0x34>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	88b9      	ldrh	r1, [r7, #4]
 8002e5a:	88f8      	ldrh	r0, [r7, #6]
 8002e5c:	4798      	blx	r3
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200005d4 	.word	0x200005d4

08002e6c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
 8002e76:	460b      	mov	r3, r1
 8002e78:	80bb      	strh	r3, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]

  if(lcd_drv->DrawHLine != NULL)
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <BSP_LCD_DrawHLine+0x6c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <BSP_LCD_DrawHLine+0x6c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a1c      	ldr	r4, [r3, #32]
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <BSP_LCD_DrawHLine+0x70>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	b298      	uxth	r0, r3
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	88ba      	ldrh	r2, [r7, #4]
 8002e9c:	88f9      	ldrh	r1, [r7, #6]
 8002e9e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002ea0:	e015      	b.n	8002ece <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e00e      	b.n	8002ec6 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	4413      	add	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <BSP_LCD_DrawHLine+0x70>)
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	88b9      	ldrh	r1, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ffba 	bl	8002e34 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d3ec      	bcc.n	8002ea8 <BSP_LCD_DrawHLine+0x3c>
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200005d4 	.word	0x200005d4
 8002edc:	20000b60 	.word	0x20000b60

08002ee0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
 8002eea:	460b      	mov	r3, r1
 8002eec:	80bb      	strh	r3, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */

  D = 3 - (Radius << 1);
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	f1c3 0303 	rsb	r3, r3, #3
 8002efa:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8002f04:	e09a      	b.n	800303c <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	b298      	uxth	r0, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	88ba      	ldrh	r2, [r7, #4]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7ff ff87 	bl	8002e34 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	b298      	uxth	r0, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	88ba      	ldrh	r2, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4a45      	ldr	r2, [pc, #276]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7ff ff77 	bl	8002e34 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b298      	uxth	r0, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	88ba      	ldrh	r2, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4a3d      	ldr	r2, [pc, #244]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7ff ff67 	bl	8002e34 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	b298      	uxth	r0, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	88ba      	ldrh	r2, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4a35      	ldr	r2, [pc, #212]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7ff ff57 	bl	8002e34 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b298      	uxth	r0, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	88bb      	ldrh	r3, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	b292      	uxth	r2, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7ff ff47 	bl	8002e34 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	b298      	uxth	r0, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	88bb      	ldrh	r3, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4a25      	ldr	r2, [pc, #148]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7ff ff37 	bl	8002e34 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	4413      	add	r3, r2
 8002fce:	b298      	uxth	r0, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	88bb      	ldrh	r3, [r7, #4]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7ff ff27 	bl	8002e34 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	b298      	uxth	r0, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	88bb      	ldrh	r3, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <BSP_LCD_DrawCircle+0x170>)
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	b292      	uxth	r2, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f7ff ff17 	bl	8002e34 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003006:	4813      	ldr	r0, [pc, #76]	; (8003054 <BSP_LCD_DrawCircle+0x174>)
 8003008:	f7ff fdfc 	bl	8002c04 <BSP_LCD_SetFont>

    if (D < 0)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da06      	bge.n	8003020 <BSP_LCD_DrawCircle+0x140>
    {
      D += (CurX << 2) + 6;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4413      	add	r3, r2
 800301a:	3306      	adds	r3, #6
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e00a      	b.n	8003036 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	009a      	lsls	r2, r3, #2
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4413      	add	r3, r2
 800302c:	330a      	adds	r3, #10
 800302e:	617b      	str	r3, [r7, #20]
      CurY--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3b01      	subs	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	3301      	adds	r3, #1
 800303a:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	f67f af60 	bls.w	8002f06 <BSP_LCD_DrawCircle+0x26>
  }
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000b60 	.word	0x20000b60
 8003054:	2000001c 	.word	0x2000001c

08003058 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	603a      	str	r2, [r7, #0]
 8003062:	80fb      	strh	r3, [r7, #6]
 8003064:	460b      	mov	r3, r1
 8003066:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	3312      	adds	r3, #18
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	3313      	adds	r3, #19
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	441a      	add	r2, r3
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	3314      	adds	r3, #20
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	441a      	add	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	3315      	adds	r3, #21
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	4413      	add	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	3316      	adds	r3, #22
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	3317      	adds	r3, #23
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	441a      	add	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	3318      	adds	r3, #24
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	441a      	add	r2, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	3319      	adds	r3, #25
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	4413      	add	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  if(lcd_drv == &st7735_drv)
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <BSP_LCD_DrawBitmap+0xd4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <BSP_LCD_DrawBitmap+0xd8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10a      	bne.n	80030e0 <BSP_LCD_DrawBitmap+0x88>
  {
    Ypos = BSP_LCD_GetYSize() - Ypos - height;
 80030ca:	f7ff fd7f 	bl	8002bcc <BSP_LCD_GetYSize>
 80030ce:	4603      	mov	r3, r0
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	88bb      	ldrh	r3, [r7, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	80bb      	strh	r3, [r7, #4]
  }

  SetDisplayWindow(Xpos, Ypos, width, height);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	88b9      	ldrh	r1, [r7, #4]
 80030ea:	88f8      	ldrh	r0, [r7, #6]
 80030ec:	f000 f9b0 	bl	8003450 <SetDisplayWindow>

  if(lcd_drv->DrawBitmap != NULL)
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <BSP_LCD_DrawBitmap+0xd4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d006      	beq.n	8003108 <BSP_LCD_DrawBitmap+0xb0>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <BSP_LCD_DrawBitmap+0xd4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	88b9      	ldrh	r1, [r7, #4]
 8003102:	88f8      	ldrh	r0, [r7, #6]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4798      	blx	r3
  }
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003108:	f7ff fd54 	bl	8002bb4 <BSP_LCD_GetXSize>
 800310c:	4603      	mov	r3, r0
 800310e:	b29c      	uxth	r4, r3
 8003110:	f7ff fd5c 	bl	8002bcc <BSP_LCD_GetYSize>
 8003114:	4603      	mov	r3, r0
 8003116:	b29b      	uxth	r3, r3
 8003118:	4622      	mov	r2, r4
 800311a:	2100      	movs	r1, #0
 800311c:	2000      	movs	r0, #0
 800311e:	f000 f997 	bl	8003450 <SetDisplayWindow>
}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	200005d4 	.word	0x200005d4
 8003130:	20000024 	.word	0x20000024

08003134 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	80fb      	strh	r3, [r7, #6]
 800313e:	460b      	mov	r3, r1
 8003140:	80bb      	strh	r3, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */

  D = 3 - (Radius << 1);
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	f1c3 0303 	rsb	r3, r3, #3
 800314e:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003158:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <BSP_LCD_FillCircle+0x120>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fd40 	bl	8002be4 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8003164:	e061      	b.n	800322a <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d021      	beq.n	80031b0 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	b29b      	uxth	r3, r3
 8003170:	88fa      	ldrh	r2, [r7, #6]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b298      	uxth	r0, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	b29a      	uxth	r2, r3
 800317a:	88bb      	ldrh	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	b299      	uxth	r1, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	b29b      	uxth	r3, r3
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	f7ff fe6f 	bl	8002e6c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	b29b      	uxth	r3, r3
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	b298      	uxth	r0, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	b29b      	uxth	r3, r3
 800319c:	88ba      	ldrh	r2, [r7, #4]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	b299      	uxth	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	f7ff fe5e 	bl	8002e6c <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d021      	beq.n	80031fa <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	b298      	uxth	r0, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	88ba      	ldrh	r2, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	b299      	uxth	r1, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7ff fe4a 	bl	8002e6c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	b298      	uxth	r0, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	88bb      	ldrh	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	b299      	uxth	r1, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	f7ff fe39 	bl	8002e6c <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	da06      	bge.n	800320e <BSP_LCD_FillCircle+0xda>
    {
      D += (CurX << 2) + 6;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	009a      	lsls	r2, r3, #2
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4413      	add	r3, r2
 8003208:	3306      	adds	r3, #6
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e00a      	b.n	8003224 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	009a      	lsls	r2, r3, #2
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4413      	add	r3, r2
 800321a:	330a      	adds	r3, #10
 800321c:	617b      	str	r3, [r7, #20]
      CurY--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b01      	subs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3301      	adds	r3, #1
 8003228:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	429a      	cmp	r2, r3
 8003230:	d999      	bls.n	8003166 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <BSP_LCD_FillCircle+0x120>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fcd3 	bl	8002be4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	88b9      	ldrh	r1, [r7, #4]
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fe4b 	bl	8002ee0 <BSP_LCD_DrawCircle>
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000b60 	.word	0x20000b60

08003258 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 800325c:	4b02      	ldr	r3, [pc, #8]	; (8003268 <BSP_LCD_DisplayOn+0x10>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4798      	blx	r3
}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200005d4 	.word	0x200005d4

0800326c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	603a      	str	r2, [r7, #0]
 8003276:	80fb      	strh	r3, [r7, #6]
 8003278:	460b      	mov	r3, r1
 800327a:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	82fb      	strh	r3, [r7, #22]
 800328c:	2300      	movs	r3, #0
 800328e:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]

  height = DrawProp.pFont->Height;
 800329c:	4b63      	ldr	r3, [pc, #396]	; (800342c <DrawChar+0x1c0>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	88db      	ldrh	r3, [r3, #6]
 80032a2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 80032a4:	4b61      	ldr	r3, [pc, #388]	; (800342c <DrawChar+0x1c0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	889b      	ldrh	r3, [r3, #4]
 80032aa:	82bb      	strh	r3, [r7, #20]

  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 80032ac:	8afa      	ldrh	r2, [r7, #22]
 80032ae:	8abb      	ldrh	r3, [r7, #20]
 80032b0:	fb12 f303 	smulbb	r3, r2, r3
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	331b      	adds	r3, #27
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4a5d      	ldr	r2, [pc, #372]	; (8003430 <DrawChar+0x1c4>)
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	b29b      	uxth	r3, r3
 80032c0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80032c2:	8afb      	ldrh	r3, [r7, #22]
 80032c4:	8aba      	ldrh	r2, [r7, #20]
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	331b      	adds	r3, #27
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	141a      	asrs	r2, r3, #16
 80032d0:	4b58      	ldr	r3, [pc, #352]	; (8003434 <DrawChar+0x1c8>)
 80032d2:	b292      	uxth	r2, r2
 80032d4:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <DrawChar+0x1cc>)
 80032d8:	2236      	movs	r2, #54	; 0x36
 80032da:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 80032dc:	4a57      	ldr	r2, [pc, #348]	; (800343c <DrawChar+0x1d0>)
 80032de:	8abb      	ldrh	r3, [r7, #20]
 80032e0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 80032e2:	8abb      	ldrh	r3, [r7, #20]
 80032e4:	141a      	asrs	r2, r3, #16
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <DrawChar+0x1d4>)
 80032e8:	b292      	uxth	r2, r2
 80032ea:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 80032ec:	4a55      	ldr	r2, [pc, #340]	; (8003444 <DrawChar+0x1d8>)
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 80032f2:	8afb      	ldrh	r3, [r7, #22]
 80032f4:	141a      	asrs	r2, r3, #16
 80032f6:	4b54      	ldr	r3, [pc, #336]	; (8003448 <DrawChar+0x1dc>)
 80032f8:	b292      	uxth	r2, r2
 80032fa:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) - width ;
 80032fc:	8abb      	ldrh	r3, [r7, #20]
 80032fe:	3307      	adds	r3, #7
 8003300:	2b00      	cmp	r3, #0
 8003302:	da00      	bge.n	8003306 <DrawChar+0x9a>
 8003304:	3307      	adds	r3, #7
 8003306:	10db      	asrs	r3, r3, #3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	b2da      	uxtb	r2, r3
 800330e:	8abb      	ldrh	r3, [r7, #20]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	74fb      	strb	r3, [r7, #19]

  for(counterh = 0; counterh < height; counterh++)
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	e078      	b.n	800340e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 800331c:	8abb      	ldrh	r3, [r7, #20]
 800331e:	3307      	adds	r3, #7
 8003320:	2b00      	cmp	r3, #0
 8003322:	da00      	bge.n	8003326 <DrawChar+0xba>
 8003324:	3307      	adds	r3, #7
 8003326:	10db      	asrs	r3, r3, #3
 8003328:	461a      	mov	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	fb03 f302 	mul.w	r3, r3, r2
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	4413      	add	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

    if(((width + 7)/8) == 3)
 8003336:	8abb      	ldrh	r3, [r7, #20]
 8003338:	3b11      	subs	r3, #17
 800333a:	2b07      	cmp	r3, #7
 800333c:	d80c      	bhi.n	8003358 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	041a      	lsls	r2, r3, #16
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3301      	adds	r3, #1
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	4313      	orrs	r3, r2
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	3202      	adds	r2, #2
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8003358:	8abb      	ldrh	r3, [r7, #20]
 800335a:	3b09      	subs	r3, #9
 800335c:	2b07      	cmp	r3, #7
 800335e:	d807      	bhi.n	8003370 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	3201      	adds	r2, #1
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	4313      	orrs	r3, r2
 800336e:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 1)
 8003370:	8abb      	ldrh	r3, [r7, #20]
 8003372:	3b01      	subs	r3, #1
 8003374:	2b07      	cmp	r3, #7
 8003376:	d802      	bhi.n	800337e <DrawChar+0x112>
    {
      line =  pchar[0];
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	61fb      	str	r3, [r7, #28]
    }

    for (counterw = 0; counterw < width; counterw++)
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
 8003382:	e03d      	b.n	8003400 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8003384:	8afa      	ldrh	r2, [r7, #22]
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	8aba      	ldrh	r2, [r7, #20]
 800338e:	fb02 f203 	mul.w	r2, r2, r3
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	4413      	add	r3, r2
 8003396:	331b      	adds	r3, #27
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
      if((line & (1 << (width- counterw + offset- 1))) != 0)
 800339c:	8aba      	ldrh	r2, [r7, #20]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	1ad2      	subs	r2, r2, r3
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	4413      	add	r3, r2
 80033a6:	3b01      	subs	r3, #1
 80033a8:	2201      	movs	r2, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 80033b8:	4b1c      	ldr	r3, [pc, #112]	; (800342c <DrawChar+0x1c0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	b2d9      	uxtb	r1, r3
 80033be:	4a23      	ldr	r2, [pc, #140]	; (800344c <DrawChar+0x1e0>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	4413      	add	r3, r2
 80033c4:	460a      	mov	r2, r1
 80033c6:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80033c8:	4b18      	ldr	r3, [pc, #96]	; (800342c <DrawChar+0x1c0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0a1a      	lsrs	r2, r3, #8
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3301      	adds	r3, #1
 80033d2:	b2d1      	uxtb	r1, r2
 80033d4:	4a1d      	ldr	r2, [pc, #116]	; (800344c <DrawChar+0x1e0>)
 80033d6:	54d1      	strb	r1, [r2, r3]
 80033d8:	e00f      	b.n	80033fa <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <DrawChar+0x1c0>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	b2d9      	uxtb	r1, r3
 80033e0:	4a1a      	ldr	r2, [pc, #104]	; (800344c <DrawChar+0x1e0>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	460a      	mov	r2, r1
 80033e8:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <DrawChar+0x1c0>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0a1a      	lsrs	r2, r3, #8
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3301      	adds	r3, #1
 80033f4:	b2d1      	uxtb	r1, r2
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <DrawChar+0x1e0>)
 80033f8:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	3301      	adds	r3, #1
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	8abb      	ldrh	r3, [r7, #20]
 8003402:	6a3a      	ldr	r2, [r7, #32]
 8003404:	429a      	cmp	r2, r3
 8003406:	d3bd      	bcc.n	8003384 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	3301      	adds	r3, #1
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	429a      	cmp	r2, r3
 8003414:	d382      	bcc.n	800331c <DrawChar+0xb0>
      }
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8003416:	88b9      	ldrh	r1, [r7, #4]
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	4a0c      	ldr	r2, [pc, #48]	; (800344c <DrawChar+0x1e0>)
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fe1b 	bl	8003058 <BSP_LCD_DrawBitmap>
}
 8003422:	bf00      	nop
 8003424:	3728      	adds	r7, #40	; 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000b60 	.word	0x20000b60
 8003430:	200005da 	.word	0x200005da
 8003434:	200005dc 	.word	0x200005dc
 8003438:	200005e2 	.word	0x200005e2
 800343c:	200005ea 	.word	0x200005ea
 8003440:	200005ec 	.word	0x200005ec
 8003444:	200005ee 	.word	0x200005ee
 8003448:	200005f0 	.word	0x200005f0
 800344c:	200005d8 	.word	0x200005d8

08003450 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4623      	mov	r3, r4
 8003460:	80fb      	strh	r3, [r7, #6]
 8003462:	4603      	mov	r3, r0
 8003464:	80bb      	strh	r3, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	807b      	strh	r3, [r7, #2]
 800346a:	4613      	mov	r3, r2
 800346c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <SetDisplayWindow+0x40>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <SetDisplayWindow+0x40>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69dc      	ldr	r4, [r3, #28]
 800347e:	883b      	ldrh	r3, [r7, #0]
 8003480:	887a      	ldrh	r2, [r7, #2]
 8003482:	88b9      	ldrh	r1, [r7, #4]
 8003484:	88f8      	ldrh	r0, [r7, #6]
 8003486:	47a0      	blx	r4
  }
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bd90      	pop	{r4, r7, pc}
 8003490:	200005d4 	.word	0x200005d4

08003494 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_Init+0x3c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_Init+0x3c>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034aa:	2003      	movs	r0, #3
 80034ac:	f000 f962 	bl	8003774 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034b0:	2000      	movs	r0, #0
 80034b2:	f000 f80f 	bl	80034d4 <HAL_InitTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	e001      	b.n	80034c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034c2:	f7fe fbab 	bl	8001c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034c6:	79fb      	ldrb	r3, [r7, #7]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40022000 	.word	0x40022000

080034d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_InitTick+0x6c>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d023      	beq.n	8003530 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034e8:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_InitTick+0x70>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_InitTick+0x6c>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4619      	mov	r1, r3
 80034f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f96d 	bl	80037de <HAL_SYSTICK_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0f      	cmp	r3, #15
 800350e:	d809      	bhi.n	8003524 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003510:	2200      	movs	r2, #0
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f000 f937 	bl	800378a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_InitTick+0x74>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e007      	b.n	8003534 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e004      	b.n	8003534 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e001      	b.n	8003534 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000060 	.word	0x20000060
 8003544:	20000008 	.word	0x20000008
 8003548:	2000005c 	.word	0x2000005c

0800354c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x20>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_IncTick+0x24>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4413      	add	r3, r2
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_IncTick+0x24>)
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000060 	.word	0x20000060
 8003570:	20000b6c 	.word	0x20000b6c

08003574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_GetTick+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000b6c 	.word	0x20000b6c

0800358c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff ffee 	bl	8003574 <HAL_GetTick>
 8003598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d005      	beq.n	80035b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_Delay+0x44>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035b2:	bf00      	nop
 80035b4:	f7ff ffde 	bl	8003574 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d8f7      	bhi.n	80035b4 <HAL_Delay+0x28>
  {
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000060 	.word	0x20000060

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4907      	ldr	r1, [pc, #28]	; (8003670 <__NVIC_EnableIRQ+0x38>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000e100 	.word	0xe000e100

08003674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	6039      	str	r1, [r7, #0]
 800367e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db0a      	blt.n	800369e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	490c      	ldr	r1, [pc, #48]	; (80036c0 <__NVIC_SetPriority+0x4c>)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	440b      	add	r3, r1
 8003698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800369c:	e00a      	b.n	80036b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4908      	ldr	r1, [pc, #32]	; (80036c4 <__NVIC_SetPriority+0x50>)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3b04      	subs	r3, #4
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	761a      	strb	r2, [r3, #24]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	bf28      	it	cs
 80036e6:	2304      	movcs	r3, #4
 80036e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d902      	bls.n	80036f8 <NVIC_EncodePriority+0x30>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3b03      	subs	r3, #3
 80036f6:	e000      	b.n	80036fa <NVIC_EncodePriority+0x32>
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	401a      	ands	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003710:	f04f 31ff 	mov.w	r1, #4294967295
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43d9      	mvns	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	4313      	orrs	r3, r2
         );
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003740:	d301      	bcc.n	8003746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003742:	2301      	movs	r3, #1
 8003744:	e00f      	b.n	8003766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <SysTick_Config+0x40>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374e:	210f      	movs	r1, #15
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	f7ff ff8e 	bl	8003674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <SysTick_Config+0x40>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <SysTick_Config+0x40>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	e000e010 	.word	0xe000e010

08003774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff29 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800379c:	f7ff ff3e 	bl	800361c <__NVIC_GetPriorityGrouping>
 80037a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff ff8e 	bl	80036c8 <NVIC_EncodePriority>
 80037ac:	4602      	mov	r2, r0
 80037ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff5d 	bl	8003674 <__NVIC_SetPriority>
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff31 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffa2 	bl	8003730 <SysTick_Config>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003806:	e17f      	b.n	8003b08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	4013      	ands	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8171 	beq.w	8003b02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d00b      	beq.n	8003840 <HAL_GPIO_Init+0x48>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d007      	beq.n	8003840 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003834:	2b11      	cmp	r3, #17
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b12      	cmp	r3, #18
 800383e:	d130      	bne.n	80038a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003876:	2201      	movs	r2, #1
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 0201 	and.w	r2, r3, #1
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d118      	bne.n	80038e0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x128>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b12      	cmp	r3, #18
 800391e:	d123      	bne.n	8003968 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	08da      	lsrs	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3208      	adds	r2, #8
 8003928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	08da      	lsrs	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0203 	and.w	r2, r3, #3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80ac 	beq.w	8003b02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039aa:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <HAL_GPIO_Init+0x330>)
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	4a5e      	ldr	r2, [pc, #376]	; (8003b28 <HAL_GPIO_Init+0x330>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6613      	str	r3, [r2, #96]	; 0x60
 80039b6:	4b5c      	ldr	r3, [pc, #368]	; (8003b28 <HAL_GPIO_Init+0x330>)
 80039b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039c2:	4a5a      	ldr	r2, [pc, #360]	; (8003b2c <HAL_GPIO_Init+0x334>)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ec:	d025      	beq.n	8003a3a <HAL_GPIO_Init+0x242>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4f      	ldr	r2, [pc, #316]	; (8003b30 <HAL_GPIO_Init+0x338>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01f      	beq.n	8003a36 <HAL_GPIO_Init+0x23e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4e      	ldr	r2, [pc, #312]	; (8003b34 <HAL_GPIO_Init+0x33c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d019      	beq.n	8003a32 <HAL_GPIO_Init+0x23a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4d      	ldr	r2, [pc, #308]	; (8003b38 <HAL_GPIO_Init+0x340>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_GPIO_Init+0x236>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4c      	ldr	r2, [pc, #304]	; (8003b3c <HAL_GPIO_Init+0x344>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00d      	beq.n	8003a2a <HAL_GPIO_Init+0x232>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_GPIO_Init+0x348>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <HAL_GPIO_Init+0x22e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <HAL_GPIO_Init+0x34c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_GPIO_Init+0x22a>
 8003a1e:	2306      	movs	r3, #6
 8003a20:	e00c      	b.n	8003a3c <HAL_GPIO_Init+0x244>
 8003a22:	2307      	movs	r3, #7
 8003a24:	e00a      	b.n	8003a3c <HAL_GPIO_Init+0x244>
 8003a26:	2305      	movs	r3, #5
 8003a28:	e008      	b.n	8003a3c <HAL_GPIO_Init+0x244>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	e006      	b.n	8003a3c <HAL_GPIO_Init+0x244>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e004      	b.n	8003a3c <HAL_GPIO_Init+0x244>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e002      	b.n	8003a3c <HAL_GPIO_Init+0x244>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_GPIO_Init+0x244>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	f002 0203 	and.w	r2, r2, #3
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	4093      	lsls	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a4c:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_GPIO_Init+0x334>)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	3302      	adds	r3, #2
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a7e:	4a32      	ldr	r2, [pc, #200]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a84:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003aa8:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003afc:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <HAL_GPIO_Init+0x350>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3301      	adds	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f47f ae78 	bne.w	8003808 <HAL_GPIO_Init+0x10>
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	48000400 	.word	0x48000400
 8003b34:	48000800 	.word	0x48000800
 8003b38:	48000c00 	.word	0x48000c00
 8003b3c:	48001000 	.word	0x48001000
 8003b40:	48001400 	.word	0x48001400
 8003b44:	48001800 	.word	0x48001800
 8003b48:	40010400 	.word	0x40010400

08003b4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003b5a:	e0cd      	b.n	8003cf8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80c0 	beq.w	8003cf2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b72:	4a68      	ldr	r2, [pc, #416]	; (8003d14 <HAL_GPIO_DeInit+0x1c8>)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b9a:	d025      	beq.n	8003be8 <HAL_GPIO_DeInit+0x9c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a5e      	ldr	r2, [pc, #376]	; (8003d18 <HAL_GPIO_DeInit+0x1cc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01f      	beq.n	8003be4 <HAL_GPIO_DeInit+0x98>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a5d      	ldr	r2, [pc, #372]	; (8003d1c <HAL_GPIO_DeInit+0x1d0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d019      	beq.n	8003be0 <HAL_GPIO_DeInit+0x94>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a5c      	ldr	r2, [pc, #368]	; (8003d20 <HAL_GPIO_DeInit+0x1d4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_GPIO_DeInit+0x90>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	; (8003d24 <HAL_GPIO_DeInit+0x1d8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00d      	beq.n	8003bd8 <HAL_GPIO_DeInit+0x8c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a5a      	ldr	r2, [pc, #360]	; (8003d28 <HAL_GPIO_DeInit+0x1dc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <HAL_GPIO_DeInit+0x88>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a59      	ldr	r2, [pc, #356]	; (8003d2c <HAL_GPIO_DeInit+0x1e0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_GPIO_DeInit+0x84>
 8003bcc:	2306      	movs	r3, #6
 8003bce:	e00c      	b.n	8003bea <HAL_GPIO_DeInit+0x9e>
 8003bd0:	2307      	movs	r3, #7
 8003bd2:	e00a      	b.n	8003bea <HAL_GPIO_DeInit+0x9e>
 8003bd4:	2305      	movs	r3, #5
 8003bd6:	e008      	b.n	8003bea <HAL_GPIO_DeInit+0x9e>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	e006      	b.n	8003bea <HAL_GPIO_DeInit+0x9e>
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e004      	b.n	8003bea <HAL_GPIO_DeInit+0x9e>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e002      	b.n	8003bea <HAL_GPIO_DeInit+0x9e>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <HAL_GPIO_DeInit+0x9e>
 8003be8:	2300      	movs	r3, #0
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	f002 0203 	and.w	r2, r2, #3
 8003bf0:	0092      	lsls	r2, r2, #2
 8003bf2:	4093      	lsls	r3, r2
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d132      	bne.n	8003c60 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003bfa:	4b4d      	ldr	r3, [pc, #308]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	494b      	ldr	r1, [pc, #300]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003c08:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	4947      	ldr	r1, [pc, #284]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003c16:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	4944      	ldr	r1, [pc, #272]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003c24:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	4940      	ldr	r1, [pc, #256]	; (8003d30 <HAL_GPIO_DeInit+0x1e4>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c42:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <HAL_GPIO_DeInit+0x1c8>)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	3302      	adds	r3, #2
 8003c4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	4830      	ldr	r0, [pc, #192]	; (8003d14 <HAL_GPIO_DeInit+0x1c8>)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	400a      	ands	r2, r1
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2103      	movs	r1, #3
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	08da      	lsrs	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3208      	adds	r2, #8
 8003c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	08d2      	lsrs	r2, r2, #3
 8003c94:	4019      	ands	r1, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	401a      	ands	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	2103      	movs	r1, #3
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	401a      	ands	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	401a      	ands	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f af2b 	bne.w	8003b5c <HAL_GPIO_DeInit+0x10>
  }
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40010000 	.word	0x40010000
 8003d18:	48000400 	.word	0x48000400
 8003d1c:	48000800 	.word	0x48000800
 8003d20:	48000c00 	.word	0x48000c00
 8003d24:	48001000 	.word	0x48001000
 8003d28:	48001400 	.word	0x48001400
 8003d2c:	48001800 	.word	0x48001800
 8003d30:	40010400 	.word	0x40010400

08003d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e001      	b.n	8003d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
 8003d70:	4613      	mov	r3, r2
 8003d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d80:	e002      	b.n	8003d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4013      	ands	r3, r2
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43d9      	mvns	r1, r3
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	400b      	ands	r3, r1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e081      	b.n	8003ede <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd ff38 	bl	8001c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	e006      	b.n	8003e50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d104      	bne.n	8003e62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	ea42 0103 	orr.w	r1, r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69d9      	ldr	r1, [r3, #28]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1a      	ldr	r2, [r3, #32]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	817b      	strh	r3, [r7, #10]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	f040 80da 	bne.w	80040be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2C_Master_Transmit+0x30>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e0d3      	b.n	80040c0 <HAL_I2C_Master_Transmit+0x1d8>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f20:	f7ff fb28 	bl	8003574 <HAL_GetTick>
 8003f24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2319      	movs	r3, #25
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fcbc 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0be      	b.n	80040c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	893a      	ldrh	r2, [r7, #8]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2bff      	cmp	r3, #255	; 0xff
 8003f72:	d90e      	bls.n	8003f92 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	22ff      	movs	r2, #255	; 0xff
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	8979      	ldrh	r1, [r7, #10]
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fe1e 	bl	8004bcc <I2C_TransferConfig>
 8003f90:	e06c      	b.n	800406c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	8979      	ldrh	r1, [r7, #10]
 8003fa4:	4b48      	ldr	r3, [pc, #288]	; (80040c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fe0d 	bl	8004bcc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003fb2:	e05b      	b.n	800406c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	6a39      	ldr	r1, [r7, #32]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fcb9 	bl	8004930 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e07b      	b.n	80040c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d034      	beq.n	800406c <HAL_I2C_Master_Transmit+0x184>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d130      	bne.n	800406c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fc4b 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e04d      	b.n	80040c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2bff      	cmp	r3, #255	; 0xff
 800402c:	d90e      	bls.n	800404c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	22ff      	movs	r2, #255	; 0xff
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	b2da      	uxtb	r2, r3
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	2300      	movs	r3, #0
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fdc1 	bl	8004bcc <I2C_TransferConfig>
 800404a:	e00f      	b.n	800406c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	b2da      	uxtb	r2, r3
 800405c:	8979      	ldrh	r1, [r7, #10]
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fdb0 	bl	8004bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d19e      	bne.n	8003fb4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	6a39      	ldr	r1, [r7, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fc98 	bl	80049b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e01a      	b.n	80040c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2220      	movs	r2, #32
 8004090:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_I2C_Master_Transmit+0x1e4>)
 800409e:	400b      	ands	r3, r1
 80040a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	80002000 	.word	0x80002000
 80040cc:	fe00e800 	.word	0xfe00e800

080040d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	461a      	mov	r2, r3
 80040dc:	460b      	mov	r3, r1
 80040de:	817b      	strh	r3, [r7, #10]
 80040e0:	4613      	mov	r3, r2
 80040e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	f040 80db 	bne.w	80042a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_I2C_Master_Receive+0x30>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0d4      	b.n	80042aa <HAL_I2C_Master_Receive+0x1da>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004108:	f7ff fa34 	bl	8003574 <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2319      	movs	r3, #25
 8004114:	2201      	movs	r2, #1
 8004116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fbc8 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e0bf      	b.n	80042aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2222      	movs	r2, #34	; 0x22
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2210      	movs	r2, #16
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	893a      	ldrh	r2, [r7, #8]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2bff      	cmp	r3, #255	; 0xff
 800415a:	d90e      	bls.n	800417a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	22ff      	movs	r2, #255	; 0xff
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	b2da      	uxtb	r2, r3
 8004168:	8979      	ldrh	r1, [r7, #10]
 800416a:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <HAL_I2C_Master_Receive+0x1e4>)
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fd2a 	bl	8004bcc <I2C_TransferConfig>
 8004178:	e06d      	b.n	8004256 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	b2da      	uxtb	r2, r3
 800418a:	8979      	ldrh	r1, [r7, #10]
 800418c:	4b49      	ldr	r3, [pc, #292]	; (80042b4 <HAL_I2C_Master_Receive+0x1e4>)
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fd19 	bl	8004bcc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800419a:	e05c      	b.n	8004256 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	6a39      	ldr	r1, [r7, #32]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fc41 	bl	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e07c      	b.n	80042aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d034      	beq.n	8004256 <HAL_I2C_Master_Receive+0x186>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d130      	bne.n	8004256 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	2200      	movs	r2, #0
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fb56 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e04d      	b.n	80042aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	2bff      	cmp	r3, #255	; 0xff
 8004216:	d90e      	bls.n	8004236 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	22ff      	movs	r2, #255	; 0xff
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	b2da      	uxtb	r2, r3
 8004224:	8979      	ldrh	r1, [r7, #10]
 8004226:	2300      	movs	r3, #0
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fccc 	bl	8004bcc <I2C_TransferConfig>
 8004234:	e00f      	b.n	8004256 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	b2da      	uxtb	r2, r3
 8004246:	8979      	ldrh	r1, [r7, #10]
 8004248:	2300      	movs	r3, #0
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fcbb 	bl	8004bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d19d      	bne.n	800419c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6a39      	ldr	r1, [r7, #32]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fba3 	bl	80049b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e01a      	b.n	80042aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2220      	movs	r2, #32
 800427a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <HAL_I2C_Master_Receive+0x1e8>)
 8004288:	400b      	ands	r3, r1
 800428a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	80002400 	.word	0x80002400
 80042b8:	fe00e800 	.word	0xfe00e800

080042bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	817b      	strh	r3, [r7, #10]
 80042ce:	460b      	mov	r3, r1
 80042d0:	813b      	strh	r3, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	f040 80f9 	bne.w	80044d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_I2C_Mem_Write+0x34>
 80042ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0ed      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_I2C_Mem_Write+0x4e>
 8004306:	2302      	movs	r3, #2
 8004308:	e0e6      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004312:	f7ff f92f 	bl	8003574 <HAL_GetTick>
 8004316:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	2319      	movs	r3, #25
 800431e:	2201      	movs	r2, #1
 8004320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fac3 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0d1      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2221      	movs	r2, #33	; 0x21
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2240      	movs	r2, #64	; 0x40
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800435c:	88f8      	ldrh	r0, [r7, #6]
 800435e:	893a      	ldrh	r2, [r7, #8]
 8004360:	8979      	ldrh	r1, [r7, #10]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	9301      	str	r3, [sp, #4]
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4603      	mov	r3, r0
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f9d3 	bl	8004718 <I2C_RequestMemoryWrite>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0a9      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2bff      	cmp	r3, #255	; 0xff
 800438c:	d90e      	bls.n	80043ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	22ff      	movs	r2, #255	; 0xff
 8004392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	b2da      	uxtb	r2, r3
 800439a:	8979      	ldrh	r1, [r7, #10]
 800439c:	2300      	movs	r3, #0
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fc11 	bl	8004bcc <I2C_TransferConfig>
 80043aa:	e00f      	b.n	80043cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	8979      	ldrh	r1, [r7, #10]
 80043be:	2300      	movs	r3, #0
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fc00 	bl	8004bcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 faad 	bl	8004930 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e07b      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d034      	beq.n	8004484 <HAL_I2C_Mem_Write+0x1c8>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d130      	bne.n	8004484 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fa3f 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e04d      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2bff      	cmp	r3, #255	; 0xff
 8004444:	d90e      	bls.n	8004464 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	22ff      	movs	r2, #255	; 0xff
 800444a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	b2da      	uxtb	r2, r3
 8004452:	8979      	ldrh	r1, [r7, #10]
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fbb5 	bl	8004bcc <I2C_TransferConfig>
 8004462:	e00f      	b.n	8004484 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	b2da      	uxtb	r2, r3
 8004474:	8979      	ldrh	r1, [r7, #10]
 8004476:	2300      	movs	r3, #0
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fba4 	bl	8004bcc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d19e      	bne.n	80043cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fa8c 	bl	80049b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e01a      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2220      	movs	r2, #32
 80044a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_I2C_Mem_Write+0x224>)
 80044b6:	400b      	ands	r3, r1
 80044b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	fe00e800 	.word	0xfe00e800

080044e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b20      	cmp	r3, #32
 8004508:	f040 80fd 	bne.w	8004706 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_I2C_Mem_Read+0x34>
 8004512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0f1      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_I2C_Mem_Read+0x4e>
 800452e:	2302      	movs	r3, #2
 8004530:	e0ea      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800453a:	f7ff f81b 	bl	8003574 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2319      	movs	r3, #25
 8004546:	2201      	movs	r2, #1
 8004548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f9af 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0d5      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2222      	movs	r2, #34	; 0x22
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800457c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004584:	88f8      	ldrh	r0, [r7, #6]
 8004586:	893a      	ldrh	r2, [r7, #8]
 8004588:	8979      	ldrh	r1, [r7, #10]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	4603      	mov	r3, r0
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f913 	bl	80047c0 <I2C_RequestMemoryRead>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0ad      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2bff      	cmp	r3, #255	; 0xff
 80045b4:	d90e      	bls.n	80045d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	22ff      	movs	r2, #255	; 0xff
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	8979      	ldrh	r1, [r7, #10]
 80045c4:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_I2C_Mem_Read+0x22c>)
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fafd 	bl	8004bcc <I2C_TransferConfig>
 80045d2:	e00f      	b.n	80045f4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	8979      	ldrh	r1, [r7, #10]
 80045e6:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <HAL_I2C_Mem_Read+0x22c>)
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 faec 	bl	8004bcc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	2200      	movs	r2, #0
 80045fc:	2104      	movs	r1, #4
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f956 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07c      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d034      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x1d0>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	d130      	bne.n	80046b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	2200      	movs	r2, #0
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f927 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e04d      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	2bff      	cmp	r3, #255	; 0xff
 8004674:	d90e      	bls.n	8004694 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	22ff      	movs	r2, #255	; 0xff
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	b2da      	uxtb	r2, r3
 8004682:	8979      	ldrh	r1, [r7, #10]
 8004684:	2300      	movs	r3, #0
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fa9d 	bl	8004bcc <I2C_TransferConfig>
 8004692:	e00f      	b.n	80046b4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	8979      	ldrh	r1, [r7, #10]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fa8c 	bl	8004bcc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d19a      	bne.n	80045f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f974 	bl	80049b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e01a      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2220      	movs	r2, #32
 80046d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_I2C_Mem_Read+0x230>)
 80046e6:	400b      	ands	r3, r1
 80046e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	80002400 	.word	0x80002400
 8004714:	fe00e800 	.word	0xfe00e800

08004718 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	4603      	mov	r3, r0
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	460b      	mov	r3, r1
 800472c:	813b      	strh	r3, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	8979      	ldrh	r1, [r7, #10]
 8004738:	4b20      	ldr	r3, [pc, #128]	; (80047bc <I2C_RequestMemoryWrite+0xa4>)
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fa43 	bl	8004bcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f8f0 	bl	8004930 <I2C_WaitOnTXISFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e02c      	b.n	80047b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d105      	bne.n	800476c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004760:	893b      	ldrh	r3, [r7, #8]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	629a      	str	r2, [r3, #40]	; 0x28
 800476a:	e015      	b.n	8004798 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800476c:	893b      	ldrh	r3, [r7, #8]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	b29b      	uxth	r3, r3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f8d6 	bl	8004930 <I2C_WaitOnTXISFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e012      	b.n	80047b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800478e:	893b      	ldrh	r3, [r7, #8]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2200      	movs	r2, #0
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f884 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	80002000 	.word	0x80002000

080047c0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	817b      	strh	r3, [r7, #10]
 80047d2:	460b      	mov	r3, r1
 80047d4:	813b      	strh	r3, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	4b20      	ldr	r3, [pc, #128]	; (8004864 <I2C_RequestMemoryRead+0xa4>)
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2300      	movs	r3, #0
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f9f0 	bl	8004bcc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	69b9      	ldr	r1, [r7, #24]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f89d 	bl	8004930 <I2C_WaitOnTXISFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e02c      	b.n	800485a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004806:	893b      	ldrh	r3, [r7, #8]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
 8004810:	e015      	b.n	800483e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004812:	893b      	ldrh	r3, [r7, #8]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	b29b      	uxth	r3, r3
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f883 	bl	8004930 <I2C_WaitOnTXISFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e012      	b.n	800485a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004834:	893b      	ldrh	r3, [r7, #8]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2200      	movs	r2, #0
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f831 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	80002000 	.word	0x80002000

08004868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d103      	bne.n	8004886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d007      	beq.n	80048a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	619a      	str	r2, [r3, #24]
  }
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c0:	e022      	b.n	8004908 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d01e      	beq.n	8004908 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fe fe53 	bl	8003574 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d113      	bne.n	8004908 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e00f      	b.n	8004928 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	429a      	cmp	r2, r3
 8004924:	d0cd      	beq.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800493c:	e02c      	b.n	8004998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f8dc 	bl	8004b00 <I2C_IsAcknowledgeFailed>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e02a      	b.n	80049a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d01e      	beq.n	8004998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495a:	f7fe fe0b 	bl	8003574 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d113      	bne.n	8004998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e007      	b.n	80049a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d1cb      	bne.n	800493e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049bc:	e028      	b.n	8004a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f89c 	bl	8004b00 <I2C_IsAcknowledgeFailed>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e026      	b.n	8004a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d2:	f7fe fdcf 	bl	8003574 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d302      	bcc.n	80049e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d113      	bne.n	8004a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e007      	b.n	8004a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d1cf      	bne.n	80049be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a34:	e055      	b.n	8004ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f860 	bl	8004b00 <I2C_IsAcknowledgeFailed>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e053      	b.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d129      	bne.n	8004aac <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d105      	bne.n	8004a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e03f      	b.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2220      	movs	r2, #32
 8004a78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004a86:	400b      	ands	r3, r1
 8004a88:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e022      	b.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aac:	f7fe fd62 	bl	8003574 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d302      	bcc.n	8004ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10f      	bne.n	8004ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f043 0220 	orr.w	r2, r3, #32
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e007      	b.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d1a2      	bne.n	8004a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	fe00e800 	.word	0xfe00e800

08004b00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d151      	bne.n	8004bbe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b1a:	e022      	b.n	8004b62 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d01e      	beq.n	8004b62 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b24:	f7fe fd26 	bl	8003574 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <I2C_IsAcknowledgeFailed+0x3a>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d113      	bne.n	8004b62 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f043 0220 	orr.w	r2, r3, #32
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e02e      	b.n	8004bc0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d1d5      	bne.n	8004b1c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2210      	movs	r2, #16
 8004b76:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff fe71 	bl	8004868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004b92:	400b      	ands	r3, r1
 8004b94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	fe00e800 	.word	0xfe00e800

08004bcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	0d5b      	lsrs	r3, r3, #21
 8004be8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <I2C_TransferConfig+0x58>)
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	ea02 0103 	and.w	r1, r2, r3
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bfc:	7a7b      	ldrb	r3, [r7, #9]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	03ff63ff 	.word	0x03ff63ff

08004c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d138      	bne.n	8004cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e032      	b.n	8004cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e000      	b.n	8004cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d139      	bne.n	8004d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e033      	b.n	8004d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2224      	movs	r2, #36	; 0x24
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0201 	bic.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40007000 	.word	0x40007000

08004d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d82:	d130      	bne.n	8004de6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d84:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d90:	d038      	beq.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d92:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d9a:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004da0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2232      	movs	r2, #50	; 0x32
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
 8004dac:	4a1b      	ldr	r2, [pc, #108]	; (8004e1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	0c9b      	lsrs	r3, r3, #18
 8004db4:	3301      	adds	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db8:	e002      	b.n	8004dc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d102      	bne.n	8004dd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f2      	bne.n	8004dba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d110      	bne.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e00f      	b.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df2:	d007      	beq.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dfc:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40007000 	.word	0x40007000
 8004e18:	20000008 	.word	0x20000008
 8004e1c:	431bde83 	.word	0x431bde83

08004e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e3d4      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e32:	4ba1      	ldr	r3, [pc, #644]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e3c:	4b9e      	ldr	r3, [pc, #632]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80e4 	beq.w	800501c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_RCC_OscConfig+0x4a>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b0c      	cmp	r3, #12
 8004e5e:	f040 808b 	bne.w	8004f78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	f040 8087 	bne.w	8004f78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e6a:	4b93      	ldr	r3, [pc, #588]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <HAL_RCC_OscConfig+0x62>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e3ac      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	4b8c      	ldr	r3, [pc, #560]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d004      	beq.n	8004e9c <HAL_RCC_OscConfig+0x7c>
 8004e92:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCC_OscConfig+0x88>
 8004e9c:	4b86      	ldr	r3, [pc, #536]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d223      	bcs.n	8004ef4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fd41 	bl	8005938 <RCC_SetFlashLatencyFromMSIRange>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e38d      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ec0:	4b7d      	ldr	r3, [pc, #500]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7c      	ldr	r2, [pc, #496]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004ec6:	f043 0308 	orr.w	r3, r3, #8
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	4b7a      	ldr	r3, [pc, #488]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	4977      	ldr	r1, [pc, #476]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ede:	4b76      	ldr	r3, [pc, #472]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	4972      	ldr	r1, [pc, #456]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
 8004ef2:	e025      	b.n	8004f40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef4:	4b70      	ldr	r3, [pc, #448]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a6f      	ldr	r2, [pc, #444]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004efa:	f043 0308 	orr.w	r3, r3, #8
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b6d      	ldr	r3, [pc, #436]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	496a      	ldr	r1, [pc, #424]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f12:	4b69      	ldr	r3, [pc, #420]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	4965      	ldr	r1, [pc, #404]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fd01 	bl	8005938 <RCC_SetFlashLatencyFromMSIRange>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e34d      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f40:	f000 fc36 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b5c      	ldr	r3, [pc, #368]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	495a      	ldr	r1, [pc, #360]	; (80050bc <HAL_RCC_OscConfig+0x29c>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_RCC_OscConfig+0x2a0>)
 8004f5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f60:	4b58      	ldr	r3, [pc, #352]	; (80050c4 <HAL_RCC_OscConfig+0x2a4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fab5 	bl	80034d4 <HAL_InitTick>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d052      	beq.n	800501a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	e331      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d032      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f80:	4b4d      	ldr	r3, [pc, #308]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a4c      	ldr	r2, [pc, #304]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f8c:	f7fe faf2 	bl	8003574 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f94:	f7fe faee 	bl	8003574 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e31a      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fa6:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fb2:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a40      	ldr	r2, [pc, #256]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fb8:	f043 0308 	orr.w	r3, r3, #8
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	493b      	ldr	r1, [pc, #236]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd0:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	4936      	ldr	r1, [pc, #216]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]
 8004fe4:	e01a      	b.n	800501c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a33      	ldr	r2, [pc, #204]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8004fec:	f023 0301 	bic.w	r3, r3, #1
 8004ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ff2:	f7fe fabf 	bl	8003574 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ffa:	f7fe fabb 	bl	8003574 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e2e7      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f0      	bne.n	8004ffa <HAL_RCC_OscConfig+0x1da>
 8005018:	e000      	b.n	800501c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800501a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d074      	beq.n	8005112 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d005      	beq.n	800503a <HAL_RCC_OscConfig+0x21a>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b0c      	cmp	r3, #12
 8005032:	d10e      	bne.n	8005052 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b03      	cmp	r3, #3
 8005038:	d10b      	bne.n	8005052 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503a:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d064      	beq.n	8005110 <HAL_RCC_OscConfig+0x2f0>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d160      	bne.n	8005110 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e2c4      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x24a>
 800505c:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8005062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	e01d      	b.n	80050a6 <HAL_RCC_OscConfig+0x286>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005072:	d10c      	bne.n	800508e <HAL_RCC_OscConfig+0x26e>
 8005074:	4b10      	ldr	r3, [pc, #64]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0f      	ldr	r2, [pc, #60]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 800507a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8005086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e00b      	b.n	80050a6 <HAL_RCC_OscConfig+0x286>
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 8005094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a06      	ldr	r2, [pc, #24]	; (80050b8 <HAL_RCC_OscConfig+0x298>)
 80050a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01c      	beq.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fe fa61 	bl	8003574 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b4:	e011      	b.n	80050da <HAL_RCC_OscConfig+0x2ba>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	0800cab8 	.word	0x0800cab8
 80050c0:	20000008 	.word	0x20000008
 80050c4:	2000005c 	.word	0x2000005c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fe fa54 	bl	8003574 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	; 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e280      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050da:	4baf      	ldr	r3, [pc, #700]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x2a8>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fe fa44 	bl	8003574 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fe fa40 	bl	8003574 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e26c      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005102:	4ba5      	ldr	r3, [pc, #660]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x2d0>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d060      	beq.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d005      	beq.n	8005130 <HAL_RCC_OscConfig+0x310>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b0c      	cmp	r3, #12
 8005128:	d119      	bne.n	800515e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d116      	bne.n	800515e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005130:	4b99      	ldr	r3, [pc, #612]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_OscConfig+0x328>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e249      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b93      	ldr	r3, [pc, #588]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	4990      	ldr	r1, [pc, #576]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800515c:	e040      	b.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d023      	beq.n	80051ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005166:	4b8c      	ldr	r3, [pc, #560]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a8b      	ldr	r2, [pc, #556]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fe f9ff 	bl	8003574 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517a:	f7fe f9fb 	bl	8003574 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e227      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800518c:	4b82      	ldr	r3, [pc, #520]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005198:	4b7f      	ldr	r3, [pc, #508]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	497c      	ldr	r1, [pc, #496]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]
 80051ac:	e018      	b.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ae:	4b7a      	ldr	r3, [pc, #488]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a79      	ldr	r2, [pc, #484]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80051b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7fe f9db 	bl	8003574 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c2:	f7fe f9d7 	bl	8003574 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e203      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051d4:	4b70      	ldr	r3, [pc, #448]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d03c      	beq.n	8005266 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01c      	beq.n	800522e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f4:	4b68      	ldr	r3, [pc, #416]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fa:	4a67      	ldr	r2, [pc, #412]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fe f9b6 	bl	8003574 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fe f9b2 	bl	8003574 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e1de      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800521e:	4b5e      	ldr	r3, [pc, #376]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ef      	beq.n	800520c <HAL_RCC_OscConfig+0x3ec>
 800522c:	e01b      	b.n	8005266 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522e:	4b5a      	ldr	r3, [pc, #360]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005234:	4a58      	ldr	r2, [pc, #352]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fe f999 	bl	8003574 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005246:	f7fe f995 	bl	8003574 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1c1      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005258:	4b4f      	ldr	r3, [pc, #316]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1ef      	bne.n	8005246 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80a6 	beq.w	80053c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005278:	4b47      	ldr	r3, [pc, #284]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005284:	4b44      	ldr	r3, [pc, #272]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005288:	4a43      	ldr	r2, [pc, #268]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800528a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528e:	6593      	str	r3, [r2, #88]	; 0x58
 8005290:	4b41      	ldr	r3, [pc, #260]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a0:	4b3e      	ldr	r3, [pc, #248]	; (800539c <HAL_RCC_OscConfig+0x57c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d118      	bne.n	80052de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ac:	4b3b      	ldr	r3, [pc, #236]	; (800539c <HAL_RCC_OscConfig+0x57c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a3a      	ldr	r2, [pc, #232]	; (800539c <HAL_RCC_OscConfig+0x57c>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b8:	f7fe f95c 	bl	8003574 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c0:	f7fe f958 	bl	8003574 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e184      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d2:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_RCC_OscConfig+0x57c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d108      	bne.n	80052f8 <HAL_RCC_OscConfig+0x4d8>
 80052e6:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052f6:	e024      	b.n	8005342 <HAL_RCC_OscConfig+0x522>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	d110      	bne.n	8005322 <HAL_RCC_OscConfig+0x502>
 8005300:	4b25      	ldr	r3, [pc, #148]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005308:	f043 0304 	orr.w	r3, r3, #4
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	4a20      	ldr	r2, [pc, #128]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005320:	e00f      	b.n	8005342 <HAL_RCC_OscConfig+0x522>
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d016      	beq.n	8005378 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fe f913 	bl	8003574 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005350:	e00a      	b.n	8005368 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005352:	f7fe f90f 	bl	8003574 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005360:	4293      	cmp	r3, r2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e139      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_OscConfig+0x578>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0ed      	beq.n	8005352 <HAL_RCC_OscConfig+0x532>
 8005376:	e01a      	b.n	80053ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005378:	f7fe f8fc 	bl	8003574 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800537e:	e00f      	b.n	80053a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005380:	f7fe f8f8 	bl	8003574 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d906      	bls.n	80053a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e122      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a0:	4b90      	ldr	r3, [pc, #576]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e8      	bne.n	8005380 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b4:	4b8b      	ldr	r3, [pc, #556]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b8:	4a8a      	ldr	r2, [pc, #552]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80053ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8108 	beq.w	80055da <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	f040 80d0 	bne.w	8005574 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053d4:	4b83      	ldr	r3, [pc, #524]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f003 0203 	and.w	r2, r3, #3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d130      	bne.n	800544a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	3b01      	subs	r3, #1
 80053f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d127      	bne.n	800544a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d11f      	bne.n	800544a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005414:	2a07      	cmp	r2, #7
 8005416:	bf14      	ite	ne
 8005418:	2201      	movne	r2, #1
 800541a:	2200      	moveq	r2, #0
 800541c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800541e:	4293      	cmp	r3, r2
 8005420:	d113      	bne.n	800544a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	3b01      	subs	r3, #1
 8005430:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d109      	bne.n	800544a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	085b      	lsrs	r3, r3, #1
 8005442:	3b01      	subs	r3, #1
 8005444:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d06e      	beq.n	8005528 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b0c      	cmp	r3, #12
 800544e:	d069      	beq.n	8005524 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005450:	4b64      	ldr	r3, [pc, #400]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800545c:	4b61      	ldr	r3, [pc, #388]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0b7      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800546c:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5c      	ldr	r2, [pc, #368]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005476:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005478:	f7fe f87c 	bl	8003574 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005480:	f7fe f878 	bl	8003574 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0a4      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005492:	4b54      	ldr	r3, [pc, #336]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800549e:	4b51      	ldr	r3, [pc, #324]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <HAL_RCC_OscConfig+0x7c8>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0112      	lsls	r2, r2, #4
 80054b2:	4311      	orrs	r1, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b8:	0212      	lsls	r2, r2, #8
 80054ba:	4311      	orrs	r1, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054c0:	0852      	lsrs	r2, r2, #1
 80054c2:	3a01      	subs	r2, #1
 80054c4:	0552      	lsls	r2, r2, #21
 80054c6:	4311      	orrs	r1, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054cc:	0852      	lsrs	r2, r2, #1
 80054ce:	3a01      	subs	r2, #1
 80054d0:	0652      	lsls	r2, r2, #25
 80054d2:	4311      	orrs	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054d8:	0912      	lsrs	r2, r2, #4
 80054da:	0452      	lsls	r2, r2, #17
 80054dc:	430a      	orrs	r2, r1
 80054de:	4941      	ldr	r1, [pc, #260]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054e4:	4b3f      	ldr	r3, [pc, #252]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a3e      	ldr	r2, [pc, #248]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80054ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054f0:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a3b      	ldr	r2, [pc, #236]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80054f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054fc:	f7fe f83a 	bl	8003574 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fe f836 	bl	8003574 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e062      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005516:	4b33      	ldr	r3, [pc, #204]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005522:	e05a      	b.n	80055da <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e059      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005528:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d152      	bne.n	80055da <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 800553a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800554a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800554c:	f7fe f812 	bl	8003574 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005554:	f7fe f80e 	bl	8003574 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e03a      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x734>
 8005572:	e032      	b.n	80055da <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d02d      	beq.n	80055d6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005584:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d105      	bne.n	800559e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 8005598:	f023 0303 	bic.w	r3, r3, #3
 800559c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	4a10      	ldr	r2, [pc, #64]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80055a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fd ffe1 	bl	8003574 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b6:	f7fd ffdd 	bl	8003574 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e009      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_RCC_OscConfig+0x7c4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f0      	bne.n	80055b6 <HAL_RCC_OscConfig+0x796>
 80055d4:	e001      	b.n	80055da <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40021000 	.word	0x40021000
 80055e8:	f99d808c 	.word	0xf99d808c

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0c8      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005600:	4b66      	ldr	r3, [pc, #408]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d910      	bls.n	8005630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b63      	ldr	r3, [pc, #396]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 0207 	bic.w	r2, r3, #7
 8005616:	4961      	ldr	r1, [pc, #388]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0b0      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d04c      	beq.n	80056d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d107      	bne.n	8005654 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005644:	4b56      	ldr	r3, [pc, #344]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d121      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e09e      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d107      	bne.n	800566c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d115      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e092      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d107      	bne.n	8005684 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d109      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e086      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005684:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e07e      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005694:	4b42      	ldr	r3, [pc, #264]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 0203 	bic.w	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	493f      	ldr	r1, [pc, #252]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a6:	f7fd ff65 	bl	8003574 <HAL_GetTick>
 80056aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ae:	f7fd ff61 	bl	8003574 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e066      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c4:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 020c 	and.w	r2, r3, #12
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d1eb      	bne.n	80056ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e2:	4b2f      	ldr	r3, [pc, #188]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	492c      	ldr	r1, [pc, #176]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b29      	ldr	r3, [pc, #164]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d210      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b26      	ldr	r3, [pc, #152]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 0207 	bic.w	r2, r3, #7
 800570a:	4924      	ldr	r1, [pc, #144]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e036      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4918      	ldr	r1, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4910      	ldr	r1, [pc, #64]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005762:	f000 f825 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 8005766:	4602      	mov	r2, r0
 8005768:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	490c      	ldr	r1, [pc, #48]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005774:	5ccb      	ldrb	r3, [r1, r3]
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	fa22 f303 	lsr.w	r3, r2, r3
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7fd fea4 	bl	80034d4 <HAL_InitTick>
 800578c:	4603      	mov	r3, r0
 800578e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005790:	7afb      	ldrb	r3, [r7, #11]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40022000 	.word	0x40022000
 80057a0:	40021000 	.word	0x40021000
 80057a4:	0800cab8 	.word	0x0800cab8
 80057a8:	20000008 	.word	0x20000008
 80057ac:	2000005c 	.word	0x2000005c

080057b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057be:	4b3e      	ldr	r3, [pc, #248]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057c8:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x34>
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d121      	bne.n	8005822 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d11e      	bne.n	8005822 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057e4:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057f0:	4b31      	ldr	r3, [pc, #196]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	e005      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005800:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800580c:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d102      	bne.n	800582e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005828:	4b25      	ldr	r3, [pc, #148]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e004      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d101      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005834:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005836:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d134      	bne.n	80058a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800583e:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d003      	beq.n	8005856 <HAL_RCC_GetSysClockFreq+0xa6>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b03      	cmp	r3, #3
 8005852:	d003      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0xac>
 8005854:	e005      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005856:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005858:	617b      	str	r3, [r7, #20]
      break;
 800585a:	e005      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800585e:	617b      	str	r3, [r7, #20]
      break;
 8005860:	e002      	b.n	8005868 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	617b      	str	r3, [r7, #20]
      break;
 8005866:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	3301      	adds	r3, #1
 8005874:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	fb02 f203 	mul.w	r2, r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	fbb2 f3f3 	udiv	r3, r2, r3
 800588c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	0e5b      	lsrs	r3, r3, #25
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	3301      	adds	r3, #1
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058a8:	69bb      	ldr	r3, [r7, #24]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3724      	adds	r7, #36	; 0x24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	0800cad0 	.word	0x0800cad0
 80058c0:	00f42400 	.word	0x00f42400
 80058c4:	007a1200 	.word	0x007a1200

080058c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000008 	.word	0x20000008

080058e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058e4:	f7ff fff0 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	0a1b      	lsrs	r3, r3, #8
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	4904      	ldr	r1, [pc, #16]	; (8005908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058f6:	5ccb      	ldrb	r3, [r1, r3]
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005900:	4618      	mov	r0, r3
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40021000 	.word	0x40021000
 8005908:	0800cac8 	.word	0x0800cac8

0800590c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005910:	f7ff ffda 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 8005914:	4602      	mov	r2, r0
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	0adb      	lsrs	r3, r3, #11
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	4904      	ldr	r1, [pc, #16]	; (8005934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005922:	5ccb      	ldrb	r3, [r1, r3]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40021000 	.word	0x40021000
 8005934:	0800cac8 	.word	0x0800cac8

08005938 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005950:	f7ff fa02 	bl	8004d58 <HAL_PWREx_GetVoltageRange>
 8005954:	6178      	str	r0, [r7, #20]
 8005956:	e014      	b.n	8005982 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005958:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800595a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595c:	4a24      	ldr	r2, [pc, #144]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800595e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005962:	6593      	str	r3, [r2, #88]	; 0x58
 8005964:	4b22      	ldr	r3, [pc, #136]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005970:	f7ff f9f2 	bl	8004d58 <HAL_PWREx_GetVoltageRange>
 8005974:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005976:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800597c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005980:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005988:	d10b      	bne.n	80059a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	d919      	bls.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2ba0      	cmp	r3, #160	; 0xa0
 8005994:	d902      	bls.n	800599c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005996:	2302      	movs	r3, #2
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	e013      	b.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800599c:	2301      	movs	r3, #1
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	e010      	b.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b80      	cmp	r3, #128	; 0x80
 80059a6:	d902      	bls.n	80059ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059a8:	2303      	movs	r3, #3
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	e00a      	b.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d102      	bne.n	80059ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059b4:	2302      	movs	r3, #2
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	e004      	b.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b70      	cmp	r3, #112	; 0x70
 80059be:	d101      	bne.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059c0:	2301      	movs	r3, #1
 80059c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059c4:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f023 0207 	bic.w	r2, r3, #7
 80059cc:	4909      	ldr	r1, [pc, #36]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d001      	beq.n	80059e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40022000 	.word	0x40022000

080059f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a00:	2300      	movs	r3, #0
 8005a02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a04:	2300      	movs	r3, #0
 8005a06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d041      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a1c:	d02a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a22:	d824      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a28:	d008      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a2e:	d81e      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a38:	d010      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a3a:	e018      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a3c:	4b86      	ldr	r3, [pc, #536]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4a85      	ldr	r2, [pc, #532]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a48:	e015      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fabb 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a5a:	e00c      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3320      	adds	r3, #32
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fba6 	bl	80061b4 <RCCEx_PLLSAI2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a6c:	e003      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	74fb      	strb	r3, [r7, #19]
      break;
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a76:	7cfb      	ldrb	r3, [r7, #19]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10b      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a7c:	4b76      	ldr	r3, [pc, #472]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8a:	4973      	ldr	r1, [pc, #460]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a92:	e001      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d041      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aac:	d02a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005aae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ab2:	d824      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ab8:	d008      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005abe:	d81e      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ac8:	d010      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aca:	e018      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005acc:	4b62      	ldr	r3, [pc, #392]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a61      	ldr	r2, [pc, #388]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ad8:	e015      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3304      	adds	r3, #4
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fa73 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005aea:	e00c      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3320      	adds	r3, #32
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb5e 	bl	80061b4 <RCCEx_PLLSAI2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	74fb      	strb	r3, [r7, #19]
      break;
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b06:	7cfb      	ldrb	r3, [r7, #19]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b0c:	4b52      	ldr	r3, [pc, #328]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1a:	494f      	ldr	r1, [pc, #316]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b22:	e001      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	7cfb      	ldrb	r3, [r7, #19]
 8005b26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80a0 	beq.w	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b36:	2300      	movs	r3, #0
 8005b38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b3a:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00d      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b50:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b54:	4a40      	ldr	r2, [pc, #256]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5c:	4b3e      	ldr	r3, [pc, #248]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b6c:	4b3b      	ldr	r3, [pc, #236]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a3a      	ldr	r2, [pc, #232]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b78:	f7fd fcfc 	bl	8003574 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b7e:	e009      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b80:	f7fd fcf8 	bl	8003574 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d902      	bls.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	74fb      	strb	r3, [r7, #19]
        break;
 8005b92:	e005      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b94:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ef      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d15c      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ba6:	4b2c      	ldr	r3, [pc, #176]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01f      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d019      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bc4:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bd0:	4b21      	ldr	r3, [pc, #132]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	4a20      	ldr	r2, [pc, #128]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005be0:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bf0:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c02:	f7fd fcb7 	bl	8003574 <HAL_GetTick>
 8005c06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c08:	e00b      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c0a:	f7fd fcb3 	bl	8003574 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d902      	bls.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c20:	e006      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ec      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c36:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c46:	4904      	ldr	r1, [pc, #16]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c4e:	e009      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c50:	7cfb      	ldrb	r3, [r7, #19]
 8005c52:	74bb      	strb	r3, [r7, #18]
 8005c54:	e006      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	7cfb      	ldrb	r3, [r7, #19]
 8005c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c64:	7c7b      	ldrb	r3, [r7, #17]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d105      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6a:	4b9e      	ldr	r3, [pc, #632]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6e:	4a9d      	ldr	r2, [pc, #628]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c82:	4b98      	ldr	r3, [pc, #608]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f023 0203 	bic.w	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	4994      	ldr	r1, [pc, #592]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca4:	4b8f      	ldr	r3, [pc, #572]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f023 020c 	bic.w	r2, r3, #12
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	498c      	ldr	r1, [pc, #560]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cc6:	4b87      	ldr	r3, [pc, #540]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	4983      	ldr	r1, [pc, #524]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ce8:	4b7e      	ldr	r3, [pc, #504]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	497b      	ldr	r1, [pc, #492]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d0a:	4b76      	ldr	r3, [pc, #472]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d18:	4972      	ldr	r1, [pc, #456]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3a:	496a      	ldr	r1, [pc, #424]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d4e:	4b65      	ldr	r3, [pc, #404]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5c:	4961      	ldr	r1, [pc, #388]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d70:	4b5c      	ldr	r3, [pc, #368]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7e:	4959      	ldr	r1, [pc, #356]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d92:	4b54      	ldr	r3, [pc, #336]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	4950      	ldr	r1, [pc, #320]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005db4:	4b4b      	ldr	r3, [pc, #300]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	4948      	ldr	r1, [pc, #288]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dd6:	4b43      	ldr	r3, [pc, #268]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de4:	493f      	ldr	r1, [pc, #252]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d028      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df8:	4b3a      	ldr	r3, [pc, #232]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e06:	4937      	ldr	r1, [pc, #220]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e16:	d106      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e18:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4a31      	ldr	r2, [pc, #196]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e22:	60d3      	str	r3, [r2, #12]
 8005e24:	e011      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	2101      	movs	r1, #1
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f8c8 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e40:	7cfb      	ldrb	r3, [r7, #19]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d028      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	491f      	ldr	r1, [pc, #124]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e74:	d106      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e76:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e80:	60d3      	str	r3, [r2, #12]
 8005e82:	e011      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3304      	adds	r3, #4
 8005e92:	2101      	movs	r1, #1
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f899 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d02b      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec2:	4908      	ldr	r1, [pc, #32]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed2:	d109      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	4a02      	ldr	r2, [pc, #8]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ede:	60d3      	str	r3, [r2, #12]
 8005ee0:	e014      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ef0:	d10c      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f867 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f08:	7cfb      	ldrb	r3, [r7, #19]
 8005f0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d02f      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f18:	4b2b      	ldr	r3, [pc, #172]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f26:	4928      	ldr	r1, [pc, #160]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f36:	d10d      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 f844 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d014      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f4e:	7cfb      	ldrb	r3, [r7, #19]
 8005f50:	74bb      	strb	r3, [r7, #18]
 8005f52:	e011      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3320      	adds	r3, #32
 8005f62:	2102      	movs	r1, #2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f925 	bl	80061b4 <RCCEx_PLLSAI2_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f6e:	7cfb      	ldrb	r3, [r7, #19]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f84:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f92:	490d      	ldr	r1, [pc, #52]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fa6:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb6:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40021000 	.word	0x40021000

08005fcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fda:	4b75      	ldr	r3, [pc, #468]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d018      	beq.n	8006018 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005fe6:	4b72      	ldr	r3, [pc, #456]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0203 	and.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d10d      	bne.n	8006012 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
       ||
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ffe:	4b6c      	ldr	r3, [pc, #432]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
       ||
 800600e:	429a      	cmp	r2, r3
 8006010:	d047      	beq.n	80060a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e044      	b.n	80060a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b03      	cmp	r3, #3
 800601e:	d018      	beq.n	8006052 <RCCEx_PLLSAI1_Config+0x86>
 8006020:	2b03      	cmp	r3, #3
 8006022:	d825      	bhi.n	8006070 <RCCEx_PLLSAI1_Config+0xa4>
 8006024:	2b01      	cmp	r3, #1
 8006026:	d002      	beq.n	800602e <RCCEx_PLLSAI1_Config+0x62>
 8006028:	2b02      	cmp	r3, #2
 800602a:	d009      	beq.n	8006040 <RCCEx_PLLSAI1_Config+0x74>
 800602c:	e020      	b.n	8006070 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800602e:	4b60      	ldr	r3, [pc, #384]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11d      	bne.n	8006076 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800603e:	e01a      	b.n	8006076 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006040:	4b5b      	ldr	r3, [pc, #364]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006048:	2b00      	cmp	r3, #0
 800604a:	d116      	bne.n	800607a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006050:	e013      	b.n	800607a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006052:	4b57      	ldr	r3, [pc, #348]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800605e:	4b54      	ldr	r3, [pc, #336]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800606e:	e006      	b.n	800607e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e004      	b.n	8006080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800607e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10d      	bne.n	80060a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6819      	ldr	r1, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	430b      	orrs	r3, r1
 800609c:	4944      	ldr	r1, [pc, #272]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d17d      	bne.n	80061a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060a8:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a40      	ldr	r2, [pc, #256]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b4:	f7fd fa5e 	bl	8003574 <HAL_GetTick>
 80060b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060ba:	e009      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060bc:	f7fd fa5a 	bl	8003574 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d902      	bls.n	80060d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	73fb      	strb	r3, [r7, #15]
        break;
 80060ce:	e005      	b.n	80060dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060d0:	4b37      	ldr	r3, [pc, #220]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1ef      	bne.n	80060bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d160      	bne.n	80061a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d111      	bne.n	800610c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060e8:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80060f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6892      	ldr	r2, [r2, #8]
 80060f8:	0211      	lsls	r1, r2, #8
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	0912      	lsrs	r2, r2, #4
 8006100:	0452      	lsls	r2, r2, #17
 8006102:	430a      	orrs	r2, r1
 8006104:	492a      	ldr	r1, [pc, #168]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006106:	4313      	orrs	r3, r2
 8006108:	610b      	str	r3, [r1, #16]
 800610a:	e027      	b.n	800615c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d112      	bne.n	8006138 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006112:	4b27      	ldr	r3, [pc, #156]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800611a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6892      	ldr	r2, [r2, #8]
 8006122:	0211      	lsls	r1, r2, #8
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6912      	ldr	r2, [r2, #16]
 8006128:	0852      	lsrs	r2, r2, #1
 800612a:	3a01      	subs	r2, #1
 800612c:	0552      	lsls	r2, r2, #21
 800612e:	430a      	orrs	r2, r1
 8006130:	491f      	ldr	r1, [pc, #124]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006132:	4313      	orrs	r3, r2
 8006134:	610b      	str	r3, [r1, #16]
 8006136:	e011      	b.n	800615c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6892      	ldr	r2, [r2, #8]
 8006148:	0211      	lsls	r1, r2, #8
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6952      	ldr	r2, [r2, #20]
 800614e:	0852      	lsrs	r2, r2, #1
 8006150:	3a01      	subs	r2, #1
 8006152:	0652      	lsls	r2, r2, #25
 8006154:	430a      	orrs	r2, r1
 8006156:	4916      	ldr	r1, [pc, #88]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006158:	4313      	orrs	r3, r2
 800615a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800615c:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006162:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006166:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fd fa04 	bl	8003574 <HAL_GetTick>
 800616c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800616e:	e009      	b.n	8006184 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006170:	f7fd fa00 	bl	8003574 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d902      	bls.n	8006184 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	73fb      	strb	r3, [r7, #15]
          break;
 8006182:	e005      	b.n	8006190 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0ef      	beq.n	8006170 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006198:	691a      	ldr	r2, [r3, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	4904      	ldr	r1, [pc, #16]	; (80061b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40021000 	.word	0x40021000

080061b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061c2:	4b6a      	ldr	r3, [pc, #424]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d018      	beq.n	8006200 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80061ce:	4b67      	ldr	r3, [pc, #412]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f003 0203 	and.w	r2, r3, #3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d10d      	bne.n	80061fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
       ||
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80061e6:	4b61      	ldr	r3, [pc, #388]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
       ||
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d047      	beq.n	800628a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	73fb      	strb	r3, [r7, #15]
 80061fe:	e044      	b.n	800628a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b03      	cmp	r3, #3
 8006206:	d018      	beq.n	800623a <RCCEx_PLLSAI2_Config+0x86>
 8006208:	2b03      	cmp	r3, #3
 800620a:	d825      	bhi.n	8006258 <RCCEx_PLLSAI2_Config+0xa4>
 800620c:	2b01      	cmp	r3, #1
 800620e:	d002      	beq.n	8006216 <RCCEx_PLLSAI2_Config+0x62>
 8006210:	2b02      	cmp	r3, #2
 8006212:	d009      	beq.n	8006228 <RCCEx_PLLSAI2_Config+0x74>
 8006214:	e020      	b.n	8006258 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006216:	4b55      	ldr	r3, [pc, #340]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d11d      	bne.n	800625e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006226:	e01a      	b.n	800625e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006228:	4b50      	ldr	r3, [pc, #320]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006230:	2b00      	cmp	r3, #0
 8006232:	d116      	bne.n	8006262 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006238:	e013      	b.n	8006262 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800623a:	4b4c      	ldr	r3, [pc, #304]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10f      	bne.n	8006266 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006246:	4b49      	ldr	r3, [pc, #292]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006256:	e006      	b.n	8006266 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
      break;
 800625c:	e004      	b.n	8006268 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006266:	bf00      	nop
    }

    if(status == HAL_OK)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10d      	bne.n	800628a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	3b01      	subs	r3, #1
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	430b      	orrs	r3, r1
 8006284:	4939      	ldr	r1, [pc, #228]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006286:	4313      	orrs	r3, r2
 8006288:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d167      	bne.n	8006360 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006290:	4b36      	ldr	r3, [pc, #216]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a35      	ldr	r2, [pc, #212]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800629a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629c:	f7fd f96a 	bl	8003574 <HAL_GetTick>
 80062a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062a2:	e009      	b.n	80062b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062a4:	f7fd f966 	bl	8003574 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d902      	bls.n	80062b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	73fb      	strb	r3, [r7, #15]
        break;
 80062b6:	e005      	b.n	80062c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062b8:	4b2c      	ldr	r3, [pc, #176]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ef      	bne.n	80062a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d14a      	bne.n	8006360 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d111      	bne.n	80062f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062d0:	4b26      	ldr	r3, [pc, #152]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80062d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6892      	ldr	r2, [r2, #8]
 80062e0:	0211      	lsls	r1, r2, #8
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	68d2      	ldr	r2, [r2, #12]
 80062e6:	0912      	lsrs	r2, r2, #4
 80062e8:	0452      	lsls	r2, r2, #17
 80062ea:	430a      	orrs	r2, r1
 80062ec:	491f      	ldr	r1, [pc, #124]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	614b      	str	r3, [r1, #20]
 80062f2:	e011      	b.n	8006318 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062f4:	4b1d      	ldr	r3, [pc, #116]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80062fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6892      	ldr	r2, [r2, #8]
 8006304:	0211      	lsls	r1, r2, #8
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6912      	ldr	r2, [r2, #16]
 800630a:	0852      	lsrs	r2, r2, #1
 800630c:	3a01      	subs	r2, #1
 800630e:	0652      	lsls	r2, r2, #25
 8006310:	430a      	orrs	r2, r1
 8006312:	4916      	ldr	r1, [pc, #88]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006314:	4313      	orrs	r3, r2
 8006316:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006318:	4b14      	ldr	r3, [pc, #80]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a13      	ldr	r2, [pc, #76]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 800631e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006324:	f7fd f926 	bl	8003574 <HAL_GetTick>
 8006328:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800632a:	e009      	b.n	8006340 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800632c:	f7fd f922 	bl	8003574 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d902      	bls.n	8006340 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	73fb      	strb	r3, [r7, #15]
          break;
 800633e:	e005      	b.n	800634c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0ef      	beq.n	800632c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006352:	4b06      	ldr	r3, [pc, #24]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	4904      	ldr	r1, [pc, #16]	; (800636c <RCCEx_PLLSAI2_Config+0x1b8>)
 800635c:	4313      	orrs	r3, r2
 800635e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40021000 	.word	0x40021000

08006370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e095      	b.n	80064ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d108      	bne.n	800639c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006392:	d009      	beq.n	80063a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	61da      	str	r2, [r3, #28]
 800639a:	e005      	b.n	80063a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fb fcc4 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063e8:	d902      	bls.n	80063f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e002      	b.n	80063f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063fe:	d007      	beq.n	8006410 <HAL_SPI_Init+0xa0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006408:	d002      	beq.n	8006410 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	ea42 0103 	orr.w	r1, r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	0c1b      	lsrs	r3, r3, #16
 800646c:	f003 0204 	and.w	r2, r3, #4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800648c:	ea42 0103 	orr.w	r1, r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e01a      	b.n	80064fe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7fb fc97 	bl	8001e14 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b088      	sub	sp, #32
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	603b      	str	r3, [r7, #0]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_SPI_Transmit+0x22>
 8006524:	2302      	movs	r3, #2
 8006526:	e158      	b.n	80067da <HAL_SPI_Transmit+0x2d4>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006530:	f7fd f820 	bl	8003574 <HAL_GetTick>
 8006534:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b01      	cmp	r3, #1
 8006544:	d002      	beq.n	800654c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006546:	2302      	movs	r3, #2
 8006548:	77fb      	strb	r3, [r7, #31]
    goto error;
 800654a:	e13d      	b.n	80067c8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_SPI_Transmit+0x52>
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800655c:	e134      	b.n	80067c8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2203      	movs	r2, #3
 8006562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	88fa      	ldrh	r2, [r7, #6]
 800657c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065a8:	d10f      	bne.n	80065ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d007      	beq.n	80065e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065f0:	d94b      	bls.n	800668a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_SPI_Transmit+0xfa>
 80065fa:	8afb      	ldrh	r3, [r7, #22]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d13e      	bne.n	800667e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	881a      	ldrh	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	1c9a      	adds	r2, r3, #2
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006624:	e02b      	b.n	800667e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d112      	bne.n	800665a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	881a      	ldrh	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006658:	e011      	b.n	800667e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800665a:	f7fc ff8b 	bl	8003574 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d803      	bhi.n	8006672 <HAL_SPI_Transmit+0x16c>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d102      	bne.n	8006678 <HAL_SPI_Transmit+0x172>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800667c:	e0a4      	b.n	80067c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1ce      	bne.n	8006626 <HAL_SPI_Transmit+0x120>
 8006688:	e07c      	b.n	8006784 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_SPI_Transmit+0x192>
 8006692:	8afb      	ldrh	r3, [r7, #22]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d170      	bne.n	800677a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d912      	bls.n	80066c8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	881a      	ldrh	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	1c9a      	adds	r2, r3, #2
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b02      	subs	r3, #2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066c6:	e058      	b.n	800677a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80066ee:	e044      	b.n	800677a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d12b      	bne.n	8006756 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b01      	cmp	r3, #1
 8006706:	d912      	bls.n	800672e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	881a      	ldrh	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	1c9a      	adds	r2, r3, #2
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b02      	subs	r3, #2
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800672c:	e025      	b.n	800677a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	7812      	ldrb	r2, [r2, #0]
 800673a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006754:	e011      	b.n	800677a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006756:	f7fc ff0d 	bl	8003574 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d803      	bhi.n	800676e <HAL_SPI_Transmit+0x268>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676c:	d102      	bne.n	8006774 <HAL_SPI_Transmit+0x26e>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006778:	e026      	b.n	80067c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1b5      	bne.n	80066f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f941 	bl	8006a10 <SPI_EndRxTxTransaction>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e000      	b.n	80067c8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80067c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067f4:	f7fc febe 	bl	8003574 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	4413      	add	r3, r2
 8006802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006804:	f7fc feb6 	bl	8003574 <HAL_GetTick>
 8006808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800680a:	4b39      	ldr	r3, [pc, #228]	; (80068f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	015b      	lsls	r3, r3, #5
 8006810:	0d1b      	lsrs	r3, r3, #20
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	fb02 f303 	mul.w	r3, r2, r3
 8006818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800681a:	e054      	b.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	d050      	beq.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006824:	f7fc fea6 	bl	8003574 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	429a      	cmp	r2, r3
 8006832:	d902      	bls.n	800683a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d13d      	bne.n	80068b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006852:	d111      	bne.n	8006878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800685c:	d004      	beq.n	8006868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006866:	d107      	bne.n	8006878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006880:	d10f      	bne.n	80068a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e017      	b.n	80068e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4013      	ands	r3, r2
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	bf0c      	ite	eq
 80068d6:	2301      	moveq	r3, #1
 80068d8:	2300      	movne	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d19b      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000008 	.word	0x20000008

080068f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006902:	f7fc fe37 	bl	8003574 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	4413      	add	r3, r2
 8006910:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006912:	f7fc fe2f 	bl	8003574 <HAL_GetTick>
 8006916:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006918:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	00da      	lsls	r2, r3, #3
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	0d1b      	lsrs	r3, r3, #20
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006930:	e05f      	b.n	80069f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006938:	d106      	bne.n	8006948 <SPI_WaitFifoStateUntilTimeout+0x54>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d103      	bne.n	8006948 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d050      	beq.n	80069f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006950:	f7fc fe10 	bl	8003574 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	429a      	cmp	r2, r3
 800695e:	d902      	bls.n	8006966 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d13d      	bne.n	80069e2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800697e:	d111      	bne.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006988:	d004      	beq.n	8006994 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006992:	d107      	bne.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ac:	d10f      	bne.n	80069ce <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e010      	b.n	8006a04 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4013      	ands	r3, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d197      	bne.n	8006932 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3720      	adds	r7, #32
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20000008 	.word	0x20000008

08006a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f7ff ff63 	bl	80068f4 <SPI_WaitFifoStateUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a38:	f043 0220 	orr.w	r2, r3, #32
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e027      	b.n	8006a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2180      	movs	r1, #128	; 0x80
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff fec8 	bl	80067e4 <SPI_WaitFlagStateUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5e:	f043 0220 	orr.w	r2, r3, #32
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e014      	b.n	8006a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff ff3c 	bl	80068f4 <SPI_WaitFifoStateUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e000      	b.n	8006a94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e049      	b.n	8006b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fb f9ca 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f000 fe92 	bl	8007804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d001      	beq.n	8006b64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e047      	b.n	8006bf4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a23      	ldr	r2, [pc, #140]	; (8006c00 <HAL_TIM_Base_Start+0xb4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01d      	beq.n	8006bb2 <HAL_TIM_Base_Start+0x66>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7e:	d018      	beq.n	8006bb2 <HAL_TIM_Base_Start+0x66>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <HAL_TIM_Base_Start+0xb8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_TIM_Base_Start+0x66>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <HAL_TIM_Base_Start+0xbc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_TIM_Base_Start+0x66>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_TIM_Base_Start+0xc0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_TIM_Base_Start+0x66>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <HAL_TIM_Base_Start+0xc4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIM_Base_Start+0x66>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <HAL_TIM_Base_Start+0xc8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d115      	bne.n	8006bde <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <HAL_TIM_Base_Start+0xcc>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b06      	cmp	r3, #6
 8006bc2:	d015      	beq.n	8006bf0 <HAL_TIM_Base_Start+0xa4>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bca:	d011      	beq.n	8006bf0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bdc:	e008      	b.n	8006bf0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0201 	orr.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e000      	b.n	8006bf2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40013400 	.word	0x40013400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	00010007 	.word	0x00010007

08006c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e049      	b.n	8006cc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f841 	bl	8006cca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f000 fdd2 	bl	8007804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <HAL_TIM_PWM_Start_IT+0x24>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e03c      	b.n	8006d7e <HAL_TIM_PWM_Start_IT+0x9e>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d109      	bne.n	8006d1e <HAL_TIM_PWM_Start_IT+0x3e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	bf14      	ite	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	2300      	moveq	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	e02f      	b.n	8006d7e <HAL_TIM_PWM_Start_IT+0x9e>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d109      	bne.n	8006d38 <HAL_TIM_PWM_Start_IT+0x58>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e022      	b.n	8006d7e <HAL_TIM_PWM_Start_IT+0x9e>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d109      	bne.n	8006d52 <HAL_TIM_PWM_Start_IT+0x72>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	e015      	b.n	8006d7e <HAL_TIM_PWM_Start_IT+0x9e>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d109      	bne.n	8006d6c <HAL_TIM_PWM_Start_IT+0x8c>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	e008      	b.n	8006d7e <HAL_TIM_PWM_Start_IT+0x9e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	bf14      	ite	ne
 8006d78:	2301      	movne	r3, #1
 8006d7a:	2300      	moveq	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e0e2      	b.n	8006f4c <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_PWM_Start_IT+0xb6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d94:	e023      	b.n	8006dde <HAL_TIM_PWM_Start_IT+0xfe>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_PWM_Start_IT+0xc6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da4:	e01b      	b.n	8006dde <HAL_TIM_PWM_Start_IT+0xfe>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_PWM_Start_IT+0xd6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db4:	e013      	b.n	8006dde <HAL_TIM_PWM_Start_IT+0xfe>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b0c      	cmp	r3, #12
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_PWM_Start_IT+0xe6>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dc4:	e00b      	b.n	8006dde <HAL_TIM_PWM_Start_IT+0xfe>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_PWM_Start_IT+0xf6>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd4:	e003      	b.n	8006dde <HAL_TIM_PWM_Start_IT+0xfe>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	d841      	bhi.n	8006e68 <HAL_TIM_PWM_Start_IT+0x188>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <HAL_TIM_PWM_Start_IT+0x10c>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e69 	.word	0x08006e69
 8006df4:	08006e69 	.word	0x08006e69
 8006df8:	08006e69 	.word	0x08006e69
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e69 	.word	0x08006e69
 8006e04:	08006e69 	.word	0x08006e69
 8006e08:	08006e69 	.word	0x08006e69
 8006e0c:	08006e45 	.word	0x08006e45
 8006e10:	08006e69 	.word	0x08006e69
 8006e14:	08006e69 	.word	0x08006e69
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	08006e57 	.word	0x08006e57
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0202 	orr.w	r2, r2, #2
 8006e2e:	60da      	str	r2, [r3, #12]
      break;
 8006e30:	e01b      	b.n	8006e6a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0204 	orr.w	r2, r2, #4
 8006e40:	60da      	str	r2, [r3, #12]
      break;
 8006e42:	e012      	b.n	8006e6a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0208 	orr.w	r2, r2, #8
 8006e52:	60da      	str	r2, [r3, #12]
      break;
 8006e54:	e009      	b.n	8006e6a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0210 	orr.w	r2, r2, #16
 8006e64:	60da      	str	r2, [r3, #12]
      break;
 8006e66:	e000      	b.n	8006e6a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8006e68:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f960 	bl	8008138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a35      	ldr	r2, [pc, #212]	; (8006f54 <HAL_TIM_PWM_Start_IT+0x274>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_TIM_PWM_Start_IT+0x1ca>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a34      	ldr	r2, [pc, #208]	; (8006f58 <HAL_TIM_PWM_Start_IT+0x278>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_TIM_PWM_Start_IT+0x1ca>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a32      	ldr	r2, [pc, #200]	; (8006f5c <HAL_TIM_PWM_Start_IT+0x27c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_TIM_PWM_Start_IT+0x1ca>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a31      	ldr	r2, [pc, #196]	; (8006f60 <HAL_TIM_PWM_Start_IT+0x280>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_TIM_PWM_Start_IT+0x1ca>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2f      	ldr	r2, [pc, #188]	; (8006f64 <HAL_TIM_PWM_Start_IT+0x284>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_PWM_Start_IT+0x1ce>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <HAL_TIM_PWM_Start_IT+0x274>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d01d      	beq.n	8006f0a <HAL_TIM_PWM_Start_IT+0x22a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed6:	d018      	beq.n	8006f0a <HAL_TIM_PWM_Start_IT+0x22a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a22      	ldr	r2, [pc, #136]	; (8006f68 <HAL_TIM_PWM_Start_IT+0x288>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <HAL_TIM_PWM_Start_IT+0x22a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a21      	ldr	r2, [pc, #132]	; (8006f6c <HAL_TIM_PWM_Start_IT+0x28c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <HAL_TIM_PWM_Start_IT+0x22a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <HAL_TIM_PWM_Start_IT+0x290>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIM_PWM_Start_IT+0x22a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <HAL_TIM_PWM_Start_IT+0x278>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIM_PWM_Start_IT+0x22a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <HAL_TIM_PWM_Start_IT+0x27c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d115      	bne.n	8006f36 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <HAL_TIM_PWM_Start_IT+0x294>)
 8006f12:	4013      	ands	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b06      	cmp	r3, #6
 8006f1a:	d015      	beq.n	8006f48 <HAL_TIM_PWM_Start_IT+0x268>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f22:	d011      	beq.n	8006f48 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f34:	e008      	b.n	8006f48 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e000      	b.n	8006f4a <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800
 8006f68:	40000400 	.word	0x40000400
 8006f6c:	40000800 	.word	0x40000800
 8006f70:	40000c00 	.word	0x40000c00
 8006f74:	00010007 	.word	0x00010007

08006f78 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b0c      	cmp	r3, #12
 8006f86:	d841      	bhi.n	800700c <HAL_TIM_PWM_Stop_IT+0x94>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <HAL_TIM_PWM_Stop_IT+0x18>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fc5 	.word	0x08006fc5
 8006f94:	0800700d 	.word	0x0800700d
 8006f98:	0800700d 	.word	0x0800700d
 8006f9c:	0800700d 	.word	0x0800700d
 8006fa0:	08006fd7 	.word	0x08006fd7
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	0800700d 	.word	0x0800700d
 8006fb0:	08006fe9 	.word	0x08006fe9
 8006fb4:	0800700d 	.word	0x0800700d
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	0800700d 	.word	0x0800700d
 8006fc0:	08006ffb 	.word	0x08006ffb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0202 	bic.w	r2, r2, #2
 8006fd2:	60da      	str	r2, [r3, #12]
      break;
 8006fd4:	e01b      	b.n	800700e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0204 	bic.w	r2, r2, #4
 8006fe4:	60da      	str	r2, [r3, #12]
      break;
 8006fe6:	e012      	b.n	800700e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0208 	bic.w	r2, r2, #8
 8006ff6:	60da      	str	r2, [r3, #12]
      break;
 8006ff8:	e009      	b.n	800700e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0210 	bic.w	r2, r2, #16
 8007008:	60da      	str	r2, [r3, #12]
      break;
 800700a:	e000      	b.n	800700e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800700c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2200      	movs	r2, #0
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f001 f88e 	bl	8008138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a3e      	ldr	r2, [pc, #248]	; (800711c <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_TIM_PWM_Stop_IT+0xd6>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a3d      	ldr	r2, [pc, #244]	; (8007120 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_TIM_PWM_Stop_IT+0xd6>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a3b      	ldr	r2, [pc, #236]	; (8007124 <HAL_TIM_PWM_Stop_IT+0x1ac>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_TIM_PWM_Stop_IT+0xd6>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a3a      	ldr	r2, [pc, #232]	; (8007128 <HAL_TIM_PWM_Stop_IT+0x1b0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_TIM_PWM_Stop_IT+0xd6>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a38      	ldr	r2, [pc, #224]	; (800712c <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d101      	bne.n	8007052 <HAL_TIM_PWM_Stop_IT+0xda>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <HAL_TIM_PWM_Stop_IT+0xdc>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d017      	beq.n	8007088 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a1a      	ldr	r2, [r3, #32]
 800705e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007062:	4013      	ands	r3, r2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10f      	bne.n	8007088 <HAL_TIM_PWM_Stop_IT+0x110>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	f240 4344 	movw	r3, #1092	; 0x444
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d107      	bne.n	8007088 <HAL_TIM_PWM_Stop_IT+0x110>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007086:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10f      	bne.n	80070b8 <HAL_TIM_PWM_Stop_IT+0x140>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	f240 4344 	movw	r3, #1092	; 0x444
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_TIM_PWM_Stop_IT+0x140>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d104      	bne.n	80070c8 <HAL_TIM_PWM_Stop_IT+0x150>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c6:	e023      	b.n	8007110 <HAL_TIM_PWM_Stop_IT+0x198>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d104      	bne.n	80070d8 <HAL_TIM_PWM_Stop_IT+0x160>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070d6:	e01b      	b.n	8007110 <HAL_TIM_PWM_Stop_IT+0x198>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d104      	bne.n	80070e8 <HAL_TIM_PWM_Stop_IT+0x170>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070e6:	e013      	b.n	8007110 <HAL_TIM_PWM_Stop_IT+0x198>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	2b0c      	cmp	r3, #12
 80070ec:	d104      	bne.n	80070f8 <HAL_TIM_PWM_Stop_IT+0x180>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070f6:	e00b      	b.n	8007110 <HAL_TIM_PWM_Stop_IT+0x198>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d104      	bne.n	8007108 <HAL_TIM_PWM_Stop_IT+0x190>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007106:	e003      	b.n	8007110 <HAL_TIM_PWM_Stop_IT+0x198>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40012c00 	.word	0x40012c00
 8007120:	40013400 	.word	0x40013400
 8007124:	40014000 	.word	0x40014000
 8007128:	40014400 	.word	0x40014400
 800712c:	40014800 	.word	0x40014800

08007130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b02      	cmp	r3, #2
 8007144:	d122      	bne.n	800718c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b02      	cmp	r3, #2
 8007152:	d11b      	bne.n	800718c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0202 	mvn.w	r2, #2
 800715c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fb28 	bl	80077c8 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fb1a 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fb2b 	bl	80077dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b04      	cmp	r3, #4
 8007198:	d122      	bne.n	80071e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d11b      	bne.n	80071e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0204 	mvn.w	r2, #4
 80071b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2202      	movs	r2, #2
 80071b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fafe 	bl	80077c8 <HAL_TIM_IC_CaptureCallback>
 80071cc:	e005      	b.n	80071da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 faf0 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fb01 	bl	80077dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d122      	bne.n	8007234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d11b      	bne.n	8007234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0208 	mvn.w	r2, #8
 8007204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2204      	movs	r2, #4
 800720a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fad4 	bl	80077c8 <HAL_TIM_IC_CaptureCallback>
 8007220:	e005      	b.n	800722e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fac6 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fad7 	bl	80077dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0310 	and.w	r3, r3, #16
 800723e:	2b10      	cmp	r3, #16
 8007240:	d122      	bne.n	8007288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b10      	cmp	r3, #16
 800724e:	d11b      	bne.n	8007288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0210 	mvn.w	r2, #16
 8007258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2208      	movs	r2, #8
 800725e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 faaa 	bl	80077c8 <HAL_TIM_IC_CaptureCallback>
 8007274:	e005      	b.n	8007282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa9c 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 faad 	bl	80077dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b01      	cmp	r3, #1
 8007294:	d10e      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d107      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0201 	mvn.w	r2, #1
 80072ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa76 	bl	80077a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072be:	2b80      	cmp	r3, #128	; 0x80
 80072c0:	d10e      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072cc:	2b80      	cmp	r3, #128	; 0x80
 80072ce:	d107      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 ffe4 	bl	80082a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ee:	d10e      	bne.n	800730e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fa:	2b80      	cmp	r3, #128	; 0x80
 80072fc:	d107      	bne.n	800730e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 ffd7 	bl	80082bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d10e      	bne.n	800733a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d107      	bne.n	800733a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fa5b 	bl	80077f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b20      	cmp	r3, #32
 8007346:	d10e      	bne.n	8007366 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b20      	cmp	r3, #32
 8007354:	d107      	bne.n	8007366 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f06f 0220 	mvn.w	r2, #32
 800735e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 ff97 	bl	8008294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007386:	2302      	movs	r3, #2
 8007388:	e0fd      	b.n	8007586 <HAL_TIM_PWM_ConfigChannel+0x216>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b14      	cmp	r3, #20
 8007396:	f200 80f0 	bhi.w	800757a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	0800757b 	.word	0x0800757b
 80073a8:	0800757b 	.word	0x0800757b
 80073ac:	0800757b 	.word	0x0800757b
 80073b0:	08007435 	.word	0x08007435
 80073b4:	0800757b 	.word	0x0800757b
 80073b8:	0800757b 	.word	0x0800757b
 80073bc:	0800757b 	.word	0x0800757b
 80073c0:	08007477 	.word	0x08007477
 80073c4:	0800757b 	.word	0x0800757b
 80073c8:	0800757b 	.word	0x0800757b
 80073cc:	0800757b 	.word	0x0800757b
 80073d0:	080074b7 	.word	0x080074b7
 80073d4:	0800757b 	.word	0x0800757b
 80073d8:	0800757b 	.word	0x0800757b
 80073dc:	0800757b 	.word	0x0800757b
 80073e0:	080074f9 	.word	0x080074f9
 80073e4:	0800757b 	.word	0x0800757b
 80073e8:	0800757b 	.word	0x0800757b
 80073ec:	0800757b 	.word	0x0800757b
 80073f0:	08007539 	.word	0x08007539
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fa9c 	bl	8007938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0208 	orr.w	r2, r2, #8
 800740e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0204 	bic.w	r2, r2, #4
 800741e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6999      	ldr	r1, [r3, #24]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	619a      	str	r2, [r3, #24]
      break;
 8007432:	e0a3      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fb0c 	bl	8007a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800744e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6999      	ldr	r1, [r3, #24]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	021a      	lsls	r2, r3, #8
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	619a      	str	r2, [r3, #24]
      break;
 8007474:	e082      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fb75 	bl	8007b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0208 	orr.w	r2, r2, #8
 8007490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69da      	ldr	r2, [r3, #28]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0204 	bic.w	r2, r2, #4
 80074a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69d9      	ldr	r1, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	61da      	str	r2, [r3, #28]
      break;
 80074b4:	e062      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fbdd 	bl	8007c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69d9      	ldr	r1, [r3, #28]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	021a      	lsls	r2, r3, #8
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	61da      	str	r2, [r3, #28]
      break;
 80074f6:	e041      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fc26 	bl	8007d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0208 	orr.w	r2, r2, #8
 8007512:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0204 	bic.w	r2, r2, #4
 8007522:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007536:	e021      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fc6a 	bl	8007e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007562:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	021a      	lsls	r2, r3, #8
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007578:	e000      	b.n	800757c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800757a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop

08007590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_TIM_ConfigClockSource+0x18>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e0b5      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x184>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e4:	d03e      	beq.n	8007664 <HAL_TIM_ConfigClockSource+0xd4>
 80075e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ea:	f200 8087 	bhi.w	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 80075ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f2:	f000 8085 	beq.w	8007700 <HAL_TIM_ConfigClockSource+0x170>
 80075f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fa:	d87f      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 80075fc:	2b70      	cmp	r3, #112	; 0x70
 80075fe:	d01a      	beq.n	8007636 <HAL_TIM_ConfigClockSource+0xa6>
 8007600:	2b70      	cmp	r3, #112	; 0x70
 8007602:	d87b      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 8007604:	2b60      	cmp	r3, #96	; 0x60
 8007606:	d050      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x11a>
 8007608:	2b60      	cmp	r3, #96	; 0x60
 800760a:	d877      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 800760c:	2b50      	cmp	r3, #80	; 0x50
 800760e:	d03c      	beq.n	800768a <HAL_TIM_ConfigClockSource+0xfa>
 8007610:	2b50      	cmp	r3, #80	; 0x50
 8007612:	d873      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 8007614:	2b40      	cmp	r3, #64	; 0x40
 8007616:	d058      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0x13a>
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d86f      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 800761c:	2b30      	cmp	r3, #48	; 0x30
 800761e:	d064      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x15a>
 8007620:	2b30      	cmp	r3, #48	; 0x30
 8007622:	d86b      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 8007624:	2b20      	cmp	r3, #32
 8007626:	d060      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x15a>
 8007628:	2b20      	cmp	r3, #32
 800762a:	d867      	bhi.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d05c      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x15a>
 8007630:	2b10      	cmp	r3, #16
 8007632:	d05a      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007634:	e062      	b.n	80076fc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	6899      	ldr	r1, [r3, #8]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f000 fd57 	bl	80080f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007658:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	609a      	str	r2, [r3, #8]
      break;
 8007662:	e04e      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6818      	ldr	r0, [r3, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	6899      	ldr	r1, [r3, #8]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f000 fd40 	bl	80080f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007686:	609a      	str	r2, [r3, #8]
      break;
 8007688:	e03b      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6859      	ldr	r1, [r3, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	461a      	mov	r2, r3
 8007698:	f000 fcb4 	bl	8008004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2150      	movs	r1, #80	; 0x50
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fd0d 	bl	80080c2 <TIM_ITRx_SetConfig>
      break;
 80076a8:	e02b      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6859      	ldr	r1, [r3, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f000 fcd3 	bl	8008062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2160      	movs	r1, #96	; 0x60
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fcfd 	bl	80080c2 <TIM_ITRx_SetConfig>
      break;
 80076c8:	e01b      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6859      	ldr	r1, [r3, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f000 fc94 	bl	8008004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2140      	movs	r1, #64	; 0x40
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fced 	bl	80080c2 <TIM_ITRx_SetConfig>
      break;
 80076e8:	e00b      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4619      	mov	r1, r3
 80076f4:	4610      	mov	r0, r2
 80076f6:	f000 fce4 	bl	80080c2 <TIM_ITRx_SetConfig>
        break;
 80076fa:	e002      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80076fc:	bf00      	nop
 80076fe:	e000      	b.n	8007702 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007700:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007730:	2302      	movs	r3, #2
 8007732:	e031      	b.n	8007798 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fbcc 	bl	8007ee4 <TIM_SlaveTimer_SetConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e018      	b.n	8007798 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007774:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007784:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a40      	ldr	r2, [pc, #256]	; (8007918 <TIM_Base_SetConfig+0x114>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <TIM_Base_SetConfig+0x40>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007822:	d00f      	beq.n	8007844 <TIM_Base_SetConfig+0x40>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a3d      	ldr	r2, [pc, #244]	; (800791c <TIM_Base_SetConfig+0x118>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00b      	beq.n	8007844 <TIM_Base_SetConfig+0x40>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a3c      	ldr	r2, [pc, #240]	; (8007920 <TIM_Base_SetConfig+0x11c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d007      	beq.n	8007844 <TIM_Base_SetConfig+0x40>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a3b      	ldr	r2, [pc, #236]	; (8007924 <TIM_Base_SetConfig+0x120>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d003      	beq.n	8007844 <TIM_Base_SetConfig+0x40>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a3a      	ldr	r2, [pc, #232]	; (8007928 <TIM_Base_SetConfig+0x124>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d108      	bne.n	8007856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a2f      	ldr	r2, [pc, #188]	; (8007918 <TIM_Base_SetConfig+0x114>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d01f      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007864:	d01b      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a2c      	ldr	r2, [pc, #176]	; (800791c <TIM_Base_SetConfig+0x118>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d017      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a2b      	ldr	r2, [pc, #172]	; (8007920 <TIM_Base_SetConfig+0x11c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a2a      	ldr	r2, [pc, #168]	; (8007924 <TIM_Base_SetConfig+0x120>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00f      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a29      	ldr	r2, [pc, #164]	; (8007928 <TIM_Base_SetConfig+0x124>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00b      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a28      	ldr	r2, [pc, #160]	; (800792c <TIM_Base_SetConfig+0x128>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a27      	ldr	r2, [pc, #156]	; (8007930 <TIM_Base_SetConfig+0x12c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d003      	beq.n	800789e <TIM_Base_SetConfig+0x9a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a26      	ldr	r2, [pc, #152]	; (8007934 <TIM_Base_SetConfig+0x130>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d108      	bne.n	80078b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a10      	ldr	r2, [pc, #64]	; (8007918 <TIM_Base_SetConfig+0x114>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00f      	beq.n	80078fc <TIM_Base_SetConfig+0xf8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a12      	ldr	r2, [pc, #72]	; (8007928 <TIM_Base_SetConfig+0x124>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00b      	beq.n	80078fc <TIM_Base_SetConfig+0xf8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a11      	ldr	r2, [pc, #68]	; (800792c <TIM_Base_SetConfig+0x128>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d007      	beq.n	80078fc <TIM_Base_SetConfig+0xf8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <TIM_Base_SetConfig+0x12c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_Base_SetConfig+0xf8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a0f      	ldr	r2, [pc, #60]	; (8007934 <TIM_Base_SetConfig+0x130>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d103      	bne.n	8007904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	615a      	str	r2, [r3, #20]
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40000400 	.word	0x40000400
 8007920:	40000800 	.word	0x40000800
 8007924:	40000c00 	.word	0x40000c00
 8007928:	40013400 	.word	0x40013400
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800

08007938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f023 0201 	bic.w	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f023 0302 	bic.w	r3, r3, #2
 8007984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a2c      	ldr	r2, [pc, #176]	; (8007a44 <TIM_OC1_SetConfig+0x10c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00f      	beq.n	80079b8 <TIM_OC1_SetConfig+0x80>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a2b      	ldr	r2, [pc, #172]	; (8007a48 <TIM_OC1_SetConfig+0x110>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00b      	beq.n	80079b8 <TIM_OC1_SetConfig+0x80>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a2a      	ldr	r2, [pc, #168]	; (8007a4c <TIM_OC1_SetConfig+0x114>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_OC1_SetConfig+0x80>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a29      	ldr	r2, [pc, #164]	; (8007a50 <TIM_OC1_SetConfig+0x118>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_OC1_SetConfig+0x80>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a28      	ldr	r2, [pc, #160]	; (8007a54 <TIM_OC1_SetConfig+0x11c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d10c      	bne.n	80079d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f023 0308 	bic.w	r3, r3, #8
 80079be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f023 0304 	bic.w	r3, r3, #4
 80079d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <TIM_OC1_SetConfig+0x10c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00f      	beq.n	80079fa <TIM_OC1_SetConfig+0xc2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1a      	ldr	r2, [pc, #104]	; (8007a48 <TIM_OC1_SetConfig+0x110>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00b      	beq.n	80079fa <TIM_OC1_SetConfig+0xc2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a19      	ldr	r2, [pc, #100]	; (8007a4c <TIM_OC1_SetConfig+0x114>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d007      	beq.n	80079fa <TIM_OC1_SetConfig+0xc2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a18      	ldr	r2, [pc, #96]	; (8007a50 <TIM_OC1_SetConfig+0x118>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_OC1_SetConfig+0xc2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a17      	ldr	r2, [pc, #92]	; (8007a54 <TIM_OC1_SetConfig+0x11c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d111      	bne.n	8007a1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	621a      	str	r2, [r3, #32]
}
 8007a38:	bf00      	nop
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40013400 	.word	0x40013400
 8007a4c:	40014000 	.word	0x40014000
 8007a50:	40014400 	.word	0x40014400
 8007a54:	40014800 	.word	0x40014800

08007a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	f023 0210 	bic.w	r2, r3, #16
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f023 0320 	bic.w	r3, r3, #32
 8007aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a28      	ldr	r2, [pc, #160]	; (8007b58 <TIM_OC2_SetConfig+0x100>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <TIM_OC2_SetConfig+0x6c>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a27      	ldr	r2, [pc, #156]	; (8007b5c <TIM_OC2_SetConfig+0x104>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d10d      	bne.n	8007ae0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <TIM_OC2_SetConfig+0x100>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00f      	beq.n	8007b08 <TIM_OC2_SetConfig+0xb0>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <TIM_OC2_SetConfig+0x104>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00b      	beq.n	8007b08 <TIM_OC2_SetConfig+0xb0>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a1b      	ldr	r2, [pc, #108]	; (8007b60 <TIM_OC2_SetConfig+0x108>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d007      	beq.n	8007b08 <TIM_OC2_SetConfig+0xb0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <TIM_OC2_SetConfig+0x10c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_OC2_SetConfig+0xb0>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a19      	ldr	r2, [pc, #100]	; (8007b68 <TIM_OC2_SetConfig+0x110>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d113      	bne.n	8007b30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	621a      	str	r2, [r3, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	40013400 	.word	0x40013400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	40014800 	.word	0x40014800

08007b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <TIM_OC3_SetConfig+0xfc>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_OC3_SetConfig+0x6a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <TIM_OC3_SetConfig+0x100>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d10d      	bne.n	8007bf2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1c      	ldr	r2, [pc, #112]	; (8007c68 <TIM_OC3_SetConfig+0xfc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00f      	beq.n	8007c1a <TIM_OC3_SetConfig+0xae>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1b      	ldr	r2, [pc, #108]	; (8007c6c <TIM_OC3_SetConfig+0x100>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00b      	beq.n	8007c1a <TIM_OC3_SetConfig+0xae>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a1a      	ldr	r2, [pc, #104]	; (8007c70 <TIM_OC3_SetConfig+0x104>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_OC3_SetConfig+0xae>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a19      	ldr	r2, [pc, #100]	; (8007c74 <TIM_OC3_SetConfig+0x108>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC3_SetConfig+0xae>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a18      	ldr	r2, [pc, #96]	; (8007c78 <TIM_OC3_SetConfig+0x10c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d113      	bne.n	8007c42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40013400 	.word	0x40013400
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400
 8007c78:	40014800 	.word	0x40014800

08007c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	031b      	lsls	r3, r3, #12
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a18      	ldr	r2, [pc, #96]	; (8007d3c <TIM_OC4_SetConfig+0xc0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00f      	beq.n	8007d00 <TIM_OC4_SetConfig+0x84>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a17      	ldr	r2, [pc, #92]	; (8007d40 <TIM_OC4_SetConfig+0xc4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d00b      	beq.n	8007d00 <TIM_OC4_SetConfig+0x84>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <TIM_OC4_SetConfig+0xc8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d007      	beq.n	8007d00 <TIM_OC4_SetConfig+0x84>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <TIM_OC4_SetConfig+0xcc>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <TIM_OC4_SetConfig+0x84>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <TIM_OC4_SetConfig+0xd0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d109      	bne.n	8007d14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	019b      	lsls	r3, r3, #6
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	621a      	str	r2, [r3, #32]
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40012c00 	.word	0x40012c00
 8007d40:	40013400 	.word	0x40013400
 8007d44:	40014000 	.word	0x40014000
 8007d48:	40014400 	.word	0x40014400
 8007d4c:	40014800 	.word	0x40014800

08007d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <TIM_OC5_SetConfig+0xb4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00f      	beq.n	8007dca <TIM_OC5_SetConfig+0x7a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a16      	ldr	r2, [pc, #88]	; (8007e08 <TIM_OC5_SetConfig+0xb8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00b      	beq.n	8007dca <TIM_OC5_SetConfig+0x7a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a15      	ldr	r2, [pc, #84]	; (8007e0c <TIM_OC5_SetConfig+0xbc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d007      	beq.n	8007dca <TIM_OC5_SetConfig+0x7a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a14      	ldr	r2, [pc, #80]	; (8007e10 <TIM_OC5_SetConfig+0xc0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_OC5_SetConfig+0x7a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a13      	ldr	r2, [pc, #76]	; (8007e14 <TIM_OC5_SetConfig+0xc4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d109      	bne.n	8007dde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	621a      	str	r2, [r3, #32]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	40012c00 	.word	0x40012c00
 8007e08:	40013400 	.word	0x40013400
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800

08007e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	051b      	lsls	r3, r3, #20
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <TIM_OC6_SetConfig+0xb8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00f      	beq.n	8007e94 <TIM_OC6_SetConfig+0x7c>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a17      	ldr	r2, [pc, #92]	; (8007ed4 <TIM_OC6_SetConfig+0xbc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00b      	beq.n	8007e94 <TIM_OC6_SetConfig+0x7c>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <TIM_OC6_SetConfig+0xc0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d007      	beq.n	8007e94 <TIM_OC6_SetConfig+0x7c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a15      	ldr	r2, [pc, #84]	; (8007edc <TIM_OC6_SetConfig+0xc4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d003      	beq.n	8007e94 <TIM_OC6_SetConfig+0x7c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a14      	ldr	r2, [pc, #80]	; (8007ee0 <TIM_OC6_SetConfig+0xc8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d109      	bne.n	8007ea8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	029b      	lsls	r3, r3, #10
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40012c00 	.word	0x40012c00
 8007ed4:	40013400 	.word	0x40013400
 8007ed8:	40014000 	.word	0x40014000
 8007edc:	40014400 	.word	0x40014400
 8007ee0:	40014800 	.word	0x40014800

08007ee4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f0e:	f023 0307 	bic.w	r3, r3, #7
 8007f12:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	2b70      	cmp	r3, #112	; 0x70
 8007f2c:	d01a      	beq.n	8007f64 <TIM_SlaveTimer_SetConfig+0x80>
 8007f2e:	2b70      	cmp	r3, #112	; 0x70
 8007f30:	d860      	bhi.n	8007ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8007f32:	2b60      	cmp	r3, #96	; 0x60
 8007f34:	d054      	beq.n	8007fe0 <TIM_SlaveTimer_SetConfig+0xfc>
 8007f36:	2b60      	cmp	r3, #96	; 0x60
 8007f38:	d85c      	bhi.n	8007ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8007f3a:	2b50      	cmp	r3, #80	; 0x50
 8007f3c:	d046      	beq.n	8007fcc <TIM_SlaveTimer_SetConfig+0xe8>
 8007f3e:	2b50      	cmp	r3, #80	; 0x50
 8007f40:	d858      	bhi.n	8007ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8007f42:	2b40      	cmp	r3, #64	; 0x40
 8007f44:	d019      	beq.n	8007f7a <TIM_SlaveTimer_SetConfig+0x96>
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d854      	bhi.n	8007ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8007f4a:	2b30      	cmp	r3, #48	; 0x30
 8007f4c:	d054      	beq.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x114>
 8007f4e:	2b30      	cmp	r3, #48	; 0x30
 8007f50:	d850      	bhi.n	8007ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d050      	beq.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x114>
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d84c      	bhi.n	8007ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d04c      	beq.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x114>
 8007f5e:	2b10      	cmp	r3, #16
 8007f60:	d04a      	beq.n	8007ff8 <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8007f62:	e047      	b.n	8007ff4 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68d9      	ldr	r1, [r3, #12]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f000 f8c0 	bl	80080f8 <TIM_ETR_SetConfig>
      break;
 8007f78:	e03f      	b.n	8007ffa <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d101      	bne.n	8007f86 <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e03a      	b.n	8007ffc <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6a1a      	ldr	r2, [r3, #32]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	621a      	str	r2, [r3, #32]
      break;
 8007fca:	e016      	b.n	8007ffa <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	6899      	ldr	r1, [r3, #8]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f000 f813 	bl	8008004 <TIM_TI1_ConfigInputStage>
      break;
 8007fde:	e00c      	b.n	8007ffa <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	6899      	ldr	r1, [r3, #8]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	461a      	mov	r2, r3
 8007fee:	f000 f838 	bl	8008062 <TIM_TI2_ConfigInputStage>
      break;
 8007ff2:	e002      	b.n	8007ffa <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e000      	b.n	8007ffa <TIM_SlaveTimer_SetConfig+0x116>
        break;
 8007ff8:	bf00      	nop
  }
  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	f023 0201 	bic.w	r2, r3, #1
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800802e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f023 030a 	bic.w	r3, r3, #10
 8008040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4313      	orrs	r3, r2
 8008048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008062:	b480      	push	{r7}
 8008064:	b087      	sub	sp, #28
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	f023 0210 	bic.w	r2, r3, #16
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800808c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	031b      	lsls	r3, r3, #12
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800809e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b085      	sub	sp, #20
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	f043 0307 	orr.w	r3, r3, #7
 80080e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	609a      	str	r2, [r3, #8]
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	021a      	lsls	r2, r3, #8
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	431a      	orrs	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4313      	orrs	r3, r2
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	609a      	str	r2, [r3, #8]
}
 800812c:	bf00      	nop
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	2201      	movs	r2, #1
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1a      	ldr	r2, [r3, #32]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	43db      	mvns	r3, r3
 800815a:	401a      	ands	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1a      	ldr	r2, [r3, #32]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f003 031f 	and.w	r3, r3, #31
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	fa01 f303 	lsl.w	r3, r1, r3
 8008170:	431a      	orrs	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	621a      	str	r2, [r3, #32]
}
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008198:	2302      	movs	r3, #2
 800819a:	e068      	b.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2e      	ldr	r2, [pc, #184]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2d      	ldr	r2, [pc, #180]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d108      	bne.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1e      	ldr	r2, [pc, #120]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d01d      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820e:	d018      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d013      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1a      	ldr	r2, [pc, #104]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00e      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a18      	ldr	r2, [pc, #96]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d009      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a13      	ldr	r2, [pc, #76]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d004      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a14      	ldr	r2, [pc, #80]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d10c      	bne.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	4313      	orrs	r3, r2
 8008252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	40012c00 	.word	0x40012c00
 8008280:	40013400 	.word	0x40013400
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	40014000 	.word	0x40014000

08008294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e040      	b.n	8008364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7f9 fe46 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2224      	movs	r2, #36	; 0x24
 80082fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0201 	bic.w	r2, r2, #1
 800830c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f82c 	bl	800836c <UART_SetConfig>
 8008314:	4603      	mov	r3, r0
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e022      	b.n	8008364 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 faaa 	bl	8008880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800833a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800834a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fb31 	bl	80089c4 <UART_CheckIdleState>
 8008362:	4603      	mov	r3, r0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	4313      	orrs	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4bad      	ldr	r3, [pc, #692]	; (800864c <UART_SetConfig+0x2e0>)
 8008398:	4013      	ands	r3, r2
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	69f9      	ldr	r1, [r7, #28]
 80083a0:	430b      	orrs	r3, r1
 80083a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4aa2      	ldr	r2, [pc, #648]	; (8008650 <UART_SetConfig+0x2e4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d004      	beq.n	80083d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a99      	ldr	r2, [pc, #612]	; (8008654 <UART_SetConfig+0x2e8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d121      	bne.n	8008436 <UART_SetConfig+0xca>
 80083f2:	4b99      	ldr	r3, [pc, #612]	; (8008658 <UART_SetConfig+0x2ec>)
 80083f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d817      	bhi.n	8008430 <UART_SetConfig+0xc4>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0x9c>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	08008419 	.word	0x08008419
 800840c:	08008425 	.word	0x08008425
 8008410:	0800841f 	.word	0x0800841f
 8008414:	0800842b 	.word	0x0800842b
 8008418:	2301      	movs	r3, #1
 800841a:	76fb      	strb	r3, [r7, #27]
 800841c:	e0e7      	b.n	80085ee <UART_SetConfig+0x282>
 800841e:	2302      	movs	r3, #2
 8008420:	76fb      	strb	r3, [r7, #27]
 8008422:	e0e4      	b.n	80085ee <UART_SetConfig+0x282>
 8008424:	2304      	movs	r3, #4
 8008426:	76fb      	strb	r3, [r7, #27]
 8008428:	e0e1      	b.n	80085ee <UART_SetConfig+0x282>
 800842a:	2308      	movs	r3, #8
 800842c:	76fb      	strb	r3, [r7, #27]
 800842e:	e0de      	b.n	80085ee <UART_SetConfig+0x282>
 8008430:	2310      	movs	r3, #16
 8008432:	76fb      	strb	r3, [r7, #27]
 8008434:	e0db      	b.n	80085ee <UART_SetConfig+0x282>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a88      	ldr	r2, [pc, #544]	; (800865c <UART_SetConfig+0x2f0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d132      	bne.n	80084a6 <UART_SetConfig+0x13a>
 8008440:	4b85      	ldr	r3, [pc, #532]	; (8008658 <UART_SetConfig+0x2ec>)
 8008442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008446:	f003 030c 	and.w	r3, r3, #12
 800844a:	2b0c      	cmp	r3, #12
 800844c:	d828      	bhi.n	80084a0 <UART_SetConfig+0x134>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <UART_SetConfig+0xe8>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008489 	.word	0x08008489
 8008458:	080084a1 	.word	0x080084a1
 800845c:	080084a1 	.word	0x080084a1
 8008460:	080084a1 	.word	0x080084a1
 8008464:	08008495 	.word	0x08008495
 8008468:	080084a1 	.word	0x080084a1
 800846c:	080084a1 	.word	0x080084a1
 8008470:	080084a1 	.word	0x080084a1
 8008474:	0800848f 	.word	0x0800848f
 8008478:	080084a1 	.word	0x080084a1
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084a1 	.word	0x080084a1
 8008484:	0800849b 	.word	0x0800849b
 8008488:	2300      	movs	r3, #0
 800848a:	76fb      	strb	r3, [r7, #27]
 800848c:	e0af      	b.n	80085ee <UART_SetConfig+0x282>
 800848e:	2302      	movs	r3, #2
 8008490:	76fb      	strb	r3, [r7, #27]
 8008492:	e0ac      	b.n	80085ee <UART_SetConfig+0x282>
 8008494:	2304      	movs	r3, #4
 8008496:	76fb      	strb	r3, [r7, #27]
 8008498:	e0a9      	b.n	80085ee <UART_SetConfig+0x282>
 800849a:	2308      	movs	r3, #8
 800849c:	76fb      	strb	r3, [r7, #27]
 800849e:	e0a6      	b.n	80085ee <UART_SetConfig+0x282>
 80084a0:	2310      	movs	r3, #16
 80084a2:	76fb      	strb	r3, [r7, #27]
 80084a4:	e0a3      	b.n	80085ee <UART_SetConfig+0x282>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a6d      	ldr	r2, [pc, #436]	; (8008660 <UART_SetConfig+0x2f4>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d120      	bne.n	80084f2 <UART_SetConfig+0x186>
 80084b0:	4b69      	ldr	r3, [pc, #420]	; (8008658 <UART_SetConfig+0x2ec>)
 80084b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084ba:	2b30      	cmp	r3, #48	; 0x30
 80084bc:	d013      	beq.n	80084e6 <UART_SetConfig+0x17a>
 80084be:	2b30      	cmp	r3, #48	; 0x30
 80084c0:	d814      	bhi.n	80084ec <UART_SetConfig+0x180>
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d009      	beq.n	80084da <UART_SetConfig+0x16e>
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d810      	bhi.n	80084ec <UART_SetConfig+0x180>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <UART_SetConfig+0x168>
 80084ce:	2b10      	cmp	r3, #16
 80084d0:	d006      	beq.n	80084e0 <UART_SetConfig+0x174>
 80084d2:	e00b      	b.n	80084ec <UART_SetConfig+0x180>
 80084d4:	2300      	movs	r3, #0
 80084d6:	76fb      	strb	r3, [r7, #27]
 80084d8:	e089      	b.n	80085ee <UART_SetConfig+0x282>
 80084da:	2302      	movs	r3, #2
 80084dc:	76fb      	strb	r3, [r7, #27]
 80084de:	e086      	b.n	80085ee <UART_SetConfig+0x282>
 80084e0:	2304      	movs	r3, #4
 80084e2:	76fb      	strb	r3, [r7, #27]
 80084e4:	e083      	b.n	80085ee <UART_SetConfig+0x282>
 80084e6:	2308      	movs	r3, #8
 80084e8:	76fb      	strb	r3, [r7, #27]
 80084ea:	e080      	b.n	80085ee <UART_SetConfig+0x282>
 80084ec:	2310      	movs	r3, #16
 80084ee:	76fb      	strb	r3, [r7, #27]
 80084f0:	e07d      	b.n	80085ee <UART_SetConfig+0x282>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a5b      	ldr	r2, [pc, #364]	; (8008664 <UART_SetConfig+0x2f8>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d120      	bne.n	800853e <UART_SetConfig+0x1d2>
 80084fc:	4b56      	ldr	r3, [pc, #344]	; (8008658 <UART_SetConfig+0x2ec>)
 80084fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008502:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008506:	2bc0      	cmp	r3, #192	; 0xc0
 8008508:	d013      	beq.n	8008532 <UART_SetConfig+0x1c6>
 800850a:	2bc0      	cmp	r3, #192	; 0xc0
 800850c:	d814      	bhi.n	8008538 <UART_SetConfig+0x1cc>
 800850e:	2b80      	cmp	r3, #128	; 0x80
 8008510:	d009      	beq.n	8008526 <UART_SetConfig+0x1ba>
 8008512:	2b80      	cmp	r3, #128	; 0x80
 8008514:	d810      	bhi.n	8008538 <UART_SetConfig+0x1cc>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <UART_SetConfig+0x1b4>
 800851a:	2b40      	cmp	r3, #64	; 0x40
 800851c:	d006      	beq.n	800852c <UART_SetConfig+0x1c0>
 800851e:	e00b      	b.n	8008538 <UART_SetConfig+0x1cc>
 8008520:	2300      	movs	r3, #0
 8008522:	76fb      	strb	r3, [r7, #27]
 8008524:	e063      	b.n	80085ee <UART_SetConfig+0x282>
 8008526:	2302      	movs	r3, #2
 8008528:	76fb      	strb	r3, [r7, #27]
 800852a:	e060      	b.n	80085ee <UART_SetConfig+0x282>
 800852c:	2304      	movs	r3, #4
 800852e:	76fb      	strb	r3, [r7, #27]
 8008530:	e05d      	b.n	80085ee <UART_SetConfig+0x282>
 8008532:	2308      	movs	r3, #8
 8008534:	76fb      	strb	r3, [r7, #27]
 8008536:	e05a      	b.n	80085ee <UART_SetConfig+0x282>
 8008538:	2310      	movs	r3, #16
 800853a:	76fb      	strb	r3, [r7, #27]
 800853c:	e057      	b.n	80085ee <UART_SetConfig+0x282>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a49      	ldr	r2, [pc, #292]	; (8008668 <UART_SetConfig+0x2fc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d125      	bne.n	8008594 <UART_SetConfig+0x228>
 8008548:	4b43      	ldr	r3, [pc, #268]	; (8008658 <UART_SetConfig+0x2ec>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008556:	d017      	beq.n	8008588 <UART_SetConfig+0x21c>
 8008558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855c:	d817      	bhi.n	800858e <UART_SetConfig+0x222>
 800855e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008562:	d00b      	beq.n	800857c <UART_SetConfig+0x210>
 8008564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008568:	d811      	bhi.n	800858e <UART_SetConfig+0x222>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <UART_SetConfig+0x20a>
 800856e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008572:	d006      	beq.n	8008582 <UART_SetConfig+0x216>
 8008574:	e00b      	b.n	800858e <UART_SetConfig+0x222>
 8008576:	2300      	movs	r3, #0
 8008578:	76fb      	strb	r3, [r7, #27]
 800857a:	e038      	b.n	80085ee <UART_SetConfig+0x282>
 800857c:	2302      	movs	r3, #2
 800857e:	76fb      	strb	r3, [r7, #27]
 8008580:	e035      	b.n	80085ee <UART_SetConfig+0x282>
 8008582:	2304      	movs	r3, #4
 8008584:	76fb      	strb	r3, [r7, #27]
 8008586:	e032      	b.n	80085ee <UART_SetConfig+0x282>
 8008588:	2308      	movs	r3, #8
 800858a:	76fb      	strb	r3, [r7, #27]
 800858c:	e02f      	b.n	80085ee <UART_SetConfig+0x282>
 800858e:	2310      	movs	r3, #16
 8008590:	76fb      	strb	r3, [r7, #27]
 8008592:	e02c      	b.n	80085ee <UART_SetConfig+0x282>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a2d      	ldr	r2, [pc, #180]	; (8008650 <UART_SetConfig+0x2e4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d125      	bne.n	80085ea <UART_SetConfig+0x27e>
 800859e:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <UART_SetConfig+0x2ec>)
 80085a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085ac:	d017      	beq.n	80085de <UART_SetConfig+0x272>
 80085ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085b2:	d817      	bhi.n	80085e4 <UART_SetConfig+0x278>
 80085b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b8:	d00b      	beq.n	80085d2 <UART_SetConfig+0x266>
 80085ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085be:	d811      	bhi.n	80085e4 <UART_SetConfig+0x278>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <UART_SetConfig+0x260>
 80085c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085c8:	d006      	beq.n	80085d8 <UART_SetConfig+0x26c>
 80085ca:	e00b      	b.n	80085e4 <UART_SetConfig+0x278>
 80085cc:	2300      	movs	r3, #0
 80085ce:	76fb      	strb	r3, [r7, #27]
 80085d0:	e00d      	b.n	80085ee <UART_SetConfig+0x282>
 80085d2:	2302      	movs	r3, #2
 80085d4:	76fb      	strb	r3, [r7, #27]
 80085d6:	e00a      	b.n	80085ee <UART_SetConfig+0x282>
 80085d8:	2304      	movs	r3, #4
 80085da:	76fb      	strb	r3, [r7, #27]
 80085dc:	e007      	b.n	80085ee <UART_SetConfig+0x282>
 80085de:	2308      	movs	r3, #8
 80085e0:	76fb      	strb	r3, [r7, #27]
 80085e2:	e004      	b.n	80085ee <UART_SetConfig+0x282>
 80085e4:	2310      	movs	r3, #16
 80085e6:	76fb      	strb	r3, [r7, #27]
 80085e8:	e001      	b.n	80085ee <UART_SetConfig+0x282>
 80085ea:	2310      	movs	r3, #16
 80085ec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a17      	ldr	r2, [pc, #92]	; (8008650 <UART_SetConfig+0x2e4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	f040 8087 	bne.w	8008708 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085fa:	7efb      	ldrb	r3, [r7, #27]
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d837      	bhi.n	8008670 <UART_SetConfig+0x304>
 8008600:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x29c>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	0800862d 	.word	0x0800862d
 800860c:	08008671 	.word	0x08008671
 8008610:	08008635 	.word	0x08008635
 8008614:	08008671 	.word	0x08008671
 8008618:	0800863b 	.word	0x0800863b
 800861c:	08008671 	.word	0x08008671
 8008620:	08008671 	.word	0x08008671
 8008624:	08008671 	.word	0x08008671
 8008628:	08008643 	.word	0x08008643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800862c:	f7fd f958 	bl	80058e0 <HAL_RCC_GetPCLK1Freq>
 8008630:	6178      	str	r0, [r7, #20]
        break;
 8008632:	e022      	b.n	800867a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008634:	4b0d      	ldr	r3, [pc, #52]	; (800866c <UART_SetConfig+0x300>)
 8008636:	617b      	str	r3, [r7, #20]
        break;
 8008638:	e01f      	b.n	800867a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800863a:	f7fd f8b9 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 800863e:	6178      	str	r0, [r7, #20]
        break;
 8008640:	e01b      	b.n	800867a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008646:	617b      	str	r3, [r7, #20]
        break;
 8008648:	e017      	b.n	800867a <UART_SetConfig+0x30e>
 800864a:	bf00      	nop
 800864c:	efff69f3 	.word	0xefff69f3
 8008650:	40008000 	.word	0x40008000
 8008654:	40013800 	.word	0x40013800
 8008658:	40021000 	.word	0x40021000
 800865c:	40004400 	.word	0x40004400
 8008660:	40004800 	.word	0x40004800
 8008664:	40004c00 	.word	0x40004c00
 8008668:	40005000 	.word	0x40005000
 800866c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	76bb      	strb	r3, [r7, #26]
        break;
 8008678:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 80f1 	beq.w	8008864 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	4413      	add	r3, r2
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	429a      	cmp	r2, r3
 8008690:	d305      	bcc.n	800869e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	429a      	cmp	r2, r3
 800869c:	d902      	bls.n	80086a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	76bb      	strb	r3, [r7, #26]
 80086a2:	e0df      	b.n	8008864 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f04f 0100 	mov.w	r1, #0
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	020b      	lsls	r3, r1, #8
 80086b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086ba:	0202      	lsls	r2, r0, #8
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	6849      	ldr	r1, [r1, #4]
 80086c0:	0849      	lsrs	r1, r1, #1
 80086c2:	4608      	mov	r0, r1
 80086c4:	f04f 0100 	mov.w	r1, #0
 80086c8:	1814      	adds	r4, r2, r0
 80086ca:	eb43 0501 	adc.w	r5, r3, r1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	461a      	mov	r2, r3
 80086d4:	f04f 0300 	mov.w	r3, #0
 80086d8:	4620      	mov	r0, r4
 80086da:	4629      	mov	r1, r5
 80086dc:	f7f8 fa84 	bl	8000be8 <__aeabi_uldivmod>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4613      	mov	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ee:	d308      	bcc.n	8008702 <UART_SetConfig+0x396>
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f6:	d204      	bcs.n	8008702 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	60da      	str	r2, [r3, #12]
 8008700:	e0b0      	b.n	8008864 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	76bb      	strb	r3, [r7, #26]
 8008706:	e0ad      	b.n	8008864 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008710:	d15c      	bne.n	80087cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008712:	7efb      	ldrb	r3, [r7, #27]
 8008714:	2b08      	cmp	r3, #8
 8008716:	d828      	bhi.n	800876a <UART_SetConfig+0x3fe>
 8008718:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x3b4>)
 800871a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871e:	bf00      	nop
 8008720:	08008745 	.word	0x08008745
 8008724:	0800874d 	.word	0x0800874d
 8008728:	08008755 	.word	0x08008755
 800872c:	0800876b 	.word	0x0800876b
 8008730:	0800875b 	.word	0x0800875b
 8008734:	0800876b 	.word	0x0800876b
 8008738:	0800876b 	.word	0x0800876b
 800873c:	0800876b 	.word	0x0800876b
 8008740:	08008763 	.word	0x08008763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fd f8cc 	bl	80058e0 <HAL_RCC_GetPCLK1Freq>
 8008748:	6178      	str	r0, [r7, #20]
        break;
 800874a:	e013      	b.n	8008774 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800874c:	f7fd f8de 	bl	800590c <HAL_RCC_GetPCLK2Freq>
 8008750:	6178      	str	r0, [r7, #20]
        break;
 8008752:	e00f      	b.n	8008774 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008754:	4b49      	ldr	r3, [pc, #292]	; (800887c <UART_SetConfig+0x510>)
 8008756:	617b      	str	r3, [r7, #20]
        break;
 8008758:	e00c      	b.n	8008774 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800875a:	f7fd f829 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 800875e:	6178      	str	r0, [r7, #20]
        break;
 8008760:	e008      	b.n	8008774 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008766:	617b      	str	r3, [r7, #20]
        break;
 8008768:	e004      	b.n	8008774 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	76bb      	strb	r3, [r7, #26]
        break;
 8008772:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d074      	beq.n	8008864 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	005a      	lsls	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	441a      	add	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	fbb2 f3f3 	udiv	r3, r2, r3
 800878e:	b29b      	uxth	r3, r3
 8008790:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d916      	bls.n	80087c6 <UART_SetConfig+0x45a>
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879e:	d212      	bcs.n	80087c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	f023 030f 	bic.w	r3, r3, #15
 80087a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	085b      	lsrs	r3, r3, #1
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	89fb      	ldrh	r3, [r7, #14]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	89fa      	ldrh	r2, [r7, #14]
 80087c2:	60da      	str	r2, [r3, #12]
 80087c4:	e04e      	b.n	8008864 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	76bb      	strb	r3, [r7, #26]
 80087ca:	e04b      	b.n	8008864 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087cc:	7efb      	ldrb	r3, [r7, #27]
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d827      	bhi.n	8008822 <UART_SetConfig+0x4b6>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <UART_SetConfig+0x46c>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	080087fd 	.word	0x080087fd
 80087dc:	08008805 	.word	0x08008805
 80087e0:	0800880d 	.word	0x0800880d
 80087e4:	08008823 	.word	0x08008823
 80087e8:	08008813 	.word	0x08008813
 80087ec:	08008823 	.word	0x08008823
 80087f0:	08008823 	.word	0x08008823
 80087f4:	08008823 	.word	0x08008823
 80087f8:	0800881b 	.word	0x0800881b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087fc:	f7fd f870 	bl	80058e0 <HAL_RCC_GetPCLK1Freq>
 8008800:	6178      	str	r0, [r7, #20]
        break;
 8008802:	e013      	b.n	800882c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008804:	f7fd f882 	bl	800590c <HAL_RCC_GetPCLK2Freq>
 8008808:	6178      	str	r0, [r7, #20]
        break;
 800880a:	e00f      	b.n	800882c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800880c:	4b1b      	ldr	r3, [pc, #108]	; (800887c <UART_SetConfig+0x510>)
 800880e:	617b      	str	r3, [r7, #20]
        break;
 8008810:	e00c      	b.n	800882c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008812:	f7fc ffcd 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 8008816:	6178      	str	r0, [r7, #20]
        break;
 8008818:	e008      	b.n	800882c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800881a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800881e:	617b      	str	r3, [r7, #20]
        break;
 8008820:	e004      	b.n	800882c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	76bb      	strb	r3, [r7, #26]
        break;
 800882a:	bf00      	nop
    }

    if (pclk != 0U)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d018      	beq.n	8008864 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	085a      	lsrs	r2, r3, #1
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	441a      	add	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	fbb2 f3f3 	udiv	r3, r2, r3
 8008844:	b29b      	uxth	r3, r3
 8008846:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	2b0f      	cmp	r3, #15
 800884c:	d908      	bls.n	8008860 <UART_SetConfig+0x4f4>
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008854:	d204      	bcs.n	8008860 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	e001      	b.n	8008864 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008870:	7ebb      	ldrb	r3, [r7, #26]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bdb0      	pop	{r4, r5, r7, pc}
 800887a:	bf00      	nop
 800887c:	00f42400 	.word	0x00f42400

08008880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00a      	beq.n	80088ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	f003 0308 	and.w	r3, r3, #8
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	f003 0310 	and.w	r3, r3, #16
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d01a      	beq.n	8008996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800897e:	d10a      	bne.n	8008996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	605a      	str	r2, [r3, #4]
  }
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af02      	add	r7, sp, #8
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80089d2:	f7fa fdcf 	bl	8003574 <HAL_GetTick>
 80089d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d10e      	bne.n	8008a04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f82a 	bl	8008a4e <UART_WaitOnFlagUntilTimeout>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e020      	b.n	8008a46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d10e      	bne.n	8008a30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f814 	bl	8008a4e <UART_WaitOnFlagUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e00a      	b.n	8008a46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5e:	e05d      	b.n	8008b1c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d059      	beq.n	8008b1c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a68:	f7fa fd84 	bl	8003574 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d302      	bcc.n	8008a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d11b      	bne.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0201 	bic.w	r2, r2, #1
 8008a9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e042      	b.n	8008b3c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d02b      	beq.n	8008b1c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad2:	d123      	bne.n	8008b1c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008adc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008aec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f022 0201 	bic.w	r2, r2, #1
 8008afc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2220      	movs	r2, #32
 8008b02:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2220      	movs	r2, #32
 8008b08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2220      	movs	r2, #32
 8008b0e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e00f      	b.n	8008b3c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	69da      	ldr	r2, [r3, #28]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4013      	ands	r3, r2
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	bf0c      	ite	eq
 8008b2c:	2301      	moveq	r3, #1
 8008b2e:	2300      	movne	r3, #0
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	461a      	mov	r2, r3
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d092      	beq.n	8008a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <__errno>:
 8008b44:	4b01      	ldr	r3, [pc, #4]	; (8008b4c <__errno+0x8>)
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000064 	.word	0x20000064

08008b50 <__libc_init_array>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4d0d      	ldr	r5, [pc, #52]	; (8008b88 <__libc_init_array+0x38>)
 8008b54:	4c0d      	ldr	r4, [pc, #52]	; (8008b8c <__libc_init_array+0x3c>)
 8008b56:	1b64      	subs	r4, r4, r5
 8008b58:	10a4      	asrs	r4, r4, #2
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	42a6      	cmp	r6, r4
 8008b5e:	d109      	bne.n	8008b74 <__libc_init_array+0x24>
 8008b60:	4d0b      	ldr	r5, [pc, #44]	; (8008b90 <__libc_init_array+0x40>)
 8008b62:	4c0c      	ldr	r4, [pc, #48]	; (8008b94 <__libc_init_array+0x44>)
 8008b64:	f003 ff3e 	bl	800c9e4 <_init>
 8008b68:	1b64      	subs	r4, r4, r5
 8008b6a:	10a4      	asrs	r4, r4, #2
 8008b6c:	2600      	movs	r6, #0
 8008b6e:	42a6      	cmp	r6, r4
 8008b70:	d105      	bne.n	8008b7e <__libc_init_array+0x2e>
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b78:	4798      	blx	r3
 8008b7a:	3601      	adds	r6, #1
 8008b7c:	e7ee      	b.n	8008b5c <__libc_init_array+0xc>
 8008b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b82:	4798      	blx	r3
 8008b84:	3601      	adds	r6, #1
 8008b86:	e7f2      	b.n	8008b6e <__libc_init_array+0x1e>
 8008b88:	0800f2e8 	.word	0x0800f2e8
 8008b8c:	0800f2e8 	.word	0x0800f2e8
 8008b90:	0800f2e8 	.word	0x0800f2e8
 8008b94:	0800f2ec 	.word	0x0800f2ec

08008b98 <memset>:
 8008b98:	4402      	add	r2, r0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d100      	bne.n	8008ba2 <memset+0xa>
 8008ba0:	4770      	bx	lr
 8008ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba6:	e7f9      	b.n	8008b9c <memset+0x4>

08008ba8 <__cvt>:
 8008ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bac:	ec55 4b10 	vmov	r4, r5, d0
 8008bb0:	2d00      	cmp	r5, #0
 8008bb2:	460e      	mov	r6, r1
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	462b      	mov	r3, r5
 8008bb8:	bfbb      	ittet	lt
 8008bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008bbe:	461d      	movlt	r5, r3
 8008bc0:	2300      	movge	r3, #0
 8008bc2:	232d      	movlt	r3, #45	; 0x2d
 8008bc4:	700b      	strb	r3, [r1, #0]
 8008bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008bcc:	4691      	mov	r9, r2
 8008bce:	f023 0820 	bic.w	r8, r3, #32
 8008bd2:	bfbc      	itt	lt
 8008bd4:	4622      	movlt	r2, r4
 8008bd6:	4614      	movlt	r4, r2
 8008bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bdc:	d005      	beq.n	8008bea <__cvt+0x42>
 8008bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008be2:	d100      	bne.n	8008be6 <__cvt+0x3e>
 8008be4:	3601      	adds	r6, #1
 8008be6:	2102      	movs	r1, #2
 8008be8:	e000      	b.n	8008bec <__cvt+0x44>
 8008bea:	2103      	movs	r1, #3
 8008bec:	ab03      	add	r3, sp, #12
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	ab02      	add	r3, sp, #8
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	ec45 4b10 	vmov	d0, r4, r5
 8008bf8:	4653      	mov	r3, sl
 8008bfa:	4632      	mov	r2, r6
 8008bfc:	f000 fcec 	bl	80095d8 <_dtoa_r>
 8008c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c04:	4607      	mov	r7, r0
 8008c06:	d102      	bne.n	8008c0e <__cvt+0x66>
 8008c08:	f019 0f01 	tst.w	r9, #1
 8008c0c:	d022      	beq.n	8008c54 <__cvt+0xac>
 8008c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c12:	eb07 0906 	add.w	r9, r7, r6
 8008c16:	d110      	bne.n	8008c3a <__cvt+0x92>
 8008c18:	783b      	ldrb	r3, [r7, #0]
 8008c1a:	2b30      	cmp	r3, #48	; 0x30
 8008c1c:	d10a      	bne.n	8008c34 <__cvt+0x8c>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2300      	movs	r3, #0
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c2a:	b918      	cbnz	r0, 8008c34 <__cvt+0x8c>
 8008c2c:	f1c6 0601 	rsb	r6, r6, #1
 8008c30:	f8ca 6000 	str.w	r6, [sl]
 8008c34:	f8da 3000 	ldr.w	r3, [sl]
 8008c38:	4499      	add	r9, r3
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4620      	mov	r0, r4
 8008c40:	4629      	mov	r1, r5
 8008c42:	f7f7 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c46:	b108      	cbz	r0, 8008c4c <__cvt+0xa4>
 8008c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c4c:	2230      	movs	r2, #48	; 0x30
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	454b      	cmp	r3, r9
 8008c52:	d307      	bcc.n	8008c64 <__cvt+0xbc>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c58:	1bdb      	subs	r3, r3, r7
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	b004      	add	sp, #16
 8008c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c64:	1c59      	adds	r1, r3, #1
 8008c66:	9103      	str	r1, [sp, #12]
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	e7f0      	b.n	8008c4e <__cvt+0xa6>

08008c6c <__exponent>:
 8008c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2900      	cmp	r1, #0
 8008c72:	bfb8      	it	lt
 8008c74:	4249      	neglt	r1, r1
 8008c76:	f803 2b02 	strb.w	r2, [r3], #2
 8008c7a:	bfb4      	ite	lt
 8008c7c:	222d      	movlt	r2, #45	; 0x2d
 8008c7e:	222b      	movge	r2, #43	; 0x2b
 8008c80:	2909      	cmp	r1, #9
 8008c82:	7042      	strb	r2, [r0, #1]
 8008c84:	dd2a      	ble.n	8008cdc <__exponent+0x70>
 8008c86:	f10d 0407 	add.w	r4, sp, #7
 8008c8a:	46a4      	mov	ip, r4
 8008c8c:	270a      	movs	r7, #10
 8008c8e:	46a6      	mov	lr, r4
 8008c90:	460a      	mov	r2, r1
 8008c92:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c96:	fb07 1516 	mls	r5, r7, r6, r1
 8008c9a:	3530      	adds	r5, #48	; 0x30
 8008c9c:	2a63      	cmp	r2, #99	; 0x63
 8008c9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008ca2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	dcf1      	bgt.n	8008c8e <__exponent+0x22>
 8008caa:	3130      	adds	r1, #48	; 0x30
 8008cac:	f1ae 0502 	sub.w	r5, lr, #2
 8008cb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cb4:	1c44      	adds	r4, r0, #1
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4561      	cmp	r1, ip
 8008cba:	d30a      	bcc.n	8008cd2 <__exponent+0x66>
 8008cbc:	f10d 0209 	add.w	r2, sp, #9
 8008cc0:	eba2 020e 	sub.w	r2, r2, lr
 8008cc4:	4565      	cmp	r5, ip
 8008cc6:	bf88      	it	hi
 8008cc8:	2200      	movhi	r2, #0
 8008cca:	4413      	add	r3, r2
 8008ccc:	1a18      	subs	r0, r3, r0
 8008cce:	b003      	add	sp, #12
 8008cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cda:	e7ed      	b.n	8008cb8 <__exponent+0x4c>
 8008cdc:	2330      	movs	r3, #48	; 0x30
 8008cde:	3130      	adds	r1, #48	; 0x30
 8008ce0:	7083      	strb	r3, [r0, #2]
 8008ce2:	70c1      	strb	r1, [r0, #3]
 8008ce4:	1d03      	adds	r3, r0, #4
 8008ce6:	e7f1      	b.n	8008ccc <__exponent+0x60>

08008ce8 <_printf_float>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	ed2d 8b02 	vpush	{d8}
 8008cf0:	b08d      	sub	sp, #52	; 0x34
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	461f      	mov	r7, r3
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	f001 fa57 	bl	800a1b0 <_localeconv_r>
 8008d02:	f8d0 a000 	ldr.w	sl, [r0]
 8008d06:	4650      	mov	r0, sl
 8008d08:	f7f7 fa62 	bl	80001d0 <strlen>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	9305      	str	r3, [sp, #20]
 8008d14:	f8d8 3000 	ldr.w	r3, [r8]
 8008d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008d1c:	3307      	adds	r3, #7
 8008d1e:	f023 0307 	bic.w	r3, r3, #7
 8008d22:	f103 0208 	add.w	r2, r3, #8
 8008d26:	f8c8 2000 	str.w	r2, [r8]
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d3a:	9307      	str	r3, [sp, #28]
 8008d3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d40:	ee08 0a10 	vmov	s16, r0
 8008d44:	4b9f      	ldr	r3, [pc, #636]	; (8008fc4 <_printf_float+0x2dc>)
 8008d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	f7f7 feed 	bl	8000b2c <__aeabi_dcmpun>
 8008d52:	bb88      	cbnz	r0, 8008db8 <_printf_float+0xd0>
 8008d54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d58:	4b9a      	ldr	r3, [pc, #616]	; (8008fc4 <_printf_float+0x2dc>)
 8008d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5e:	f7f7 fec7 	bl	8000af0 <__aeabi_dcmple>
 8008d62:	bb48      	cbnz	r0, 8008db8 <_printf_float+0xd0>
 8008d64:	2200      	movs	r2, #0
 8008d66:	2300      	movs	r3, #0
 8008d68:	4640      	mov	r0, r8
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	f7f7 feb6 	bl	8000adc <__aeabi_dcmplt>
 8008d70:	b110      	cbz	r0, 8008d78 <_printf_float+0x90>
 8008d72:	232d      	movs	r3, #45	; 0x2d
 8008d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d78:	4b93      	ldr	r3, [pc, #588]	; (8008fc8 <_printf_float+0x2e0>)
 8008d7a:	4894      	ldr	r0, [pc, #592]	; (8008fcc <_printf_float+0x2e4>)
 8008d7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d80:	bf94      	ite	ls
 8008d82:	4698      	movls	r8, r3
 8008d84:	4680      	movhi	r8, r0
 8008d86:	2303      	movs	r3, #3
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	9b05      	ldr	r3, [sp, #20]
 8008d8c:	f023 0204 	bic.w	r2, r3, #4
 8008d90:	6022      	str	r2, [r4, #0]
 8008d92:	f04f 0900 	mov.w	r9, #0
 8008d96:	9700      	str	r7, [sp, #0]
 8008d98:	4633      	mov	r3, r6
 8008d9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 f9d8 	bl	8009154 <_printf_common>
 8008da4:	3001      	adds	r0, #1
 8008da6:	f040 8090 	bne.w	8008eca <_printf_float+0x1e2>
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	b00d      	add	sp, #52	; 0x34
 8008db0:	ecbd 8b02 	vpop	{d8}
 8008db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	f7f7 feb4 	bl	8000b2c <__aeabi_dcmpun>
 8008dc4:	b140      	cbz	r0, 8008dd8 <_printf_float+0xf0>
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	bfbc      	itt	lt
 8008dcc:	232d      	movlt	r3, #45	; 0x2d
 8008dce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008dd2:	487f      	ldr	r0, [pc, #508]	; (8008fd0 <_printf_float+0x2e8>)
 8008dd4:	4b7f      	ldr	r3, [pc, #508]	; (8008fd4 <_printf_float+0x2ec>)
 8008dd6:	e7d1      	b.n	8008d7c <_printf_float+0x94>
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008dde:	9206      	str	r2, [sp, #24]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	d13f      	bne.n	8008e64 <_printf_float+0x17c>
 8008de4:	2306      	movs	r3, #6
 8008de6:	6063      	str	r3, [r4, #4]
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	6861      	ldr	r1, [r4, #4]
 8008dec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008df0:	2300      	movs	r3, #0
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	ab0a      	add	r3, sp, #40	; 0x28
 8008df6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008dfa:	ab09      	add	r3, sp, #36	; 0x24
 8008dfc:	ec49 8b10 	vmov	d0, r8, r9
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	6022      	str	r2, [r4, #0]
 8008e04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7ff fecd 	bl	8008ba8 <__cvt>
 8008e0e:	9b06      	ldr	r3, [sp, #24]
 8008e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e12:	2b47      	cmp	r3, #71	; 0x47
 8008e14:	4680      	mov	r8, r0
 8008e16:	d108      	bne.n	8008e2a <_printf_float+0x142>
 8008e18:	1cc8      	adds	r0, r1, #3
 8008e1a:	db02      	blt.n	8008e22 <_printf_float+0x13a>
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	dd41      	ble.n	8008ea6 <_printf_float+0x1be>
 8008e22:	f1ab 0b02 	sub.w	fp, fp, #2
 8008e26:	fa5f fb8b 	uxtb.w	fp, fp
 8008e2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e2e:	d820      	bhi.n	8008e72 <_printf_float+0x18a>
 8008e30:	3901      	subs	r1, #1
 8008e32:	465a      	mov	r2, fp
 8008e34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e38:	9109      	str	r1, [sp, #36]	; 0x24
 8008e3a:	f7ff ff17 	bl	8008c6c <__exponent>
 8008e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e40:	1813      	adds	r3, r2, r0
 8008e42:	2a01      	cmp	r2, #1
 8008e44:	4681      	mov	r9, r0
 8008e46:	6123      	str	r3, [r4, #16]
 8008e48:	dc02      	bgt.n	8008e50 <_printf_float+0x168>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	07d2      	lsls	r2, r2, #31
 8008e4e:	d501      	bpl.n	8008e54 <_printf_float+0x16c>
 8008e50:	3301      	adds	r3, #1
 8008e52:	6123      	str	r3, [r4, #16]
 8008e54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d09c      	beq.n	8008d96 <_printf_float+0xae>
 8008e5c:	232d      	movs	r3, #45	; 0x2d
 8008e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e62:	e798      	b.n	8008d96 <_printf_float+0xae>
 8008e64:	9a06      	ldr	r2, [sp, #24]
 8008e66:	2a47      	cmp	r2, #71	; 0x47
 8008e68:	d1be      	bne.n	8008de8 <_printf_float+0x100>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1bc      	bne.n	8008de8 <_printf_float+0x100>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e7b9      	b.n	8008de6 <_printf_float+0xfe>
 8008e72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e76:	d118      	bne.n	8008eaa <_printf_float+0x1c2>
 8008e78:	2900      	cmp	r1, #0
 8008e7a:	6863      	ldr	r3, [r4, #4]
 8008e7c:	dd0b      	ble.n	8008e96 <_printf_float+0x1ae>
 8008e7e:	6121      	str	r1, [r4, #16]
 8008e80:	b913      	cbnz	r3, 8008e88 <_printf_float+0x1a0>
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	07d0      	lsls	r0, r2, #31
 8008e86:	d502      	bpl.n	8008e8e <_printf_float+0x1a6>
 8008e88:	3301      	adds	r3, #1
 8008e8a:	440b      	add	r3, r1
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e90:	f04f 0900 	mov.w	r9, #0
 8008e94:	e7de      	b.n	8008e54 <_printf_float+0x16c>
 8008e96:	b913      	cbnz	r3, 8008e9e <_printf_float+0x1b6>
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	07d2      	lsls	r2, r2, #31
 8008e9c:	d501      	bpl.n	8008ea2 <_printf_float+0x1ba>
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	e7f4      	b.n	8008e8c <_printf_float+0x1a4>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e7f2      	b.n	8008e8c <_printf_float+0x1a4>
 8008ea6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eac:	4299      	cmp	r1, r3
 8008eae:	db05      	blt.n	8008ebc <_printf_float+0x1d4>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	6121      	str	r1, [r4, #16]
 8008eb4:	07d8      	lsls	r0, r3, #31
 8008eb6:	d5ea      	bpl.n	8008e8e <_printf_float+0x1a6>
 8008eb8:	1c4b      	adds	r3, r1, #1
 8008eba:	e7e7      	b.n	8008e8c <_printf_float+0x1a4>
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	bfd4      	ite	le
 8008ec0:	f1c1 0202 	rsble	r2, r1, #2
 8008ec4:	2201      	movgt	r2, #1
 8008ec6:	4413      	add	r3, r2
 8008ec8:	e7e0      	b.n	8008e8c <_printf_float+0x1a4>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	055a      	lsls	r2, r3, #21
 8008ece:	d407      	bmi.n	8008ee0 <_printf_float+0x1f8>
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	4642      	mov	r2, r8
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	d12c      	bne.n	8008f38 <_printf_float+0x250>
 8008ede:	e764      	b.n	8008daa <_printf_float+0xc2>
 8008ee0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ee4:	f240 80e0 	bls.w	80090a8 <_printf_float+0x3c0>
 8008ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008eec:	2200      	movs	r2, #0
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f7f7 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d034      	beq.n	8008f62 <_printf_float+0x27a>
 8008ef8:	4a37      	ldr	r2, [pc, #220]	; (8008fd8 <_printf_float+0x2f0>)
 8008efa:	2301      	movs	r3, #1
 8008efc:	4631      	mov	r1, r6
 8008efe:	4628      	mov	r0, r5
 8008f00:	47b8      	blx	r7
 8008f02:	3001      	adds	r0, #1
 8008f04:	f43f af51 	beq.w	8008daa <_printf_float+0xc2>
 8008f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	db02      	blt.n	8008f16 <_printf_float+0x22e>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	07d8      	lsls	r0, r3, #31
 8008f14:	d510      	bpl.n	8008f38 <_printf_float+0x250>
 8008f16:	ee18 3a10 	vmov	r3, s16
 8008f1a:	4652      	mov	r2, sl
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	f43f af41 	beq.w	8008daa <_printf_float+0xc2>
 8008f28:	f04f 0800 	mov.w	r8, #0
 8008f2c:	f104 091a 	add.w	r9, r4, #26
 8008f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f32:	3b01      	subs	r3, #1
 8008f34:	4543      	cmp	r3, r8
 8008f36:	dc09      	bgt.n	8008f4c <_printf_float+0x264>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	079b      	lsls	r3, r3, #30
 8008f3c:	f100 8105 	bmi.w	800914a <_printf_float+0x462>
 8008f40:	68e0      	ldr	r0, [r4, #12]
 8008f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f44:	4298      	cmp	r0, r3
 8008f46:	bfb8      	it	lt
 8008f48:	4618      	movlt	r0, r3
 8008f4a:	e730      	b.n	8008dae <_printf_float+0xc6>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	464a      	mov	r2, r9
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b8      	blx	r7
 8008f56:	3001      	adds	r0, #1
 8008f58:	f43f af27 	beq.w	8008daa <_printf_float+0xc2>
 8008f5c:	f108 0801 	add.w	r8, r8, #1
 8008f60:	e7e6      	b.n	8008f30 <_printf_float+0x248>
 8008f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dc39      	bgt.n	8008fdc <_printf_float+0x2f4>
 8008f68:	4a1b      	ldr	r2, [pc, #108]	; (8008fd8 <_printf_float+0x2f0>)
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	f43f af19 	beq.w	8008daa <_printf_float+0xc2>
 8008f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	d102      	bne.n	8008f86 <_printf_float+0x29e>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d5d8      	bpl.n	8008f38 <_printf_float+0x250>
 8008f86:	ee18 3a10 	vmov	r3, s16
 8008f8a:	4652      	mov	r2, sl
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	f43f af09 	beq.w	8008daa <_printf_float+0xc2>
 8008f98:	f04f 0900 	mov.w	r9, #0
 8008f9c:	f104 0a1a 	add.w	sl, r4, #26
 8008fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa2:	425b      	negs	r3, r3
 8008fa4:	454b      	cmp	r3, r9
 8008fa6:	dc01      	bgt.n	8008fac <_printf_float+0x2c4>
 8008fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008faa:	e792      	b.n	8008ed2 <_printf_float+0x1ea>
 8008fac:	2301      	movs	r3, #1
 8008fae:	4652      	mov	r2, sl
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	47b8      	blx	r7
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	f43f aef7 	beq.w	8008daa <_printf_float+0xc2>
 8008fbc:	f109 0901 	add.w	r9, r9, #1
 8008fc0:	e7ee      	b.n	8008fa0 <_printf_float+0x2b8>
 8008fc2:	bf00      	nop
 8008fc4:	7fefffff 	.word	0x7fefffff
 8008fc8:	0800ed28 	.word	0x0800ed28
 8008fcc:	0800ed2c 	.word	0x0800ed2c
 8008fd0:	0800ed34 	.word	0x0800ed34
 8008fd4:	0800ed30 	.word	0x0800ed30
 8008fd8:	0800ed38 	.word	0x0800ed38
 8008fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	bfa8      	it	ge
 8008fe4:	461a      	movge	r2, r3
 8008fe6:	2a00      	cmp	r2, #0
 8008fe8:	4691      	mov	r9, r2
 8008fea:	dc37      	bgt.n	800905c <_printf_float+0x374>
 8008fec:	f04f 0b00 	mov.w	fp, #0
 8008ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ff4:	f104 021a 	add.w	r2, r4, #26
 8008ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	eba3 0309 	sub.w	r3, r3, r9
 8009000:	455b      	cmp	r3, fp
 8009002:	dc33      	bgt.n	800906c <_printf_float+0x384>
 8009004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009008:	429a      	cmp	r2, r3
 800900a:	db3b      	blt.n	8009084 <_printf_float+0x39c>
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	07da      	lsls	r2, r3, #31
 8009010:	d438      	bmi.n	8009084 <_printf_float+0x39c>
 8009012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009014:	9b05      	ldr	r3, [sp, #20]
 8009016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	eba2 0901 	sub.w	r9, r2, r1
 800901e:	4599      	cmp	r9, r3
 8009020:	bfa8      	it	ge
 8009022:	4699      	movge	r9, r3
 8009024:	f1b9 0f00 	cmp.w	r9, #0
 8009028:	dc35      	bgt.n	8009096 <_printf_float+0x3ae>
 800902a:	f04f 0800 	mov.w	r8, #0
 800902e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009032:	f104 0a1a 	add.w	sl, r4, #26
 8009036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	eba3 0309 	sub.w	r3, r3, r9
 8009040:	4543      	cmp	r3, r8
 8009042:	f77f af79 	ble.w	8008f38 <_printf_float+0x250>
 8009046:	2301      	movs	r3, #1
 8009048:	4652      	mov	r2, sl
 800904a:	4631      	mov	r1, r6
 800904c:	4628      	mov	r0, r5
 800904e:	47b8      	blx	r7
 8009050:	3001      	adds	r0, #1
 8009052:	f43f aeaa 	beq.w	8008daa <_printf_float+0xc2>
 8009056:	f108 0801 	add.w	r8, r8, #1
 800905a:	e7ec      	b.n	8009036 <_printf_float+0x34e>
 800905c:	4613      	mov	r3, r2
 800905e:	4631      	mov	r1, r6
 8009060:	4642      	mov	r2, r8
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	d1c0      	bne.n	8008fec <_printf_float+0x304>
 800906a:	e69e      	b.n	8008daa <_printf_float+0xc2>
 800906c:	2301      	movs	r3, #1
 800906e:	4631      	mov	r1, r6
 8009070:	4628      	mov	r0, r5
 8009072:	9205      	str	r2, [sp, #20]
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	f43f ae97 	beq.w	8008daa <_printf_float+0xc2>
 800907c:	9a05      	ldr	r2, [sp, #20]
 800907e:	f10b 0b01 	add.w	fp, fp, #1
 8009082:	e7b9      	b.n	8008ff8 <_printf_float+0x310>
 8009084:	ee18 3a10 	vmov	r3, s16
 8009088:	4652      	mov	r2, sl
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	47b8      	blx	r7
 8009090:	3001      	adds	r0, #1
 8009092:	d1be      	bne.n	8009012 <_printf_float+0x32a>
 8009094:	e689      	b.n	8008daa <_printf_float+0xc2>
 8009096:	9a05      	ldr	r2, [sp, #20]
 8009098:	464b      	mov	r3, r9
 800909a:	4442      	add	r2, r8
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	d1c1      	bne.n	800902a <_printf_float+0x342>
 80090a6:	e680      	b.n	8008daa <_printf_float+0xc2>
 80090a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090aa:	2a01      	cmp	r2, #1
 80090ac:	dc01      	bgt.n	80090b2 <_printf_float+0x3ca>
 80090ae:	07db      	lsls	r3, r3, #31
 80090b0:	d538      	bpl.n	8009124 <_printf_float+0x43c>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4642      	mov	r2, r8
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f ae74 	beq.w	8008daa <_printf_float+0xc2>
 80090c2:	ee18 3a10 	vmov	r3, s16
 80090c6:	4652      	mov	r2, sl
 80090c8:	4631      	mov	r1, r6
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b8      	blx	r7
 80090ce:	3001      	adds	r0, #1
 80090d0:	f43f ae6b 	beq.w	8008daa <_printf_float+0xc2>
 80090d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090d8:	2200      	movs	r2, #0
 80090da:	2300      	movs	r3, #0
 80090dc:	f7f7 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80090e0:	b9d8      	cbnz	r0, 800911a <_printf_float+0x432>
 80090e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e4:	f108 0201 	add.w	r2, r8, #1
 80090e8:	3b01      	subs	r3, #1
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	d10e      	bne.n	8009112 <_printf_float+0x42a>
 80090f4:	e659      	b.n	8008daa <_printf_float+0xc2>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4652      	mov	r2, sl
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f ae52 	beq.w	8008daa <_printf_float+0xc2>
 8009106:	f108 0801 	add.w	r8, r8, #1
 800910a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910c:	3b01      	subs	r3, #1
 800910e:	4543      	cmp	r3, r8
 8009110:	dcf1      	bgt.n	80090f6 <_printf_float+0x40e>
 8009112:	464b      	mov	r3, r9
 8009114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009118:	e6dc      	b.n	8008ed4 <_printf_float+0x1ec>
 800911a:	f04f 0800 	mov.w	r8, #0
 800911e:	f104 0a1a 	add.w	sl, r4, #26
 8009122:	e7f2      	b.n	800910a <_printf_float+0x422>
 8009124:	2301      	movs	r3, #1
 8009126:	4642      	mov	r2, r8
 8009128:	e7df      	b.n	80090ea <_printf_float+0x402>
 800912a:	2301      	movs	r3, #1
 800912c:	464a      	mov	r2, r9
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	f43f ae38 	beq.w	8008daa <_printf_float+0xc2>
 800913a:	f108 0801 	add.w	r8, r8, #1
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009142:	1a5b      	subs	r3, r3, r1
 8009144:	4543      	cmp	r3, r8
 8009146:	dcf0      	bgt.n	800912a <_printf_float+0x442>
 8009148:	e6fa      	b.n	8008f40 <_printf_float+0x258>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	f104 0919 	add.w	r9, r4, #25
 8009152:	e7f4      	b.n	800913e <_printf_float+0x456>

08009154 <_printf_common>:
 8009154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	4616      	mov	r6, r2
 800915a:	4699      	mov	r9, r3
 800915c:	688a      	ldr	r2, [r1, #8]
 800915e:	690b      	ldr	r3, [r1, #16]
 8009160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009164:	4293      	cmp	r3, r2
 8009166:	bfb8      	it	lt
 8009168:	4613      	movlt	r3, r2
 800916a:	6033      	str	r3, [r6, #0]
 800916c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009170:	4607      	mov	r7, r0
 8009172:	460c      	mov	r4, r1
 8009174:	b10a      	cbz	r2, 800917a <_printf_common+0x26>
 8009176:	3301      	adds	r3, #1
 8009178:	6033      	str	r3, [r6, #0]
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	0699      	lsls	r1, r3, #26
 800917e:	bf42      	ittt	mi
 8009180:	6833      	ldrmi	r3, [r6, #0]
 8009182:	3302      	addmi	r3, #2
 8009184:	6033      	strmi	r3, [r6, #0]
 8009186:	6825      	ldr	r5, [r4, #0]
 8009188:	f015 0506 	ands.w	r5, r5, #6
 800918c:	d106      	bne.n	800919c <_printf_common+0x48>
 800918e:	f104 0a19 	add.w	sl, r4, #25
 8009192:	68e3      	ldr	r3, [r4, #12]
 8009194:	6832      	ldr	r2, [r6, #0]
 8009196:	1a9b      	subs	r3, r3, r2
 8009198:	42ab      	cmp	r3, r5
 800919a:	dc26      	bgt.n	80091ea <_printf_common+0x96>
 800919c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091a0:	1e13      	subs	r3, r2, #0
 80091a2:	6822      	ldr	r2, [r4, #0]
 80091a4:	bf18      	it	ne
 80091a6:	2301      	movne	r3, #1
 80091a8:	0692      	lsls	r2, r2, #26
 80091aa:	d42b      	bmi.n	8009204 <_printf_common+0xb0>
 80091ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091b0:	4649      	mov	r1, r9
 80091b2:	4638      	mov	r0, r7
 80091b4:	47c0      	blx	r8
 80091b6:	3001      	adds	r0, #1
 80091b8:	d01e      	beq.n	80091f8 <_printf_common+0xa4>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	68e5      	ldr	r5, [r4, #12]
 80091be:	6832      	ldr	r2, [r6, #0]
 80091c0:	f003 0306 	and.w	r3, r3, #6
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	bf08      	it	eq
 80091c8:	1aad      	subeq	r5, r5, r2
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	6922      	ldr	r2, [r4, #16]
 80091ce:	bf0c      	ite	eq
 80091d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091d4:	2500      	movne	r5, #0
 80091d6:	4293      	cmp	r3, r2
 80091d8:	bfc4      	itt	gt
 80091da:	1a9b      	subgt	r3, r3, r2
 80091dc:	18ed      	addgt	r5, r5, r3
 80091de:	2600      	movs	r6, #0
 80091e0:	341a      	adds	r4, #26
 80091e2:	42b5      	cmp	r5, r6
 80091e4:	d11a      	bne.n	800921c <_printf_common+0xc8>
 80091e6:	2000      	movs	r0, #0
 80091e8:	e008      	b.n	80091fc <_printf_common+0xa8>
 80091ea:	2301      	movs	r3, #1
 80091ec:	4652      	mov	r2, sl
 80091ee:	4649      	mov	r1, r9
 80091f0:	4638      	mov	r0, r7
 80091f2:	47c0      	blx	r8
 80091f4:	3001      	adds	r0, #1
 80091f6:	d103      	bne.n	8009200 <_printf_common+0xac>
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009200:	3501      	adds	r5, #1
 8009202:	e7c6      	b.n	8009192 <_printf_common+0x3e>
 8009204:	18e1      	adds	r1, r4, r3
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	2030      	movs	r0, #48	; 0x30
 800920a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800920e:	4422      	add	r2, r4
 8009210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009218:	3302      	adds	r3, #2
 800921a:	e7c7      	b.n	80091ac <_printf_common+0x58>
 800921c:	2301      	movs	r3, #1
 800921e:	4622      	mov	r2, r4
 8009220:	4649      	mov	r1, r9
 8009222:	4638      	mov	r0, r7
 8009224:	47c0      	blx	r8
 8009226:	3001      	adds	r0, #1
 8009228:	d0e6      	beq.n	80091f8 <_printf_common+0xa4>
 800922a:	3601      	adds	r6, #1
 800922c:	e7d9      	b.n	80091e2 <_printf_common+0x8e>
	...

08009230 <_printf_i>:
 8009230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	4691      	mov	r9, r2
 8009238:	7e27      	ldrb	r7, [r4, #24]
 800923a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800923c:	2f78      	cmp	r7, #120	; 0x78
 800923e:	4680      	mov	r8, r0
 8009240:	469a      	mov	sl, r3
 8009242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009246:	d807      	bhi.n	8009258 <_printf_i+0x28>
 8009248:	2f62      	cmp	r7, #98	; 0x62
 800924a:	d80a      	bhi.n	8009262 <_printf_i+0x32>
 800924c:	2f00      	cmp	r7, #0
 800924e:	f000 80d8 	beq.w	8009402 <_printf_i+0x1d2>
 8009252:	2f58      	cmp	r7, #88	; 0x58
 8009254:	f000 80a3 	beq.w	800939e <_printf_i+0x16e>
 8009258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800925c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009260:	e03a      	b.n	80092d8 <_printf_i+0xa8>
 8009262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009266:	2b15      	cmp	r3, #21
 8009268:	d8f6      	bhi.n	8009258 <_printf_i+0x28>
 800926a:	a001      	add	r0, pc, #4	; (adr r0, 8009270 <_printf_i+0x40>)
 800926c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009270:	080092c9 	.word	0x080092c9
 8009274:	080092dd 	.word	0x080092dd
 8009278:	08009259 	.word	0x08009259
 800927c:	08009259 	.word	0x08009259
 8009280:	08009259 	.word	0x08009259
 8009284:	08009259 	.word	0x08009259
 8009288:	080092dd 	.word	0x080092dd
 800928c:	08009259 	.word	0x08009259
 8009290:	08009259 	.word	0x08009259
 8009294:	08009259 	.word	0x08009259
 8009298:	08009259 	.word	0x08009259
 800929c:	080093e9 	.word	0x080093e9
 80092a0:	0800930d 	.word	0x0800930d
 80092a4:	080093cb 	.word	0x080093cb
 80092a8:	08009259 	.word	0x08009259
 80092ac:	08009259 	.word	0x08009259
 80092b0:	0800940b 	.word	0x0800940b
 80092b4:	08009259 	.word	0x08009259
 80092b8:	0800930d 	.word	0x0800930d
 80092bc:	08009259 	.word	0x08009259
 80092c0:	08009259 	.word	0x08009259
 80092c4:	080093d3 	.word	0x080093d3
 80092c8:	680b      	ldr	r3, [r1, #0]
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	600a      	str	r2, [r1, #0]
 80092d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092d8:	2301      	movs	r3, #1
 80092da:	e0a3      	b.n	8009424 <_printf_i+0x1f4>
 80092dc:	6825      	ldr	r5, [r4, #0]
 80092de:	6808      	ldr	r0, [r1, #0]
 80092e0:	062e      	lsls	r6, r5, #24
 80092e2:	f100 0304 	add.w	r3, r0, #4
 80092e6:	d50a      	bpl.n	80092fe <_printf_i+0xce>
 80092e8:	6805      	ldr	r5, [r0, #0]
 80092ea:	600b      	str	r3, [r1, #0]
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	da03      	bge.n	80092f8 <_printf_i+0xc8>
 80092f0:	232d      	movs	r3, #45	; 0x2d
 80092f2:	426d      	negs	r5, r5
 80092f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f8:	485e      	ldr	r0, [pc, #376]	; (8009474 <_printf_i+0x244>)
 80092fa:	230a      	movs	r3, #10
 80092fc:	e019      	b.n	8009332 <_printf_i+0x102>
 80092fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009302:	6805      	ldr	r5, [r0, #0]
 8009304:	600b      	str	r3, [r1, #0]
 8009306:	bf18      	it	ne
 8009308:	b22d      	sxthne	r5, r5
 800930a:	e7ef      	b.n	80092ec <_printf_i+0xbc>
 800930c:	680b      	ldr	r3, [r1, #0]
 800930e:	6825      	ldr	r5, [r4, #0]
 8009310:	1d18      	adds	r0, r3, #4
 8009312:	6008      	str	r0, [r1, #0]
 8009314:	0628      	lsls	r0, r5, #24
 8009316:	d501      	bpl.n	800931c <_printf_i+0xec>
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	e002      	b.n	8009322 <_printf_i+0xf2>
 800931c:	0669      	lsls	r1, r5, #25
 800931e:	d5fb      	bpl.n	8009318 <_printf_i+0xe8>
 8009320:	881d      	ldrh	r5, [r3, #0]
 8009322:	4854      	ldr	r0, [pc, #336]	; (8009474 <_printf_i+0x244>)
 8009324:	2f6f      	cmp	r7, #111	; 0x6f
 8009326:	bf0c      	ite	eq
 8009328:	2308      	moveq	r3, #8
 800932a:	230a      	movne	r3, #10
 800932c:	2100      	movs	r1, #0
 800932e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009332:	6866      	ldr	r6, [r4, #4]
 8009334:	60a6      	str	r6, [r4, #8]
 8009336:	2e00      	cmp	r6, #0
 8009338:	bfa2      	ittt	ge
 800933a:	6821      	ldrge	r1, [r4, #0]
 800933c:	f021 0104 	bicge.w	r1, r1, #4
 8009340:	6021      	strge	r1, [r4, #0]
 8009342:	b90d      	cbnz	r5, 8009348 <_printf_i+0x118>
 8009344:	2e00      	cmp	r6, #0
 8009346:	d04d      	beq.n	80093e4 <_printf_i+0x1b4>
 8009348:	4616      	mov	r6, r2
 800934a:	fbb5 f1f3 	udiv	r1, r5, r3
 800934e:	fb03 5711 	mls	r7, r3, r1, r5
 8009352:	5dc7      	ldrb	r7, [r0, r7]
 8009354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009358:	462f      	mov	r7, r5
 800935a:	42bb      	cmp	r3, r7
 800935c:	460d      	mov	r5, r1
 800935e:	d9f4      	bls.n	800934a <_printf_i+0x11a>
 8009360:	2b08      	cmp	r3, #8
 8009362:	d10b      	bne.n	800937c <_printf_i+0x14c>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	07df      	lsls	r7, r3, #31
 8009368:	d508      	bpl.n	800937c <_printf_i+0x14c>
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	6861      	ldr	r1, [r4, #4]
 800936e:	4299      	cmp	r1, r3
 8009370:	bfde      	ittt	le
 8009372:	2330      	movle	r3, #48	; 0x30
 8009374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800937c:	1b92      	subs	r2, r2, r6
 800937e:	6122      	str	r2, [r4, #16]
 8009380:	f8cd a000 	str.w	sl, [sp]
 8009384:	464b      	mov	r3, r9
 8009386:	aa03      	add	r2, sp, #12
 8009388:	4621      	mov	r1, r4
 800938a:	4640      	mov	r0, r8
 800938c:	f7ff fee2 	bl	8009154 <_printf_common>
 8009390:	3001      	adds	r0, #1
 8009392:	d14c      	bne.n	800942e <_printf_i+0x1fe>
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	b004      	add	sp, #16
 800939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939e:	4835      	ldr	r0, [pc, #212]	; (8009474 <_printf_i+0x244>)
 80093a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	680e      	ldr	r6, [r1, #0]
 80093a8:	061f      	lsls	r7, r3, #24
 80093aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80093ae:	600e      	str	r6, [r1, #0]
 80093b0:	d514      	bpl.n	80093dc <_printf_i+0x1ac>
 80093b2:	07d9      	lsls	r1, r3, #31
 80093b4:	bf44      	itt	mi
 80093b6:	f043 0320 	orrmi.w	r3, r3, #32
 80093ba:	6023      	strmi	r3, [r4, #0]
 80093bc:	b91d      	cbnz	r5, 80093c6 <_printf_i+0x196>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	f023 0320 	bic.w	r3, r3, #32
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	2310      	movs	r3, #16
 80093c8:	e7b0      	b.n	800932c <_printf_i+0xfc>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	f043 0320 	orr.w	r3, r3, #32
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	2378      	movs	r3, #120	; 0x78
 80093d4:	4828      	ldr	r0, [pc, #160]	; (8009478 <_printf_i+0x248>)
 80093d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093da:	e7e3      	b.n	80093a4 <_printf_i+0x174>
 80093dc:	065e      	lsls	r6, r3, #25
 80093de:	bf48      	it	mi
 80093e0:	b2ad      	uxthmi	r5, r5
 80093e2:	e7e6      	b.n	80093b2 <_printf_i+0x182>
 80093e4:	4616      	mov	r6, r2
 80093e6:	e7bb      	b.n	8009360 <_printf_i+0x130>
 80093e8:	680b      	ldr	r3, [r1, #0]
 80093ea:	6826      	ldr	r6, [r4, #0]
 80093ec:	6960      	ldr	r0, [r4, #20]
 80093ee:	1d1d      	adds	r5, r3, #4
 80093f0:	600d      	str	r5, [r1, #0]
 80093f2:	0635      	lsls	r5, r6, #24
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	d501      	bpl.n	80093fc <_printf_i+0x1cc>
 80093f8:	6018      	str	r0, [r3, #0]
 80093fa:	e002      	b.n	8009402 <_printf_i+0x1d2>
 80093fc:	0671      	lsls	r1, r6, #25
 80093fe:	d5fb      	bpl.n	80093f8 <_printf_i+0x1c8>
 8009400:	8018      	strh	r0, [r3, #0]
 8009402:	2300      	movs	r3, #0
 8009404:	6123      	str	r3, [r4, #16]
 8009406:	4616      	mov	r6, r2
 8009408:	e7ba      	b.n	8009380 <_printf_i+0x150>
 800940a:	680b      	ldr	r3, [r1, #0]
 800940c:	1d1a      	adds	r2, r3, #4
 800940e:	600a      	str	r2, [r1, #0]
 8009410:	681e      	ldr	r6, [r3, #0]
 8009412:	6862      	ldr	r2, [r4, #4]
 8009414:	2100      	movs	r1, #0
 8009416:	4630      	mov	r0, r6
 8009418:	f7f6 fee2 	bl	80001e0 <memchr>
 800941c:	b108      	cbz	r0, 8009422 <_printf_i+0x1f2>
 800941e:	1b80      	subs	r0, r0, r6
 8009420:	6060      	str	r0, [r4, #4]
 8009422:	6863      	ldr	r3, [r4, #4]
 8009424:	6123      	str	r3, [r4, #16]
 8009426:	2300      	movs	r3, #0
 8009428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800942c:	e7a8      	b.n	8009380 <_printf_i+0x150>
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	4632      	mov	r2, r6
 8009432:	4649      	mov	r1, r9
 8009434:	4640      	mov	r0, r8
 8009436:	47d0      	blx	sl
 8009438:	3001      	adds	r0, #1
 800943a:	d0ab      	beq.n	8009394 <_printf_i+0x164>
 800943c:	6823      	ldr	r3, [r4, #0]
 800943e:	079b      	lsls	r3, r3, #30
 8009440:	d413      	bmi.n	800946a <_printf_i+0x23a>
 8009442:	68e0      	ldr	r0, [r4, #12]
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	4298      	cmp	r0, r3
 8009448:	bfb8      	it	lt
 800944a:	4618      	movlt	r0, r3
 800944c:	e7a4      	b.n	8009398 <_printf_i+0x168>
 800944e:	2301      	movs	r3, #1
 8009450:	4632      	mov	r2, r6
 8009452:	4649      	mov	r1, r9
 8009454:	4640      	mov	r0, r8
 8009456:	47d0      	blx	sl
 8009458:	3001      	adds	r0, #1
 800945a:	d09b      	beq.n	8009394 <_printf_i+0x164>
 800945c:	3501      	adds	r5, #1
 800945e:	68e3      	ldr	r3, [r4, #12]
 8009460:	9903      	ldr	r1, [sp, #12]
 8009462:	1a5b      	subs	r3, r3, r1
 8009464:	42ab      	cmp	r3, r5
 8009466:	dcf2      	bgt.n	800944e <_printf_i+0x21e>
 8009468:	e7eb      	b.n	8009442 <_printf_i+0x212>
 800946a:	2500      	movs	r5, #0
 800946c:	f104 0619 	add.w	r6, r4, #25
 8009470:	e7f5      	b.n	800945e <_printf_i+0x22e>
 8009472:	bf00      	nop
 8009474:	0800ed3a 	.word	0x0800ed3a
 8009478:	0800ed4b 	.word	0x0800ed4b

0800947c <siprintf>:
 800947c:	b40e      	push	{r1, r2, r3}
 800947e:	b500      	push	{lr}
 8009480:	b09c      	sub	sp, #112	; 0x70
 8009482:	ab1d      	add	r3, sp, #116	; 0x74
 8009484:	9002      	str	r0, [sp, #8]
 8009486:	9006      	str	r0, [sp, #24]
 8009488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800948c:	4809      	ldr	r0, [pc, #36]	; (80094b4 <siprintf+0x38>)
 800948e:	9107      	str	r1, [sp, #28]
 8009490:	9104      	str	r1, [sp, #16]
 8009492:	4909      	ldr	r1, [pc, #36]	; (80094b8 <siprintf+0x3c>)
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	9105      	str	r1, [sp, #20]
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	a902      	add	r1, sp, #8
 80094a0:	f001 fb34 	bl	800ab0c <_svfiprintf_r>
 80094a4:	9b02      	ldr	r3, [sp, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	b01c      	add	sp, #112	; 0x70
 80094ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b0:	b003      	add	sp, #12
 80094b2:	4770      	bx	lr
 80094b4:	20000064 	.word	0x20000064
 80094b8:	ffff0208 	.word	0xffff0208

080094bc <quorem>:
 80094bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	6903      	ldr	r3, [r0, #16]
 80094c2:	690c      	ldr	r4, [r1, #16]
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	4607      	mov	r7, r0
 80094c8:	f2c0 8081 	blt.w	80095ce <quorem+0x112>
 80094cc:	3c01      	subs	r4, #1
 80094ce:	f101 0814 	add.w	r8, r1, #20
 80094d2:	f100 0514 	add.w	r5, r0, #20
 80094d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094e4:	3301      	adds	r3, #1
 80094e6:	429a      	cmp	r2, r3
 80094e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80094f4:	d331      	bcc.n	800955a <quorem+0x9e>
 80094f6:	f04f 0e00 	mov.w	lr, #0
 80094fa:	4640      	mov	r0, r8
 80094fc:	46ac      	mov	ip, r5
 80094fe:	46f2      	mov	sl, lr
 8009500:	f850 2b04 	ldr.w	r2, [r0], #4
 8009504:	b293      	uxth	r3, r2
 8009506:	fb06 e303 	mla	r3, r6, r3, lr
 800950a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800950e:	b29b      	uxth	r3, r3
 8009510:	ebaa 0303 	sub.w	r3, sl, r3
 8009514:	0c12      	lsrs	r2, r2, #16
 8009516:	f8dc a000 	ldr.w	sl, [ip]
 800951a:	fb06 e202 	mla	r2, r6, r2, lr
 800951e:	fa13 f38a 	uxtah	r3, r3, sl
 8009522:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009526:	fa1f fa82 	uxth.w	sl, r2
 800952a:	f8dc 2000 	ldr.w	r2, [ip]
 800952e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009532:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009536:	b29b      	uxth	r3, r3
 8009538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800953c:	4581      	cmp	r9, r0
 800953e:	f84c 3b04 	str.w	r3, [ip], #4
 8009542:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009546:	d2db      	bcs.n	8009500 <quorem+0x44>
 8009548:	f855 300b 	ldr.w	r3, [r5, fp]
 800954c:	b92b      	cbnz	r3, 800955a <quorem+0x9e>
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	3b04      	subs	r3, #4
 8009552:	429d      	cmp	r5, r3
 8009554:	461a      	mov	r2, r3
 8009556:	d32e      	bcc.n	80095b6 <quorem+0xfa>
 8009558:	613c      	str	r4, [r7, #16]
 800955a:	4638      	mov	r0, r7
 800955c:	f001 f8c0 	bl	800a6e0 <__mcmp>
 8009560:	2800      	cmp	r0, #0
 8009562:	db24      	blt.n	80095ae <quorem+0xf2>
 8009564:	3601      	adds	r6, #1
 8009566:	4628      	mov	r0, r5
 8009568:	f04f 0c00 	mov.w	ip, #0
 800956c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009570:	f8d0 e000 	ldr.w	lr, [r0]
 8009574:	b293      	uxth	r3, r2
 8009576:	ebac 0303 	sub.w	r3, ip, r3
 800957a:	0c12      	lsrs	r2, r2, #16
 800957c:	fa13 f38e 	uxtah	r3, r3, lr
 8009580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009588:	b29b      	uxth	r3, r3
 800958a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800958e:	45c1      	cmp	r9, r8
 8009590:	f840 3b04 	str.w	r3, [r0], #4
 8009594:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009598:	d2e8      	bcs.n	800956c <quorem+0xb0>
 800959a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800959e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095a2:	b922      	cbnz	r2, 80095ae <quorem+0xf2>
 80095a4:	3b04      	subs	r3, #4
 80095a6:	429d      	cmp	r5, r3
 80095a8:	461a      	mov	r2, r3
 80095aa:	d30a      	bcc.n	80095c2 <quorem+0x106>
 80095ac:	613c      	str	r4, [r7, #16]
 80095ae:	4630      	mov	r0, r6
 80095b0:	b003      	add	sp, #12
 80095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	3b04      	subs	r3, #4
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	d1cc      	bne.n	8009558 <quorem+0x9c>
 80095be:	3c01      	subs	r4, #1
 80095c0:	e7c7      	b.n	8009552 <quorem+0x96>
 80095c2:	6812      	ldr	r2, [r2, #0]
 80095c4:	3b04      	subs	r3, #4
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	d1f0      	bne.n	80095ac <quorem+0xf0>
 80095ca:	3c01      	subs	r4, #1
 80095cc:	e7eb      	b.n	80095a6 <quorem+0xea>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e7ee      	b.n	80095b0 <quorem+0xf4>
 80095d2:	0000      	movs	r0, r0
 80095d4:	0000      	movs	r0, r0
	...

080095d8 <_dtoa_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ed2d 8b02 	vpush	{d8}
 80095e0:	ec57 6b10 	vmov	r6, r7, d0
 80095e4:	b095      	sub	sp, #84	; 0x54
 80095e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095ec:	9105      	str	r1, [sp, #20]
 80095ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80095f2:	4604      	mov	r4, r0
 80095f4:	9209      	str	r2, [sp, #36]	; 0x24
 80095f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80095f8:	b975      	cbnz	r5, 8009618 <_dtoa_r+0x40>
 80095fa:	2010      	movs	r0, #16
 80095fc:	f000 fddc 	bl	800a1b8 <malloc>
 8009600:	4602      	mov	r2, r0
 8009602:	6260      	str	r0, [r4, #36]	; 0x24
 8009604:	b920      	cbnz	r0, 8009610 <_dtoa_r+0x38>
 8009606:	4bb2      	ldr	r3, [pc, #712]	; (80098d0 <_dtoa_r+0x2f8>)
 8009608:	21ea      	movs	r1, #234	; 0xea
 800960a:	48b2      	ldr	r0, [pc, #712]	; (80098d4 <_dtoa_r+0x2fc>)
 800960c:	f001 fb8e 	bl	800ad2c <__assert_func>
 8009610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009614:	6005      	str	r5, [r0, #0]
 8009616:	60c5      	str	r5, [r0, #12]
 8009618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800961a:	6819      	ldr	r1, [r3, #0]
 800961c:	b151      	cbz	r1, 8009634 <_dtoa_r+0x5c>
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	604a      	str	r2, [r1, #4]
 8009622:	2301      	movs	r3, #1
 8009624:	4093      	lsls	r3, r2
 8009626:	608b      	str	r3, [r1, #8]
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fe1b 	bl	800a264 <_Bfree>
 800962e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	1e3b      	subs	r3, r7, #0
 8009636:	bfb9      	ittee	lt
 8009638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800963c:	9303      	strlt	r3, [sp, #12]
 800963e:	2300      	movge	r3, #0
 8009640:	f8c8 3000 	strge.w	r3, [r8]
 8009644:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009648:	4ba3      	ldr	r3, [pc, #652]	; (80098d8 <_dtoa_r+0x300>)
 800964a:	bfbc      	itt	lt
 800964c:	2201      	movlt	r2, #1
 800964e:	f8c8 2000 	strlt.w	r2, [r8]
 8009652:	ea33 0309 	bics.w	r3, r3, r9
 8009656:	d11b      	bne.n	8009690 <_dtoa_r+0xb8>
 8009658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800965a:	f242 730f 	movw	r3, #9999	; 0x270f
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009664:	4333      	orrs	r3, r6
 8009666:	f000 857a 	beq.w	800a15e <_dtoa_r+0xb86>
 800966a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800966c:	b963      	cbnz	r3, 8009688 <_dtoa_r+0xb0>
 800966e:	4b9b      	ldr	r3, [pc, #620]	; (80098dc <_dtoa_r+0x304>)
 8009670:	e024      	b.n	80096bc <_dtoa_r+0xe4>
 8009672:	4b9b      	ldr	r3, [pc, #620]	; (80098e0 <_dtoa_r+0x308>)
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	9800      	ldr	r0, [sp, #0]
 800967e:	b015      	add	sp, #84	; 0x54
 8009680:	ecbd 8b02 	vpop	{d8}
 8009684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009688:	4b94      	ldr	r3, [pc, #592]	; (80098dc <_dtoa_r+0x304>)
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	3303      	adds	r3, #3
 800968e:	e7f3      	b.n	8009678 <_dtoa_r+0xa0>
 8009690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009694:	2200      	movs	r2, #0
 8009696:	ec51 0b17 	vmov	r0, r1, d7
 800969a:	2300      	movs	r3, #0
 800969c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80096a0:	f7f7 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 80096a4:	4680      	mov	r8, r0
 80096a6:	b158      	cbz	r0, 80096c0 <_dtoa_r+0xe8>
 80096a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096aa:	2301      	movs	r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 8551 	beq.w	800a158 <_dtoa_r+0xb80>
 80096b6:	488b      	ldr	r0, [pc, #556]	; (80098e4 <_dtoa_r+0x30c>)
 80096b8:	6018      	str	r0, [r3, #0]
 80096ba:	1e43      	subs	r3, r0, #1
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	e7dd      	b.n	800967c <_dtoa_r+0xa4>
 80096c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80096c4:	aa12      	add	r2, sp, #72	; 0x48
 80096c6:	a913      	add	r1, sp, #76	; 0x4c
 80096c8:	4620      	mov	r0, r4
 80096ca:	f001 f8ad 	bl	800a828 <__d2b>
 80096ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096d2:	4683      	mov	fp, r0
 80096d4:	2d00      	cmp	r5, #0
 80096d6:	d07c      	beq.n	80097d2 <_dtoa_r+0x1fa>
 80096d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80096de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80096e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096f2:	4b7d      	ldr	r3, [pc, #500]	; (80098e8 <_dtoa_r+0x310>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f6 fdc5 	bl	8000288 <__aeabi_dsub>
 80096fe:	a36e      	add	r3, pc, #440	; (adr r3, 80098b8 <_dtoa_r+0x2e0>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f6 ff78 	bl	80005f8 <__aeabi_dmul>
 8009708:	a36d      	add	r3, pc, #436	; (adr r3, 80098c0 <_dtoa_r+0x2e8>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7f6 fdbd 	bl	800028c <__adddf3>
 8009712:	4606      	mov	r6, r0
 8009714:	4628      	mov	r0, r5
 8009716:	460f      	mov	r7, r1
 8009718:	f7f6 ff04 	bl	8000524 <__aeabi_i2d>
 800971c:	a36a      	add	r3, pc, #424	; (adr r3, 80098c8 <_dtoa_r+0x2f0>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f6 ff69 	bl	80005f8 <__aeabi_dmul>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f6 fdad 	bl	800028c <__adddf3>
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	f7f7 fa0f 	bl	8000b58 <__aeabi_d2iz>
 800973a:	2200      	movs	r2, #0
 800973c:	4682      	mov	sl, r0
 800973e:	2300      	movs	r3, #0
 8009740:	4630      	mov	r0, r6
 8009742:	4639      	mov	r1, r7
 8009744:	f7f7 f9ca 	bl	8000adc <__aeabi_dcmplt>
 8009748:	b148      	cbz	r0, 800975e <_dtoa_r+0x186>
 800974a:	4650      	mov	r0, sl
 800974c:	f7f6 feea 	bl	8000524 <__aeabi_i2d>
 8009750:	4632      	mov	r2, r6
 8009752:	463b      	mov	r3, r7
 8009754:	f7f7 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009758:	b908      	cbnz	r0, 800975e <_dtoa_r+0x186>
 800975a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800975e:	f1ba 0f16 	cmp.w	sl, #22
 8009762:	d854      	bhi.n	800980e <_dtoa_r+0x236>
 8009764:	4b61      	ldr	r3, [pc, #388]	; (80098ec <_dtoa_r+0x314>)
 8009766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009772:	f7f7 f9b3 	bl	8000adc <__aeabi_dcmplt>
 8009776:	2800      	cmp	r0, #0
 8009778:	d04b      	beq.n	8009812 <_dtoa_r+0x23a>
 800977a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800977e:	2300      	movs	r3, #0
 8009780:	930e      	str	r3, [sp, #56]	; 0x38
 8009782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009784:	1b5d      	subs	r5, r3, r5
 8009786:	1e6b      	subs	r3, r5, #1
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	bf43      	ittte	mi
 800978c:	2300      	movmi	r3, #0
 800978e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009792:	9304      	strmi	r3, [sp, #16]
 8009794:	f04f 0800 	movpl.w	r8, #0
 8009798:	f1ba 0f00 	cmp.w	sl, #0
 800979c:	db3b      	blt.n	8009816 <_dtoa_r+0x23e>
 800979e:	9b04      	ldr	r3, [sp, #16]
 80097a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80097a4:	4453      	add	r3, sl
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	2300      	movs	r3, #0
 80097aa:	9306      	str	r3, [sp, #24]
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	2b09      	cmp	r3, #9
 80097b0:	d869      	bhi.n	8009886 <_dtoa_r+0x2ae>
 80097b2:	2b05      	cmp	r3, #5
 80097b4:	bfc4      	itt	gt
 80097b6:	3b04      	subgt	r3, #4
 80097b8:	9305      	strgt	r3, [sp, #20]
 80097ba:	9b05      	ldr	r3, [sp, #20]
 80097bc:	f1a3 0302 	sub.w	r3, r3, #2
 80097c0:	bfcc      	ite	gt
 80097c2:	2500      	movgt	r5, #0
 80097c4:	2501      	movle	r5, #1
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d869      	bhi.n	800989e <_dtoa_r+0x2c6>
 80097ca:	e8df f003 	tbb	[pc, r3]
 80097ce:	4e2c      	.short	0x4e2c
 80097d0:	5a4c      	.short	0x5a4c
 80097d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80097d6:	441d      	add	r5, r3
 80097d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097dc:	2b20      	cmp	r3, #32
 80097de:	bfc1      	itttt	gt
 80097e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80097ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097f0:	bfda      	itte	le
 80097f2:	f1c3 0320 	rsble	r3, r3, #32
 80097f6:	fa06 f003 	lslle.w	r0, r6, r3
 80097fa:	4318      	orrgt	r0, r3
 80097fc:	f7f6 fe82 	bl	8000504 <__aeabi_ui2d>
 8009800:	2301      	movs	r3, #1
 8009802:	4606      	mov	r6, r0
 8009804:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009808:	3d01      	subs	r5, #1
 800980a:	9310      	str	r3, [sp, #64]	; 0x40
 800980c:	e771      	b.n	80096f2 <_dtoa_r+0x11a>
 800980e:	2301      	movs	r3, #1
 8009810:	e7b6      	b.n	8009780 <_dtoa_r+0x1a8>
 8009812:	900e      	str	r0, [sp, #56]	; 0x38
 8009814:	e7b5      	b.n	8009782 <_dtoa_r+0x1aa>
 8009816:	f1ca 0300 	rsb	r3, sl, #0
 800981a:	9306      	str	r3, [sp, #24]
 800981c:	2300      	movs	r3, #0
 800981e:	eba8 080a 	sub.w	r8, r8, sl
 8009822:	930d      	str	r3, [sp, #52]	; 0x34
 8009824:	e7c2      	b.n	80097ac <_dtoa_r+0x1d4>
 8009826:	2300      	movs	r3, #0
 8009828:	9308      	str	r3, [sp, #32]
 800982a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800982c:	2b00      	cmp	r3, #0
 800982e:	dc39      	bgt.n	80098a4 <_dtoa_r+0x2cc>
 8009830:	f04f 0901 	mov.w	r9, #1
 8009834:	f8cd 9004 	str.w	r9, [sp, #4]
 8009838:	464b      	mov	r3, r9
 800983a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800983e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009840:	2200      	movs	r2, #0
 8009842:	6042      	str	r2, [r0, #4]
 8009844:	2204      	movs	r2, #4
 8009846:	f102 0614 	add.w	r6, r2, #20
 800984a:	429e      	cmp	r6, r3
 800984c:	6841      	ldr	r1, [r0, #4]
 800984e:	d92f      	bls.n	80098b0 <_dtoa_r+0x2d8>
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fcc7 	bl	800a1e4 <_Balloc>
 8009856:	9000      	str	r0, [sp, #0]
 8009858:	2800      	cmp	r0, #0
 800985a:	d14b      	bne.n	80098f4 <_dtoa_r+0x31c>
 800985c:	4b24      	ldr	r3, [pc, #144]	; (80098f0 <_dtoa_r+0x318>)
 800985e:	4602      	mov	r2, r0
 8009860:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009864:	e6d1      	b.n	800960a <_dtoa_r+0x32>
 8009866:	2301      	movs	r3, #1
 8009868:	e7de      	b.n	8009828 <_dtoa_r+0x250>
 800986a:	2300      	movs	r3, #0
 800986c:	9308      	str	r3, [sp, #32]
 800986e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009870:	eb0a 0903 	add.w	r9, sl, r3
 8009874:	f109 0301 	add.w	r3, r9, #1
 8009878:	2b01      	cmp	r3, #1
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	bfb8      	it	lt
 800987e:	2301      	movlt	r3, #1
 8009880:	e7dd      	b.n	800983e <_dtoa_r+0x266>
 8009882:	2301      	movs	r3, #1
 8009884:	e7f2      	b.n	800986c <_dtoa_r+0x294>
 8009886:	2501      	movs	r5, #1
 8009888:	2300      	movs	r3, #0
 800988a:	9305      	str	r3, [sp, #20]
 800988c:	9508      	str	r5, [sp, #32]
 800988e:	f04f 39ff 	mov.w	r9, #4294967295
 8009892:	2200      	movs	r2, #0
 8009894:	f8cd 9004 	str.w	r9, [sp, #4]
 8009898:	2312      	movs	r3, #18
 800989a:	9209      	str	r2, [sp, #36]	; 0x24
 800989c:	e7cf      	b.n	800983e <_dtoa_r+0x266>
 800989e:	2301      	movs	r3, #1
 80098a0:	9308      	str	r3, [sp, #32]
 80098a2:	e7f4      	b.n	800988e <_dtoa_r+0x2b6>
 80098a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80098a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80098ac:	464b      	mov	r3, r9
 80098ae:	e7c6      	b.n	800983e <_dtoa_r+0x266>
 80098b0:	3101      	adds	r1, #1
 80098b2:	6041      	str	r1, [r0, #4]
 80098b4:	0052      	lsls	r2, r2, #1
 80098b6:	e7c6      	b.n	8009846 <_dtoa_r+0x26e>
 80098b8:	636f4361 	.word	0x636f4361
 80098bc:	3fd287a7 	.word	0x3fd287a7
 80098c0:	8b60c8b3 	.word	0x8b60c8b3
 80098c4:	3fc68a28 	.word	0x3fc68a28
 80098c8:	509f79fb 	.word	0x509f79fb
 80098cc:	3fd34413 	.word	0x3fd34413
 80098d0:	0800ed69 	.word	0x0800ed69
 80098d4:	0800ed80 	.word	0x0800ed80
 80098d8:	7ff00000 	.word	0x7ff00000
 80098dc:	0800ed65 	.word	0x0800ed65
 80098e0:	0800ed5c 	.word	0x0800ed5c
 80098e4:	0800ed39 	.word	0x0800ed39
 80098e8:	3ff80000 	.word	0x3ff80000
 80098ec:	0800ee78 	.word	0x0800ee78
 80098f0:	0800eddf 	.word	0x0800eddf
 80098f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f6:	9a00      	ldr	r2, [sp, #0]
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	2b0e      	cmp	r3, #14
 80098fe:	f200 80ad 	bhi.w	8009a5c <_dtoa_r+0x484>
 8009902:	2d00      	cmp	r5, #0
 8009904:	f000 80aa 	beq.w	8009a5c <_dtoa_r+0x484>
 8009908:	f1ba 0f00 	cmp.w	sl, #0
 800990c:	dd36      	ble.n	800997c <_dtoa_r+0x3a4>
 800990e:	4ac3      	ldr	r2, [pc, #780]	; (8009c1c <_dtoa_r+0x644>)
 8009910:	f00a 030f 	and.w	r3, sl, #15
 8009914:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009918:	ed93 7b00 	vldr	d7, [r3]
 800991c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009920:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009924:	eeb0 8a47 	vmov.f32	s16, s14
 8009928:	eef0 8a67 	vmov.f32	s17, s15
 800992c:	d016      	beq.n	800995c <_dtoa_r+0x384>
 800992e:	4bbc      	ldr	r3, [pc, #752]	; (8009c20 <_dtoa_r+0x648>)
 8009930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009938:	f7f6 ff88 	bl	800084c <__aeabi_ddiv>
 800993c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009940:	f007 070f 	and.w	r7, r7, #15
 8009944:	2503      	movs	r5, #3
 8009946:	4eb6      	ldr	r6, [pc, #728]	; (8009c20 <_dtoa_r+0x648>)
 8009948:	b957      	cbnz	r7, 8009960 <_dtoa_r+0x388>
 800994a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800994e:	ec53 2b18 	vmov	r2, r3, d8
 8009952:	f7f6 ff7b 	bl	800084c <__aeabi_ddiv>
 8009956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800995a:	e029      	b.n	80099b0 <_dtoa_r+0x3d8>
 800995c:	2502      	movs	r5, #2
 800995e:	e7f2      	b.n	8009946 <_dtoa_r+0x36e>
 8009960:	07f9      	lsls	r1, r7, #31
 8009962:	d508      	bpl.n	8009976 <_dtoa_r+0x39e>
 8009964:	ec51 0b18 	vmov	r0, r1, d8
 8009968:	e9d6 2300 	ldrd	r2, r3, [r6]
 800996c:	f7f6 fe44 	bl	80005f8 <__aeabi_dmul>
 8009970:	ec41 0b18 	vmov	d8, r0, r1
 8009974:	3501      	adds	r5, #1
 8009976:	107f      	asrs	r7, r7, #1
 8009978:	3608      	adds	r6, #8
 800997a:	e7e5      	b.n	8009948 <_dtoa_r+0x370>
 800997c:	f000 80a6 	beq.w	8009acc <_dtoa_r+0x4f4>
 8009980:	f1ca 0600 	rsb	r6, sl, #0
 8009984:	4ba5      	ldr	r3, [pc, #660]	; (8009c1c <_dtoa_r+0x644>)
 8009986:	4fa6      	ldr	r7, [pc, #664]	; (8009c20 <_dtoa_r+0x648>)
 8009988:	f006 020f 	and.w	r2, r6, #15
 800998c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009998:	f7f6 fe2e 	bl	80005f8 <__aeabi_dmul>
 800999c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a0:	1136      	asrs	r6, r6, #4
 80099a2:	2300      	movs	r3, #0
 80099a4:	2502      	movs	r5, #2
 80099a6:	2e00      	cmp	r6, #0
 80099a8:	f040 8085 	bne.w	8009ab6 <_dtoa_r+0x4de>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1d2      	bne.n	8009956 <_dtoa_r+0x37e>
 80099b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 808c 	beq.w	8009ad0 <_dtoa_r+0x4f8>
 80099b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099bc:	4b99      	ldr	r3, [pc, #612]	; (8009c24 <_dtoa_r+0x64c>)
 80099be:	2200      	movs	r2, #0
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f88a 	bl	8000adc <__aeabi_dcmplt>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f000 8081 	beq.w	8009ad0 <_dtoa_r+0x4f8>
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d07d      	beq.n	8009ad0 <_dtoa_r+0x4f8>
 80099d4:	f1b9 0f00 	cmp.w	r9, #0
 80099d8:	dd3c      	ble.n	8009a54 <_dtoa_r+0x47c>
 80099da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	2200      	movs	r2, #0
 80099e2:	4b91      	ldr	r3, [pc, #580]	; (8009c28 <_dtoa_r+0x650>)
 80099e4:	4630      	mov	r0, r6
 80099e6:	4639      	mov	r1, r7
 80099e8:	f7f6 fe06 	bl	80005f8 <__aeabi_dmul>
 80099ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f0:	3501      	adds	r5, #1
 80099f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80099f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099fa:	4628      	mov	r0, r5
 80099fc:	f7f6 fd92 	bl	8000524 <__aeabi_i2d>
 8009a00:	4632      	mov	r2, r6
 8009a02:	463b      	mov	r3, r7
 8009a04:	f7f6 fdf8 	bl	80005f8 <__aeabi_dmul>
 8009a08:	4b88      	ldr	r3, [pc, #544]	; (8009c2c <_dtoa_r+0x654>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f7f6 fc3e 	bl	800028c <__adddf3>
 8009a10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a18:	9303      	str	r3, [sp, #12]
 8009a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d15c      	bne.n	8009ada <_dtoa_r+0x502>
 8009a20:	4b83      	ldr	r3, [pc, #524]	; (8009c30 <_dtoa_r+0x658>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f6 fc2e 	bl	8000288 <__aeabi_dsub>
 8009a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a30:	4606      	mov	r6, r0
 8009a32:	460f      	mov	r7, r1
 8009a34:	f7f7 f870 	bl	8000b18 <__aeabi_dcmpgt>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	f040 8296 	bne.w	8009f6a <_dtoa_r+0x992>
 8009a3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a42:	4630      	mov	r0, r6
 8009a44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f7 f847 	bl	8000adc <__aeabi_dcmplt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f040 8288 	bne.w	8009f64 <_dtoa_r+0x98c>
 8009a54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f2c0 8158 	blt.w	8009d14 <_dtoa_r+0x73c>
 8009a64:	f1ba 0f0e 	cmp.w	sl, #14
 8009a68:	f300 8154 	bgt.w	8009d14 <_dtoa_r+0x73c>
 8009a6c:	4b6b      	ldr	r3, [pc, #428]	; (8009c1c <_dtoa_r+0x644>)
 8009a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f280 80e3 	bge.w	8009c44 <_dtoa_r+0x66c>
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f300 80df 	bgt.w	8009c44 <_dtoa_r+0x66c>
 8009a86:	f040 826d 	bne.w	8009f64 <_dtoa_r+0x98c>
 8009a8a:	4b69      	ldr	r3, [pc, #420]	; (8009c30 <_dtoa_r+0x658>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4640      	mov	r0, r8
 8009a90:	4649      	mov	r1, r9
 8009a92:	f7f6 fdb1 	bl	80005f8 <__aeabi_dmul>
 8009a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a9a:	f7f7 f833 	bl	8000b04 <__aeabi_dcmpge>
 8009a9e:	9e01      	ldr	r6, [sp, #4]
 8009aa0:	4637      	mov	r7, r6
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f040 8243 	bne.w	8009f2e <_dtoa_r+0x956>
 8009aa8:	9d00      	ldr	r5, [sp, #0]
 8009aaa:	2331      	movs	r3, #49	; 0x31
 8009aac:	f805 3b01 	strb.w	r3, [r5], #1
 8009ab0:	f10a 0a01 	add.w	sl, sl, #1
 8009ab4:	e23f      	b.n	8009f36 <_dtoa_r+0x95e>
 8009ab6:	07f2      	lsls	r2, r6, #31
 8009ab8:	d505      	bpl.n	8009ac6 <_dtoa_r+0x4ee>
 8009aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abe:	f7f6 fd9b 	bl	80005f8 <__aeabi_dmul>
 8009ac2:	3501      	adds	r5, #1
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	1076      	asrs	r6, r6, #1
 8009ac8:	3708      	adds	r7, #8
 8009aca:	e76c      	b.n	80099a6 <_dtoa_r+0x3ce>
 8009acc:	2502      	movs	r5, #2
 8009ace:	e76f      	b.n	80099b0 <_dtoa_r+0x3d8>
 8009ad0:	9b01      	ldr	r3, [sp, #4]
 8009ad2:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ad8:	e78d      	b.n	80099f6 <_dtoa_r+0x41e>
 8009ada:	9900      	ldr	r1, [sp, #0]
 8009adc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ae0:	4b4e      	ldr	r3, [pc, #312]	; (8009c1c <_dtoa_r+0x644>)
 8009ae2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ae6:	4401      	add	r1, r0
 8009ae8:	9102      	str	r1, [sp, #8]
 8009aea:	9908      	ldr	r1, [sp, #32]
 8009aec:	eeb0 8a47 	vmov.f32	s16, s14
 8009af0:	eef0 8a67 	vmov.f32	s17, s15
 8009af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d045      	beq.n	8009b8c <_dtoa_r+0x5b4>
 8009b00:	494c      	ldr	r1, [pc, #304]	; (8009c34 <_dtoa_r+0x65c>)
 8009b02:	2000      	movs	r0, #0
 8009b04:	f7f6 fea2 	bl	800084c <__aeabi_ddiv>
 8009b08:	ec53 2b18 	vmov	r2, r3, d8
 8009b0c:	f7f6 fbbc 	bl	8000288 <__aeabi_dsub>
 8009b10:	9d00      	ldr	r5, [sp, #0]
 8009b12:	ec41 0b18 	vmov	d8, r0, r1
 8009b16:	4639      	mov	r1, r7
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7f7 f81d 	bl	8000b58 <__aeabi_d2iz>
 8009b1e:	900c      	str	r0, [sp, #48]	; 0x30
 8009b20:	f7f6 fd00 	bl	8000524 <__aeabi_i2d>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4630      	mov	r0, r6
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f7f6 fbac 	bl	8000288 <__aeabi_dsub>
 8009b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b32:	3330      	adds	r3, #48	; 0x30
 8009b34:	f805 3b01 	strb.w	r3, [r5], #1
 8009b38:	ec53 2b18 	vmov	r2, r3, d8
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	f7f6 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d165      	bne.n	8009c14 <_dtoa_r+0x63c>
 8009b48:	4632      	mov	r2, r6
 8009b4a:	463b      	mov	r3, r7
 8009b4c:	4935      	ldr	r1, [pc, #212]	; (8009c24 <_dtoa_r+0x64c>)
 8009b4e:	2000      	movs	r0, #0
 8009b50:	f7f6 fb9a 	bl	8000288 <__aeabi_dsub>
 8009b54:	ec53 2b18 	vmov	r2, r3, d8
 8009b58:	f7f6 ffc0 	bl	8000adc <__aeabi_dcmplt>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	f040 80b9 	bne.w	8009cd4 <_dtoa_r+0x6fc>
 8009b62:	9b02      	ldr	r3, [sp, #8]
 8009b64:	429d      	cmp	r5, r3
 8009b66:	f43f af75 	beq.w	8009a54 <_dtoa_r+0x47c>
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	; (8009c28 <_dtoa_r+0x650>)
 8009b6c:	ec51 0b18 	vmov	r0, r1, d8
 8009b70:	2200      	movs	r2, #0
 8009b72:	f7f6 fd41 	bl	80005f8 <__aeabi_dmul>
 8009b76:	4b2c      	ldr	r3, [pc, #176]	; (8009c28 <_dtoa_r+0x650>)
 8009b78:	ec41 0b18 	vmov	d8, r0, r1
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	f7f6 fd39 	bl	80005f8 <__aeabi_dmul>
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	e7c4      	b.n	8009b16 <_dtoa_r+0x53e>
 8009b8c:	ec51 0b17 	vmov	r0, r1, d7
 8009b90:	f7f6 fd32 	bl	80005f8 <__aeabi_dmul>
 8009b94:	9b02      	ldr	r3, [sp, #8]
 8009b96:	9d00      	ldr	r5, [sp, #0]
 8009b98:	930c      	str	r3, [sp, #48]	; 0x30
 8009b9a:	ec41 0b18 	vmov	d8, r0, r1
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7f6 ffd9 	bl	8000b58 <__aeabi_d2iz>
 8009ba6:	9011      	str	r0, [sp, #68]	; 0x44
 8009ba8:	f7f6 fcbc 	bl	8000524 <__aeabi_i2d>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb68 	bl	8000288 <__aeabi_dsub>
 8009bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bba:	3330      	adds	r3, #48	; 0x30
 8009bbc:	f805 3b01 	strb.w	r3, [r5], #1
 8009bc0:	9b02      	ldr	r3, [sp, #8]
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	460f      	mov	r7, r1
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	d134      	bne.n	8009c38 <_dtoa_r+0x660>
 8009bce:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <_dtoa_r+0x65c>)
 8009bd0:	ec51 0b18 	vmov	r0, r1, d8
 8009bd4:	f7f6 fb5a 	bl	800028c <__adddf3>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 ff9a 	bl	8000b18 <__aeabi_dcmpgt>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d175      	bne.n	8009cd4 <_dtoa_r+0x6fc>
 8009be8:	ec53 2b18 	vmov	r2, r3, d8
 8009bec:	4911      	ldr	r1, [pc, #68]	; (8009c34 <_dtoa_r+0x65c>)
 8009bee:	2000      	movs	r0, #0
 8009bf0:	f7f6 fb4a 	bl	8000288 <__aeabi_dsub>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 ff6e 	bl	8000adc <__aeabi_dcmplt>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	f43f af27 	beq.w	8009a54 <_dtoa_r+0x47c>
 8009c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c08:	1e6b      	subs	r3, r5, #1
 8009c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8009c0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c10:	2b30      	cmp	r3, #48	; 0x30
 8009c12:	d0f8      	beq.n	8009c06 <_dtoa_r+0x62e>
 8009c14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009c18:	e04a      	b.n	8009cb0 <_dtoa_r+0x6d8>
 8009c1a:	bf00      	nop
 8009c1c:	0800ee78 	.word	0x0800ee78
 8009c20:	0800ee50 	.word	0x0800ee50
 8009c24:	3ff00000 	.word	0x3ff00000
 8009c28:	40240000 	.word	0x40240000
 8009c2c:	401c0000 	.word	0x401c0000
 8009c30:	40140000 	.word	0x40140000
 8009c34:	3fe00000 	.word	0x3fe00000
 8009c38:	4baf      	ldr	r3, [pc, #700]	; (8009ef8 <_dtoa_r+0x920>)
 8009c3a:	f7f6 fcdd 	bl	80005f8 <__aeabi_dmul>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460f      	mov	r7, r1
 8009c42:	e7ac      	b.n	8009b9e <_dtoa_r+0x5c6>
 8009c44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c48:	9d00      	ldr	r5, [sp, #0]
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fdfb 	bl	800084c <__aeabi_ddiv>
 8009c56:	f7f6 ff7f 	bl	8000b58 <__aeabi_d2iz>
 8009c5a:	9002      	str	r0, [sp, #8]
 8009c5c:	f7f6 fc62 	bl	8000524 <__aeabi_i2d>
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	f7f6 fcc8 	bl	80005f8 <__aeabi_dmul>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 fb0a 	bl	8000288 <__aeabi_dsub>
 8009c74:	9e02      	ldr	r6, [sp, #8]
 8009c76:	9f01      	ldr	r7, [sp, #4]
 8009c78:	3630      	adds	r6, #48	; 0x30
 8009c7a:	f805 6b01 	strb.w	r6, [r5], #1
 8009c7e:	9e00      	ldr	r6, [sp, #0]
 8009c80:	1bae      	subs	r6, r5, r6
 8009c82:	42b7      	cmp	r7, r6
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	d137      	bne.n	8009cfa <_dtoa_r+0x722>
 8009c8a:	f7f6 faff 	bl	800028c <__adddf3>
 8009c8e:	4642      	mov	r2, r8
 8009c90:	464b      	mov	r3, r9
 8009c92:	4606      	mov	r6, r0
 8009c94:	460f      	mov	r7, r1
 8009c96:	f7f6 ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8009c9a:	b9c8      	cbnz	r0, 8009cd0 <_dtoa_r+0x6f8>
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f7f6 ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ca8:	b110      	cbz	r0, 8009cb0 <_dtoa_r+0x6d8>
 8009caa:	9b02      	ldr	r3, [sp, #8]
 8009cac:	07d9      	lsls	r1, r3, #31
 8009cae:	d40f      	bmi.n	8009cd0 <_dtoa_r+0x6f8>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4659      	mov	r1, fp
 8009cb4:	f000 fad6 	bl	800a264 <_Bfree>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	702b      	strb	r3, [r5, #0]
 8009cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cbe:	f10a 0001 	add.w	r0, sl, #1
 8009cc2:	6018      	str	r0, [r3, #0]
 8009cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f43f acd8 	beq.w	800967c <_dtoa_r+0xa4>
 8009ccc:	601d      	str	r5, [r3, #0]
 8009cce:	e4d5      	b.n	800967c <_dtoa_r+0xa4>
 8009cd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	461d      	mov	r5, r3
 8009cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cdc:	2a39      	cmp	r2, #57	; 0x39
 8009cde:	d108      	bne.n	8009cf2 <_dtoa_r+0x71a>
 8009ce0:	9a00      	ldr	r2, [sp, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d1f7      	bne.n	8009cd6 <_dtoa_r+0x6fe>
 8009ce6:	9a07      	ldr	r2, [sp, #28]
 8009ce8:	9900      	ldr	r1, [sp, #0]
 8009cea:	3201      	adds	r2, #1
 8009cec:	9207      	str	r2, [sp, #28]
 8009cee:	2230      	movs	r2, #48	; 0x30
 8009cf0:	700a      	strb	r2, [r1, #0]
 8009cf2:	781a      	ldrb	r2, [r3, #0]
 8009cf4:	3201      	adds	r2, #1
 8009cf6:	701a      	strb	r2, [r3, #0]
 8009cf8:	e78c      	b.n	8009c14 <_dtoa_r+0x63c>
 8009cfa:	4b7f      	ldr	r3, [pc, #508]	; (8009ef8 <_dtoa_r+0x920>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	2200      	movs	r2, #0
 8009d04:	2300      	movs	r3, #0
 8009d06:	4606      	mov	r6, r0
 8009d08:	460f      	mov	r7, r1
 8009d0a:	f7f6 fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d09b      	beq.n	8009c4a <_dtoa_r+0x672>
 8009d12:	e7cd      	b.n	8009cb0 <_dtoa_r+0x6d8>
 8009d14:	9a08      	ldr	r2, [sp, #32]
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	f000 80c4 	beq.w	8009ea4 <_dtoa_r+0x8cc>
 8009d1c:	9a05      	ldr	r2, [sp, #20]
 8009d1e:	2a01      	cmp	r2, #1
 8009d20:	f300 80a8 	bgt.w	8009e74 <_dtoa_r+0x89c>
 8009d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d26:	2a00      	cmp	r2, #0
 8009d28:	f000 80a0 	beq.w	8009e6c <_dtoa_r+0x894>
 8009d2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d30:	9e06      	ldr	r6, [sp, #24]
 8009d32:	4645      	mov	r5, r8
 8009d34:	9a04      	ldr	r2, [sp, #16]
 8009d36:	2101      	movs	r1, #1
 8009d38:	441a      	add	r2, r3
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	4498      	add	r8, r3
 8009d3e:	9204      	str	r2, [sp, #16]
 8009d40:	f000 fb4c 	bl	800a3dc <__i2b>
 8009d44:	4607      	mov	r7, r0
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	dd0b      	ble.n	8009d62 <_dtoa_r+0x78a>
 8009d4a:	9b04      	ldr	r3, [sp, #16]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd08      	ble.n	8009d62 <_dtoa_r+0x78a>
 8009d50:	42ab      	cmp	r3, r5
 8009d52:	9a04      	ldr	r2, [sp, #16]
 8009d54:	bfa8      	it	ge
 8009d56:	462b      	movge	r3, r5
 8009d58:	eba8 0803 	sub.w	r8, r8, r3
 8009d5c:	1aed      	subs	r5, r5, r3
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	9b06      	ldr	r3, [sp, #24]
 8009d64:	b1fb      	cbz	r3, 8009da6 <_dtoa_r+0x7ce>
 8009d66:	9b08      	ldr	r3, [sp, #32]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 809f 	beq.w	8009eac <_dtoa_r+0x8d4>
 8009d6e:	2e00      	cmp	r6, #0
 8009d70:	dd11      	ble.n	8009d96 <_dtoa_r+0x7be>
 8009d72:	4639      	mov	r1, r7
 8009d74:	4632      	mov	r2, r6
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 fbec 	bl	800a554 <__pow5mult>
 8009d7c:	465a      	mov	r2, fp
 8009d7e:	4601      	mov	r1, r0
 8009d80:	4607      	mov	r7, r0
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 fb40 	bl	800a408 <__multiply>
 8009d88:	4659      	mov	r1, fp
 8009d8a:	9007      	str	r0, [sp, #28]
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 fa69 	bl	800a264 <_Bfree>
 8009d92:	9b07      	ldr	r3, [sp, #28]
 8009d94:	469b      	mov	fp, r3
 8009d96:	9b06      	ldr	r3, [sp, #24]
 8009d98:	1b9a      	subs	r2, r3, r6
 8009d9a:	d004      	beq.n	8009da6 <_dtoa_r+0x7ce>
 8009d9c:	4659      	mov	r1, fp
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 fbd8 	bl	800a554 <__pow5mult>
 8009da4:	4683      	mov	fp, r0
 8009da6:	2101      	movs	r1, #1
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 fb17 	bl	800a3dc <__i2b>
 8009dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	4606      	mov	r6, r0
 8009db4:	dd7c      	ble.n	8009eb0 <_dtoa_r+0x8d8>
 8009db6:	461a      	mov	r2, r3
 8009db8:	4601      	mov	r1, r0
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 fbca 	bl	800a554 <__pow5mult>
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	dd76      	ble.n	8009eb6 <_dtoa_r+0x8de>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	9306      	str	r3, [sp, #24]
 8009dcc:	6933      	ldr	r3, [r6, #16]
 8009dce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009dd2:	6918      	ldr	r0, [r3, #16]
 8009dd4:	f000 fab2 	bl	800a33c <__hi0bits>
 8009dd8:	f1c0 0020 	rsb	r0, r0, #32
 8009ddc:	9b04      	ldr	r3, [sp, #16]
 8009dde:	4418      	add	r0, r3
 8009de0:	f010 001f 	ands.w	r0, r0, #31
 8009de4:	f000 8086 	beq.w	8009ef4 <_dtoa_r+0x91c>
 8009de8:	f1c0 0320 	rsb	r3, r0, #32
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	dd7f      	ble.n	8009ef0 <_dtoa_r+0x918>
 8009df0:	f1c0 001c 	rsb	r0, r0, #28
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	4403      	add	r3, r0
 8009df8:	4480      	add	r8, r0
 8009dfa:	4405      	add	r5, r0
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	dd05      	ble.n	8009e10 <_dtoa_r+0x838>
 8009e04:	4659      	mov	r1, fp
 8009e06:	4642      	mov	r2, r8
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 fbfd 	bl	800a608 <__lshift>
 8009e0e:	4683      	mov	fp, r0
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dd05      	ble.n	8009e22 <_dtoa_r+0x84a>
 8009e16:	4631      	mov	r1, r6
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 fbf4 	bl	800a608 <__lshift>
 8009e20:	4606      	mov	r6, r0
 8009e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d069      	beq.n	8009efc <_dtoa_r+0x924>
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4658      	mov	r0, fp
 8009e2c:	f000 fc58 	bl	800a6e0 <__mcmp>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	da63      	bge.n	8009efc <_dtoa_r+0x924>
 8009e34:	2300      	movs	r3, #0
 8009e36:	4659      	mov	r1, fp
 8009e38:	220a      	movs	r2, #10
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 fa34 	bl	800a2a8 <__multadd>
 8009e40:	9b08      	ldr	r3, [sp, #32]
 8009e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e46:	4683      	mov	fp, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 818f 	beq.w	800a16c <_dtoa_r+0xb94>
 8009e4e:	4639      	mov	r1, r7
 8009e50:	2300      	movs	r3, #0
 8009e52:	220a      	movs	r2, #10
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 fa27 	bl	800a2a8 <__multadd>
 8009e5a:	f1b9 0f00 	cmp.w	r9, #0
 8009e5e:	4607      	mov	r7, r0
 8009e60:	f300 808e 	bgt.w	8009f80 <_dtoa_r+0x9a8>
 8009e64:	9b05      	ldr	r3, [sp, #20]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	dc50      	bgt.n	8009f0c <_dtoa_r+0x934>
 8009e6a:	e089      	b.n	8009f80 <_dtoa_r+0x9a8>
 8009e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e72:	e75d      	b.n	8009d30 <_dtoa_r+0x758>
 8009e74:	9b01      	ldr	r3, [sp, #4]
 8009e76:	1e5e      	subs	r6, r3, #1
 8009e78:	9b06      	ldr	r3, [sp, #24]
 8009e7a:	42b3      	cmp	r3, r6
 8009e7c:	bfbf      	itttt	lt
 8009e7e:	9b06      	ldrlt	r3, [sp, #24]
 8009e80:	9606      	strlt	r6, [sp, #24]
 8009e82:	1af2      	sublt	r2, r6, r3
 8009e84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009e86:	bfb6      	itet	lt
 8009e88:	189b      	addlt	r3, r3, r2
 8009e8a:	1b9e      	subge	r6, r3, r6
 8009e8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	bfb8      	it	lt
 8009e92:	2600      	movlt	r6, #0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	bfb5      	itete	lt
 8009e98:	eba8 0503 	sublt.w	r5, r8, r3
 8009e9c:	9b01      	ldrge	r3, [sp, #4]
 8009e9e:	2300      	movlt	r3, #0
 8009ea0:	4645      	movge	r5, r8
 8009ea2:	e747      	b.n	8009d34 <_dtoa_r+0x75c>
 8009ea4:	9e06      	ldr	r6, [sp, #24]
 8009ea6:	9f08      	ldr	r7, [sp, #32]
 8009ea8:	4645      	mov	r5, r8
 8009eaa:	e74c      	b.n	8009d46 <_dtoa_r+0x76e>
 8009eac:	9a06      	ldr	r2, [sp, #24]
 8009eae:	e775      	b.n	8009d9c <_dtoa_r+0x7c4>
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	dc18      	bgt.n	8009ee8 <_dtoa_r+0x910>
 8009eb6:	9b02      	ldr	r3, [sp, #8]
 8009eb8:	b9b3      	cbnz	r3, 8009ee8 <_dtoa_r+0x910>
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ec0:	b9a3      	cbnz	r3, 8009eec <_dtoa_r+0x914>
 8009ec2:	9b03      	ldr	r3, [sp, #12]
 8009ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ec8:	0d1b      	lsrs	r3, r3, #20
 8009eca:	051b      	lsls	r3, r3, #20
 8009ecc:	b12b      	cbz	r3, 8009eda <_dtoa_r+0x902>
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	9304      	str	r3, [sp, #16]
 8009ed4:	f108 0801 	add.w	r8, r8, #1
 8009ed8:	2301      	movs	r3, #1
 8009eda:	9306      	str	r3, [sp, #24]
 8009edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f47f af74 	bne.w	8009dcc <_dtoa_r+0x7f4>
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	e779      	b.n	8009ddc <_dtoa_r+0x804>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e7f6      	b.n	8009eda <_dtoa_r+0x902>
 8009eec:	9b02      	ldr	r3, [sp, #8]
 8009eee:	e7f4      	b.n	8009eda <_dtoa_r+0x902>
 8009ef0:	d085      	beq.n	8009dfe <_dtoa_r+0x826>
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	301c      	adds	r0, #28
 8009ef6:	e77d      	b.n	8009df4 <_dtoa_r+0x81c>
 8009ef8:	40240000 	.word	0x40240000
 8009efc:	9b01      	ldr	r3, [sp, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dc38      	bgt.n	8009f74 <_dtoa_r+0x99c>
 8009f02:	9b05      	ldr	r3, [sp, #20]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	dd35      	ble.n	8009f74 <_dtoa_r+0x99c>
 8009f08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009f0c:	f1b9 0f00 	cmp.w	r9, #0
 8009f10:	d10d      	bne.n	8009f2e <_dtoa_r+0x956>
 8009f12:	4631      	mov	r1, r6
 8009f14:	464b      	mov	r3, r9
 8009f16:	2205      	movs	r2, #5
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 f9c5 	bl	800a2a8 <__multadd>
 8009f1e:	4601      	mov	r1, r0
 8009f20:	4606      	mov	r6, r0
 8009f22:	4658      	mov	r0, fp
 8009f24:	f000 fbdc 	bl	800a6e0 <__mcmp>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	f73f adbd 	bgt.w	8009aa8 <_dtoa_r+0x4d0>
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	9d00      	ldr	r5, [sp, #0]
 8009f32:	ea6f 0a03 	mvn.w	sl, r3
 8009f36:	f04f 0800 	mov.w	r8, #0
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 f991 	bl	800a264 <_Bfree>
 8009f42:	2f00      	cmp	r7, #0
 8009f44:	f43f aeb4 	beq.w	8009cb0 <_dtoa_r+0x6d8>
 8009f48:	f1b8 0f00 	cmp.w	r8, #0
 8009f4c:	d005      	beq.n	8009f5a <_dtoa_r+0x982>
 8009f4e:	45b8      	cmp	r8, r7
 8009f50:	d003      	beq.n	8009f5a <_dtoa_r+0x982>
 8009f52:	4641      	mov	r1, r8
 8009f54:	4620      	mov	r0, r4
 8009f56:	f000 f985 	bl	800a264 <_Bfree>
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 f981 	bl	800a264 <_Bfree>
 8009f62:	e6a5      	b.n	8009cb0 <_dtoa_r+0x6d8>
 8009f64:	2600      	movs	r6, #0
 8009f66:	4637      	mov	r7, r6
 8009f68:	e7e1      	b.n	8009f2e <_dtoa_r+0x956>
 8009f6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009f6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f70:	4637      	mov	r7, r6
 8009f72:	e599      	b.n	8009aa8 <_dtoa_r+0x4d0>
 8009f74:	9b08      	ldr	r3, [sp, #32]
 8009f76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 80fd 	beq.w	800a17a <_dtoa_r+0xba2>
 8009f80:	2d00      	cmp	r5, #0
 8009f82:	dd05      	ble.n	8009f90 <_dtoa_r+0x9b8>
 8009f84:	4639      	mov	r1, r7
 8009f86:	462a      	mov	r2, r5
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f000 fb3d 	bl	800a608 <__lshift>
 8009f8e:	4607      	mov	r7, r0
 8009f90:	9b06      	ldr	r3, [sp, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d05c      	beq.n	800a050 <_dtoa_r+0xa78>
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 f923 	bl	800a1e4 <_Balloc>
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b928      	cbnz	r0, 8009fae <_dtoa_r+0x9d6>
 8009fa2:	4b80      	ldr	r3, [pc, #512]	; (800a1a4 <_dtoa_r+0xbcc>)
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009faa:	f7ff bb2e 	b.w	800960a <_dtoa_r+0x32>
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	3202      	adds	r2, #2
 8009fb2:	0092      	lsls	r2, r2, #2
 8009fb4:	f107 010c 	add.w	r1, r7, #12
 8009fb8:	300c      	adds	r0, #12
 8009fba:	f000 f905 	bl	800a1c8 <memcpy>
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fb20 	bl	800a608 <__lshift>
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	444b      	add	r3, r9
 8009fd2:	9307      	str	r3, [sp, #28]
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	46b8      	mov	r8, r7
 8009fdc:	9306      	str	r3, [sp, #24]
 8009fde:	4607      	mov	r7, r0
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	4658      	mov	r0, fp
 8009fe8:	9302      	str	r3, [sp, #8]
 8009fea:	f7ff fa67 	bl	80094bc <quorem>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	3330      	adds	r3, #48	; 0x30
 8009ff2:	9004      	str	r0, [sp, #16]
 8009ff4:	4641      	mov	r1, r8
 8009ff6:	4658      	mov	r0, fp
 8009ff8:	9308      	str	r3, [sp, #32]
 8009ffa:	f000 fb71 	bl	800a6e0 <__mcmp>
 8009ffe:	463a      	mov	r2, r7
 800a000:	4681      	mov	r9, r0
 800a002:	4631      	mov	r1, r6
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fb87 	bl	800a718 <__mdiff>
 800a00a:	68c2      	ldr	r2, [r0, #12]
 800a00c:	9b08      	ldr	r3, [sp, #32]
 800a00e:	4605      	mov	r5, r0
 800a010:	bb02      	cbnz	r2, 800a054 <_dtoa_r+0xa7c>
 800a012:	4601      	mov	r1, r0
 800a014:	4658      	mov	r0, fp
 800a016:	f000 fb63 	bl	800a6e0 <__mcmp>
 800a01a:	9b08      	ldr	r3, [sp, #32]
 800a01c:	4602      	mov	r2, r0
 800a01e:	4629      	mov	r1, r5
 800a020:	4620      	mov	r0, r4
 800a022:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a026:	f000 f91d 	bl	800a264 <_Bfree>
 800a02a:	9b05      	ldr	r3, [sp, #20]
 800a02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a02e:	9d01      	ldr	r5, [sp, #4]
 800a030:	ea43 0102 	orr.w	r1, r3, r2
 800a034:	9b06      	ldr	r3, [sp, #24]
 800a036:	430b      	orrs	r3, r1
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	d10d      	bne.n	800a058 <_dtoa_r+0xa80>
 800a03c:	2b39      	cmp	r3, #57	; 0x39
 800a03e:	d029      	beq.n	800a094 <_dtoa_r+0xabc>
 800a040:	f1b9 0f00 	cmp.w	r9, #0
 800a044:	dd01      	ble.n	800a04a <_dtoa_r+0xa72>
 800a046:	9b04      	ldr	r3, [sp, #16]
 800a048:	3331      	adds	r3, #49	; 0x31
 800a04a:	9a02      	ldr	r2, [sp, #8]
 800a04c:	7013      	strb	r3, [r2, #0]
 800a04e:	e774      	b.n	8009f3a <_dtoa_r+0x962>
 800a050:	4638      	mov	r0, r7
 800a052:	e7b9      	b.n	8009fc8 <_dtoa_r+0x9f0>
 800a054:	2201      	movs	r2, #1
 800a056:	e7e2      	b.n	800a01e <_dtoa_r+0xa46>
 800a058:	f1b9 0f00 	cmp.w	r9, #0
 800a05c:	db06      	blt.n	800a06c <_dtoa_r+0xa94>
 800a05e:	9905      	ldr	r1, [sp, #20]
 800a060:	ea41 0909 	orr.w	r9, r1, r9
 800a064:	9906      	ldr	r1, [sp, #24]
 800a066:	ea59 0101 	orrs.w	r1, r9, r1
 800a06a:	d120      	bne.n	800a0ae <_dtoa_r+0xad6>
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	ddec      	ble.n	800a04a <_dtoa_r+0xa72>
 800a070:	4659      	mov	r1, fp
 800a072:	2201      	movs	r2, #1
 800a074:	4620      	mov	r0, r4
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	f000 fac6 	bl	800a608 <__lshift>
 800a07c:	4631      	mov	r1, r6
 800a07e:	4683      	mov	fp, r0
 800a080:	f000 fb2e 	bl	800a6e0 <__mcmp>
 800a084:	2800      	cmp	r0, #0
 800a086:	9b01      	ldr	r3, [sp, #4]
 800a088:	dc02      	bgt.n	800a090 <_dtoa_r+0xab8>
 800a08a:	d1de      	bne.n	800a04a <_dtoa_r+0xa72>
 800a08c:	07da      	lsls	r2, r3, #31
 800a08e:	d5dc      	bpl.n	800a04a <_dtoa_r+0xa72>
 800a090:	2b39      	cmp	r3, #57	; 0x39
 800a092:	d1d8      	bne.n	800a046 <_dtoa_r+0xa6e>
 800a094:	9a02      	ldr	r2, [sp, #8]
 800a096:	2339      	movs	r3, #57	; 0x39
 800a098:	7013      	strb	r3, [r2, #0]
 800a09a:	462b      	mov	r3, r5
 800a09c:	461d      	mov	r5, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0a4:	2a39      	cmp	r2, #57	; 0x39
 800a0a6:	d050      	beq.n	800a14a <_dtoa_r+0xb72>
 800a0a8:	3201      	adds	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e745      	b.n	8009f3a <_dtoa_r+0x962>
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	dd03      	ble.n	800a0ba <_dtoa_r+0xae2>
 800a0b2:	2b39      	cmp	r3, #57	; 0x39
 800a0b4:	d0ee      	beq.n	800a094 <_dtoa_r+0xabc>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	e7c7      	b.n	800a04a <_dtoa_r+0xa72>
 800a0ba:	9a01      	ldr	r2, [sp, #4]
 800a0bc:	9907      	ldr	r1, [sp, #28]
 800a0be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0c2:	428a      	cmp	r2, r1
 800a0c4:	d02a      	beq.n	800a11c <_dtoa_r+0xb44>
 800a0c6:	4659      	mov	r1, fp
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 f8eb 	bl	800a2a8 <__multadd>
 800a0d2:	45b8      	cmp	r8, r7
 800a0d4:	4683      	mov	fp, r0
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	f04f 020a 	mov.w	r2, #10
 800a0de:	4641      	mov	r1, r8
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	d107      	bne.n	800a0f4 <_dtoa_r+0xb1c>
 800a0e4:	f000 f8e0 	bl	800a2a8 <__multadd>
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	e775      	b.n	8009fe0 <_dtoa_r+0xa08>
 800a0f4:	f000 f8d8 	bl	800a2a8 <__multadd>
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	220a      	movs	r2, #10
 800a100:	4620      	mov	r0, r4
 800a102:	f000 f8d1 	bl	800a2a8 <__multadd>
 800a106:	4607      	mov	r7, r0
 800a108:	e7f0      	b.n	800a0ec <_dtoa_r+0xb14>
 800a10a:	f1b9 0f00 	cmp.w	r9, #0
 800a10e:	9a00      	ldr	r2, [sp, #0]
 800a110:	bfcc      	ite	gt
 800a112:	464d      	movgt	r5, r9
 800a114:	2501      	movle	r5, #1
 800a116:	4415      	add	r5, r2
 800a118:	f04f 0800 	mov.w	r8, #0
 800a11c:	4659      	mov	r1, fp
 800a11e:	2201      	movs	r2, #1
 800a120:	4620      	mov	r0, r4
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	f000 fa70 	bl	800a608 <__lshift>
 800a128:	4631      	mov	r1, r6
 800a12a:	4683      	mov	fp, r0
 800a12c:	f000 fad8 	bl	800a6e0 <__mcmp>
 800a130:	2800      	cmp	r0, #0
 800a132:	dcb2      	bgt.n	800a09a <_dtoa_r+0xac2>
 800a134:	d102      	bne.n	800a13c <_dtoa_r+0xb64>
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	07db      	lsls	r3, r3, #31
 800a13a:	d4ae      	bmi.n	800a09a <_dtoa_r+0xac2>
 800a13c:	462b      	mov	r3, r5
 800a13e:	461d      	mov	r5, r3
 800a140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a144:	2a30      	cmp	r2, #48	; 0x30
 800a146:	d0fa      	beq.n	800a13e <_dtoa_r+0xb66>
 800a148:	e6f7      	b.n	8009f3a <_dtoa_r+0x962>
 800a14a:	9a00      	ldr	r2, [sp, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d1a5      	bne.n	800a09c <_dtoa_r+0xac4>
 800a150:	f10a 0a01 	add.w	sl, sl, #1
 800a154:	2331      	movs	r3, #49	; 0x31
 800a156:	e779      	b.n	800a04c <_dtoa_r+0xa74>
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <_dtoa_r+0xbd0>)
 800a15a:	f7ff baaf 	b.w	80096bc <_dtoa_r+0xe4>
 800a15e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a160:	2b00      	cmp	r3, #0
 800a162:	f47f aa86 	bne.w	8009672 <_dtoa_r+0x9a>
 800a166:	4b11      	ldr	r3, [pc, #68]	; (800a1ac <_dtoa_r+0xbd4>)
 800a168:	f7ff baa8 	b.w	80096bc <_dtoa_r+0xe4>
 800a16c:	f1b9 0f00 	cmp.w	r9, #0
 800a170:	dc03      	bgt.n	800a17a <_dtoa_r+0xba2>
 800a172:	9b05      	ldr	r3, [sp, #20]
 800a174:	2b02      	cmp	r3, #2
 800a176:	f73f aec9 	bgt.w	8009f0c <_dtoa_r+0x934>
 800a17a:	9d00      	ldr	r5, [sp, #0]
 800a17c:	4631      	mov	r1, r6
 800a17e:	4658      	mov	r0, fp
 800a180:	f7ff f99c 	bl	80094bc <quorem>
 800a184:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a188:	f805 3b01 	strb.w	r3, [r5], #1
 800a18c:	9a00      	ldr	r2, [sp, #0]
 800a18e:	1aaa      	subs	r2, r5, r2
 800a190:	4591      	cmp	r9, r2
 800a192:	ddba      	ble.n	800a10a <_dtoa_r+0xb32>
 800a194:	4659      	mov	r1, fp
 800a196:	2300      	movs	r3, #0
 800a198:	220a      	movs	r2, #10
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 f884 	bl	800a2a8 <__multadd>
 800a1a0:	4683      	mov	fp, r0
 800a1a2:	e7eb      	b.n	800a17c <_dtoa_r+0xba4>
 800a1a4:	0800eddf 	.word	0x0800eddf
 800a1a8:	0800ed38 	.word	0x0800ed38
 800a1ac:	0800ed5c 	.word	0x0800ed5c

0800a1b0 <_localeconv_r>:
 800a1b0:	4800      	ldr	r0, [pc, #0]	; (800a1b4 <_localeconv_r+0x4>)
 800a1b2:	4770      	bx	lr
 800a1b4:	200001b8 	.word	0x200001b8

0800a1b8 <malloc>:
 800a1b8:	4b02      	ldr	r3, [pc, #8]	; (800a1c4 <malloc+0xc>)
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	f000 bbef 	b.w	800a9a0 <_malloc_r>
 800a1c2:	bf00      	nop
 800a1c4:	20000064 	.word	0x20000064

0800a1c8 <memcpy>:
 800a1c8:	440a      	add	r2, r1
 800a1ca:	4291      	cmp	r1, r2
 800a1cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1d0:	d100      	bne.n	800a1d4 <memcpy+0xc>
 800a1d2:	4770      	bx	lr
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1de:	4291      	cmp	r1, r2
 800a1e0:	d1f9      	bne.n	800a1d6 <memcpy+0xe>
 800a1e2:	bd10      	pop	{r4, pc}

0800a1e4 <_Balloc>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	b976      	cbnz	r6, 800a20c <_Balloc+0x28>
 800a1ee:	2010      	movs	r0, #16
 800a1f0:	f7ff ffe2 	bl	800a1b8 <malloc>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a1f8:	b920      	cbnz	r0, 800a204 <_Balloc+0x20>
 800a1fa:	4b18      	ldr	r3, [pc, #96]	; (800a25c <_Balloc+0x78>)
 800a1fc:	4818      	ldr	r0, [pc, #96]	; (800a260 <_Balloc+0x7c>)
 800a1fe:	2166      	movs	r1, #102	; 0x66
 800a200:	f000 fd94 	bl	800ad2c <__assert_func>
 800a204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a208:	6006      	str	r6, [r0, #0]
 800a20a:	60c6      	str	r6, [r0, #12]
 800a20c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a20e:	68f3      	ldr	r3, [r6, #12]
 800a210:	b183      	cbz	r3, 800a234 <_Balloc+0x50>
 800a212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a21a:	b9b8      	cbnz	r0, 800a24c <_Balloc+0x68>
 800a21c:	2101      	movs	r1, #1
 800a21e:	fa01 f605 	lsl.w	r6, r1, r5
 800a222:	1d72      	adds	r2, r6, #5
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	4620      	mov	r0, r4
 800a228:	f000 fb5a 	bl	800a8e0 <_calloc_r>
 800a22c:	b160      	cbz	r0, 800a248 <_Balloc+0x64>
 800a22e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a232:	e00e      	b.n	800a252 <_Balloc+0x6e>
 800a234:	2221      	movs	r2, #33	; 0x21
 800a236:	2104      	movs	r1, #4
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fb51 	bl	800a8e0 <_calloc_r>
 800a23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a240:	60f0      	str	r0, [r6, #12]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e4      	bne.n	800a212 <_Balloc+0x2e>
 800a248:	2000      	movs	r0, #0
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	6802      	ldr	r2, [r0, #0]
 800a24e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a252:	2300      	movs	r3, #0
 800a254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a258:	e7f7      	b.n	800a24a <_Balloc+0x66>
 800a25a:	bf00      	nop
 800a25c:	0800ed69 	.word	0x0800ed69
 800a260:	0800edf0 	.word	0x0800edf0

0800a264 <_Bfree>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a268:	4605      	mov	r5, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	b976      	cbnz	r6, 800a28c <_Bfree+0x28>
 800a26e:	2010      	movs	r0, #16
 800a270:	f7ff ffa2 	bl	800a1b8 <malloc>
 800a274:	4602      	mov	r2, r0
 800a276:	6268      	str	r0, [r5, #36]	; 0x24
 800a278:	b920      	cbnz	r0, 800a284 <_Bfree+0x20>
 800a27a:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <_Bfree+0x3c>)
 800a27c:	4809      	ldr	r0, [pc, #36]	; (800a2a4 <_Bfree+0x40>)
 800a27e:	218a      	movs	r1, #138	; 0x8a
 800a280:	f000 fd54 	bl	800ad2c <__assert_func>
 800a284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a288:	6006      	str	r6, [r0, #0]
 800a28a:	60c6      	str	r6, [r0, #12]
 800a28c:	b13c      	cbz	r4, 800a29e <_Bfree+0x3a>
 800a28e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a290:	6862      	ldr	r2, [r4, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a298:	6021      	str	r1, [r4, #0]
 800a29a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	0800ed69 	.word	0x0800ed69
 800a2a4:	0800edf0 	.word	0x0800edf0

0800a2a8 <__multadd>:
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	690e      	ldr	r6, [r1, #16]
 800a2ae:	4607      	mov	r7, r0
 800a2b0:	4698      	mov	r8, r3
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	f101 0014 	add.w	r0, r1, #20
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	6805      	ldr	r5, [r0, #0]
 800a2bc:	b2a9      	uxth	r1, r5
 800a2be:	fb02 8101 	mla	r1, r2, r1, r8
 800a2c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a2c6:	0c2d      	lsrs	r5, r5, #16
 800a2c8:	fb02 c505 	mla	r5, r2, r5, ip
 800a2cc:	b289      	uxth	r1, r1
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a2d4:	429e      	cmp	r6, r3
 800a2d6:	f840 1b04 	str.w	r1, [r0], #4
 800a2da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a2de:	dcec      	bgt.n	800a2ba <__multadd+0x12>
 800a2e0:	f1b8 0f00 	cmp.w	r8, #0
 800a2e4:	d022      	beq.n	800a32c <__multadd+0x84>
 800a2e6:	68a3      	ldr	r3, [r4, #8]
 800a2e8:	42b3      	cmp	r3, r6
 800a2ea:	dc19      	bgt.n	800a320 <__multadd+0x78>
 800a2ec:	6861      	ldr	r1, [r4, #4]
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	3101      	adds	r1, #1
 800a2f2:	f7ff ff77 	bl	800a1e4 <_Balloc>
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	b928      	cbnz	r0, 800a306 <__multadd+0x5e>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	4b0d      	ldr	r3, [pc, #52]	; (800a334 <__multadd+0x8c>)
 800a2fe:	480e      	ldr	r0, [pc, #56]	; (800a338 <__multadd+0x90>)
 800a300:	21b5      	movs	r1, #181	; 0xb5
 800a302:	f000 fd13 	bl	800ad2c <__assert_func>
 800a306:	6922      	ldr	r2, [r4, #16]
 800a308:	3202      	adds	r2, #2
 800a30a:	f104 010c 	add.w	r1, r4, #12
 800a30e:	0092      	lsls	r2, r2, #2
 800a310:	300c      	adds	r0, #12
 800a312:	f7ff ff59 	bl	800a1c8 <memcpy>
 800a316:	4621      	mov	r1, r4
 800a318:	4638      	mov	r0, r7
 800a31a:	f7ff ffa3 	bl	800a264 <_Bfree>
 800a31e:	462c      	mov	r4, r5
 800a320:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a324:	3601      	adds	r6, #1
 800a326:	f8c3 8014 	str.w	r8, [r3, #20]
 800a32a:	6126      	str	r6, [r4, #16]
 800a32c:	4620      	mov	r0, r4
 800a32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a332:	bf00      	nop
 800a334:	0800eddf 	.word	0x0800eddf
 800a338:	0800edf0 	.word	0x0800edf0

0800a33c <__hi0bits>:
 800a33c:	0c03      	lsrs	r3, r0, #16
 800a33e:	041b      	lsls	r3, r3, #16
 800a340:	b9d3      	cbnz	r3, 800a378 <__hi0bits+0x3c>
 800a342:	0400      	lsls	r0, r0, #16
 800a344:	2310      	movs	r3, #16
 800a346:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a34a:	bf04      	itt	eq
 800a34c:	0200      	lsleq	r0, r0, #8
 800a34e:	3308      	addeq	r3, #8
 800a350:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a354:	bf04      	itt	eq
 800a356:	0100      	lsleq	r0, r0, #4
 800a358:	3304      	addeq	r3, #4
 800a35a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a35e:	bf04      	itt	eq
 800a360:	0080      	lsleq	r0, r0, #2
 800a362:	3302      	addeq	r3, #2
 800a364:	2800      	cmp	r0, #0
 800a366:	db05      	blt.n	800a374 <__hi0bits+0x38>
 800a368:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a36c:	f103 0301 	add.w	r3, r3, #1
 800a370:	bf08      	it	eq
 800a372:	2320      	moveq	r3, #32
 800a374:	4618      	mov	r0, r3
 800a376:	4770      	bx	lr
 800a378:	2300      	movs	r3, #0
 800a37a:	e7e4      	b.n	800a346 <__hi0bits+0xa>

0800a37c <__lo0bits>:
 800a37c:	6803      	ldr	r3, [r0, #0]
 800a37e:	f013 0207 	ands.w	r2, r3, #7
 800a382:	4601      	mov	r1, r0
 800a384:	d00b      	beq.n	800a39e <__lo0bits+0x22>
 800a386:	07da      	lsls	r2, r3, #31
 800a388:	d424      	bmi.n	800a3d4 <__lo0bits+0x58>
 800a38a:	0798      	lsls	r0, r3, #30
 800a38c:	bf49      	itett	mi
 800a38e:	085b      	lsrmi	r3, r3, #1
 800a390:	089b      	lsrpl	r3, r3, #2
 800a392:	2001      	movmi	r0, #1
 800a394:	600b      	strmi	r3, [r1, #0]
 800a396:	bf5c      	itt	pl
 800a398:	600b      	strpl	r3, [r1, #0]
 800a39a:	2002      	movpl	r0, #2
 800a39c:	4770      	bx	lr
 800a39e:	b298      	uxth	r0, r3
 800a3a0:	b9b0      	cbnz	r0, 800a3d0 <__lo0bits+0x54>
 800a3a2:	0c1b      	lsrs	r3, r3, #16
 800a3a4:	2010      	movs	r0, #16
 800a3a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3aa:	bf04      	itt	eq
 800a3ac:	0a1b      	lsreq	r3, r3, #8
 800a3ae:	3008      	addeq	r0, #8
 800a3b0:	071a      	lsls	r2, r3, #28
 800a3b2:	bf04      	itt	eq
 800a3b4:	091b      	lsreq	r3, r3, #4
 800a3b6:	3004      	addeq	r0, #4
 800a3b8:	079a      	lsls	r2, r3, #30
 800a3ba:	bf04      	itt	eq
 800a3bc:	089b      	lsreq	r3, r3, #2
 800a3be:	3002      	addeq	r0, #2
 800a3c0:	07da      	lsls	r2, r3, #31
 800a3c2:	d403      	bmi.n	800a3cc <__lo0bits+0x50>
 800a3c4:	085b      	lsrs	r3, r3, #1
 800a3c6:	f100 0001 	add.w	r0, r0, #1
 800a3ca:	d005      	beq.n	800a3d8 <__lo0bits+0x5c>
 800a3cc:	600b      	str	r3, [r1, #0]
 800a3ce:	4770      	bx	lr
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	e7e8      	b.n	800a3a6 <__lo0bits+0x2a>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	4770      	bx	lr
 800a3d8:	2020      	movs	r0, #32
 800a3da:	4770      	bx	lr

0800a3dc <__i2b>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	460c      	mov	r4, r1
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	f7ff feff 	bl	800a1e4 <_Balloc>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	b928      	cbnz	r0, 800a3f6 <__i2b+0x1a>
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <__i2b+0x24>)
 800a3ec:	4805      	ldr	r0, [pc, #20]	; (800a404 <__i2b+0x28>)
 800a3ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3f2:	f000 fc9b 	bl	800ad2c <__assert_func>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	6144      	str	r4, [r0, #20]
 800a3fa:	6103      	str	r3, [r0, #16]
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	bf00      	nop
 800a400:	0800eddf 	.word	0x0800eddf
 800a404:	0800edf0 	.word	0x0800edf0

0800a408 <__multiply>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	4614      	mov	r4, r2
 800a40e:	690a      	ldr	r2, [r1, #16]
 800a410:	6923      	ldr	r3, [r4, #16]
 800a412:	429a      	cmp	r2, r3
 800a414:	bfb8      	it	lt
 800a416:	460b      	movlt	r3, r1
 800a418:	460d      	mov	r5, r1
 800a41a:	bfbc      	itt	lt
 800a41c:	4625      	movlt	r5, r4
 800a41e:	461c      	movlt	r4, r3
 800a420:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a424:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a428:	68ab      	ldr	r3, [r5, #8]
 800a42a:	6869      	ldr	r1, [r5, #4]
 800a42c:	eb0a 0709 	add.w	r7, sl, r9
 800a430:	42bb      	cmp	r3, r7
 800a432:	b085      	sub	sp, #20
 800a434:	bfb8      	it	lt
 800a436:	3101      	addlt	r1, #1
 800a438:	f7ff fed4 	bl	800a1e4 <_Balloc>
 800a43c:	b930      	cbnz	r0, 800a44c <__multiply+0x44>
 800a43e:	4602      	mov	r2, r0
 800a440:	4b42      	ldr	r3, [pc, #264]	; (800a54c <__multiply+0x144>)
 800a442:	4843      	ldr	r0, [pc, #268]	; (800a550 <__multiply+0x148>)
 800a444:	f240 115d 	movw	r1, #349	; 0x15d
 800a448:	f000 fc70 	bl	800ad2c <__assert_func>
 800a44c:	f100 0614 	add.w	r6, r0, #20
 800a450:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a454:	4633      	mov	r3, r6
 800a456:	2200      	movs	r2, #0
 800a458:	4543      	cmp	r3, r8
 800a45a:	d31e      	bcc.n	800a49a <__multiply+0x92>
 800a45c:	f105 0c14 	add.w	ip, r5, #20
 800a460:	f104 0314 	add.w	r3, r4, #20
 800a464:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a468:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a46c:	9202      	str	r2, [sp, #8]
 800a46e:	ebac 0205 	sub.w	r2, ip, r5
 800a472:	3a15      	subs	r2, #21
 800a474:	f022 0203 	bic.w	r2, r2, #3
 800a478:	3204      	adds	r2, #4
 800a47a:	f105 0115 	add.w	r1, r5, #21
 800a47e:	458c      	cmp	ip, r1
 800a480:	bf38      	it	cc
 800a482:	2204      	movcc	r2, #4
 800a484:	9201      	str	r2, [sp, #4]
 800a486:	9a02      	ldr	r2, [sp, #8]
 800a488:	9303      	str	r3, [sp, #12]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d808      	bhi.n	800a4a0 <__multiply+0x98>
 800a48e:	2f00      	cmp	r7, #0
 800a490:	dc55      	bgt.n	800a53e <__multiply+0x136>
 800a492:	6107      	str	r7, [r0, #16]
 800a494:	b005      	add	sp, #20
 800a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49a:	f843 2b04 	str.w	r2, [r3], #4
 800a49e:	e7db      	b.n	800a458 <__multiply+0x50>
 800a4a0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4a4:	f1ba 0f00 	cmp.w	sl, #0
 800a4a8:	d020      	beq.n	800a4ec <__multiply+0xe4>
 800a4aa:	f105 0e14 	add.w	lr, r5, #20
 800a4ae:	46b1      	mov	r9, r6
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a4b6:	f8d9 b000 	ldr.w	fp, [r9]
 800a4ba:	b2a1      	uxth	r1, r4
 800a4bc:	fa1f fb8b 	uxth.w	fp, fp
 800a4c0:	fb0a b101 	mla	r1, sl, r1, fp
 800a4c4:	4411      	add	r1, r2
 800a4c6:	f8d9 2000 	ldr.w	r2, [r9]
 800a4ca:	0c24      	lsrs	r4, r4, #16
 800a4cc:	0c12      	lsrs	r2, r2, #16
 800a4ce:	fb0a 2404 	mla	r4, sl, r4, r2
 800a4d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a4d6:	b289      	uxth	r1, r1
 800a4d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a4dc:	45f4      	cmp	ip, lr
 800a4de:	f849 1b04 	str.w	r1, [r9], #4
 800a4e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a4e6:	d8e4      	bhi.n	800a4b2 <__multiply+0xaa>
 800a4e8:	9901      	ldr	r1, [sp, #4]
 800a4ea:	5072      	str	r2, [r6, r1]
 800a4ec:	9a03      	ldr	r2, [sp, #12]
 800a4ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	f1b9 0f00 	cmp.w	r9, #0
 800a4f8:	d01f      	beq.n	800a53a <__multiply+0x132>
 800a4fa:	6834      	ldr	r4, [r6, #0]
 800a4fc:	f105 0114 	add.w	r1, r5, #20
 800a500:	46b6      	mov	lr, r6
 800a502:	f04f 0a00 	mov.w	sl, #0
 800a506:	880a      	ldrh	r2, [r1, #0]
 800a508:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a50c:	fb09 b202 	mla	r2, r9, r2, fp
 800a510:	4492      	add	sl, r2
 800a512:	b2a4      	uxth	r4, r4
 800a514:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a518:	f84e 4b04 	str.w	r4, [lr], #4
 800a51c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a520:	f8be 2000 	ldrh.w	r2, [lr]
 800a524:	0c24      	lsrs	r4, r4, #16
 800a526:	fb09 2404 	mla	r4, r9, r4, r2
 800a52a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a52e:	458c      	cmp	ip, r1
 800a530:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a534:	d8e7      	bhi.n	800a506 <__multiply+0xfe>
 800a536:	9a01      	ldr	r2, [sp, #4]
 800a538:	50b4      	str	r4, [r6, r2]
 800a53a:	3604      	adds	r6, #4
 800a53c:	e7a3      	b.n	800a486 <__multiply+0x7e>
 800a53e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1a5      	bne.n	800a492 <__multiply+0x8a>
 800a546:	3f01      	subs	r7, #1
 800a548:	e7a1      	b.n	800a48e <__multiply+0x86>
 800a54a:	bf00      	nop
 800a54c:	0800eddf 	.word	0x0800eddf
 800a550:	0800edf0 	.word	0x0800edf0

0800a554 <__pow5mult>:
 800a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a558:	4615      	mov	r5, r2
 800a55a:	f012 0203 	ands.w	r2, r2, #3
 800a55e:	4606      	mov	r6, r0
 800a560:	460f      	mov	r7, r1
 800a562:	d007      	beq.n	800a574 <__pow5mult+0x20>
 800a564:	4c25      	ldr	r4, [pc, #148]	; (800a5fc <__pow5mult+0xa8>)
 800a566:	3a01      	subs	r2, #1
 800a568:	2300      	movs	r3, #0
 800a56a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a56e:	f7ff fe9b 	bl	800a2a8 <__multadd>
 800a572:	4607      	mov	r7, r0
 800a574:	10ad      	asrs	r5, r5, #2
 800a576:	d03d      	beq.n	800a5f4 <__pow5mult+0xa0>
 800a578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a57a:	b97c      	cbnz	r4, 800a59c <__pow5mult+0x48>
 800a57c:	2010      	movs	r0, #16
 800a57e:	f7ff fe1b 	bl	800a1b8 <malloc>
 800a582:	4602      	mov	r2, r0
 800a584:	6270      	str	r0, [r6, #36]	; 0x24
 800a586:	b928      	cbnz	r0, 800a594 <__pow5mult+0x40>
 800a588:	4b1d      	ldr	r3, [pc, #116]	; (800a600 <__pow5mult+0xac>)
 800a58a:	481e      	ldr	r0, [pc, #120]	; (800a604 <__pow5mult+0xb0>)
 800a58c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a590:	f000 fbcc 	bl	800ad2c <__assert_func>
 800a594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a598:	6004      	str	r4, [r0, #0]
 800a59a:	60c4      	str	r4, [r0, #12]
 800a59c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5a4:	b94c      	cbnz	r4, 800a5ba <__pow5mult+0x66>
 800a5a6:	f240 2171 	movw	r1, #625	; 0x271
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7ff ff16 	bl	800a3dc <__i2b>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	6003      	str	r3, [r0, #0]
 800a5ba:	f04f 0900 	mov.w	r9, #0
 800a5be:	07eb      	lsls	r3, r5, #31
 800a5c0:	d50a      	bpl.n	800a5d8 <__pow5mult+0x84>
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7ff ff1e 	bl	800a408 <__multiply>
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	4680      	mov	r8, r0
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff fe47 	bl	800a264 <_Bfree>
 800a5d6:	4647      	mov	r7, r8
 800a5d8:	106d      	asrs	r5, r5, #1
 800a5da:	d00b      	beq.n	800a5f4 <__pow5mult+0xa0>
 800a5dc:	6820      	ldr	r0, [r4, #0]
 800a5de:	b938      	cbnz	r0, 800a5f0 <__pow5mult+0x9c>
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff ff0f 	bl	800a408 <__multiply>
 800a5ea:	6020      	str	r0, [r4, #0]
 800a5ec:	f8c0 9000 	str.w	r9, [r0]
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	e7e4      	b.n	800a5be <__pow5mult+0x6a>
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5fa:	bf00      	nop
 800a5fc:	0800ef40 	.word	0x0800ef40
 800a600:	0800ed69 	.word	0x0800ed69
 800a604:	0800edf0 	.word	0x0800edf0

0800a608 <__lshift>:
 800a608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	460c      	mov	r4, r1
 800a60e:	6849      	ldr	r1, [r1, #4]
 800a610:	6923      	ldr	r3, [r4, #16]
 800a612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a616:	68a3      	ldr	r3, [r4, #8]
 800a618:	4607      	mov	r7, r0
 800a61a:	4691      	mov	r9, r2
 800a61c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a620:	f108 0601 	add.w	r6, r8, #1
 800a624:	42b3      	cmp	r3, r6
 800a626:	db0b      	blt.n	800a640 <__lshift+0x38>
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff fddb 	bl	800a1e4 <_Balloc>
 800a62e:	4605      	mov	r5, r0
 800a630:	b948      	cbnz	r0, 800a646 <__lshift+0x3e>
 800a632:	4602      	mov	r2, r0
 800a634:	4b28      	ldr	r3, [pc, #160]	; (800a6d8 <__lshift+0xd0>)
 800a636:	4829      	ldr	r0, [pc, #164]	; (800a6dc <__lshift+0xd4>)
 800a638:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a63c:	f000 fb76 	bl	800ad2c <__assert_func>
 800a640:	3101      	adds	r1, #1
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	e7ee      	b.n	800a624 <__lshift+0x1c>
 800a646:	2300      	movs	r3, #0
 800a648:	f100 0114 	add.w	r1, r0, #20
 800a64c:	f100 0210 	add.w	r2, r0, #16
 800a650:	4618      	mov	r0, r3
 800a652:	4553      	cmp	r3, sl
 800a654:	db33      	blt.n	800a6be <__lshift+0xb6>
 800a656:	6920      	ldr	r0, [r4, #16]
 800a658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a65c:	f104 0314 	add.w	r3, r4, #20
 800a660:	f019 091f 	ands.w	r9, r9, #31
 800a664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a66c:	d02b      	beq.n	800a6c6 <__lshift+0xbe>
 800a66e:	f1c9 0e20 	rsb	lr, r9, #32
 800a672:	468a      	mov	sl, r1
 800a674:	2200      	movs	r2, #0
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	fa00 f009 	lsl.w	r0, r0, r9
 800a67c:	4302      	orrs	r2, r0
 800a67e:	f84a 2b04 	str.w	r2, [sl], #4
 800a682:	f853 2b04 	ldr.w	r2, [r3], #4
 800a686:	459c      	cmp	ip, r3
 800a688:	fa22 f20e 	lsr.w	r2, r2, lr
 800a68c:	d8f3      	bhi.n	800a676 <__lshift+0x6e>
 800a68e:	ebac 0304 	sub.w	r3, ip, r4
 800a692:	3b15      	subs	r3, #21
 800a694:	f023 0303 	bic.w	r3, r3, #3
 800a698:	3304      	adds	r3, #4
 800a69a:	f104 0015 	add.w	r0, r4, #21
 800a69e:	4584      	cmp	ip, r0
 800a6a0:	bf38      	it	cc
 800a6a2:	2304      	movcc	r3, #4
 800a6a4:	50ca      	str	r2, [r1, r3]
 800a6a6:	b10a      	cbz	r2, 800a6ac <__lshift+0xa4>
 800a6a8:	f108 0602 	add.w	r6, r8, #2
 800a6ac:	3e01      	subs	r6, #1
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	612e      	str	r6, [r5, #16]
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	f7ff fdd6 	bl	800a264 <_Bfree>
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	e7c5      	b.n	800a652 <__lshift+0x4a>
 800a6c6:	3904      	subs	r1, #4
 800a6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d0:	459c      	cmp	ip, r3
 800a6d2:	d8f9      	bhi.n	800a6c8 <__lshift+0xc0>
 800a6d4:	e7ea      	b.n	800a6ac <__lshift+0xa4>
 800a6d6:	bf00      	nop
 800a6d8:	0800eddf 	.word	0x0800eddf
 800a6dc:	0800edf0 	.word	0x0800edf0

0800a6e0 <__mcmp>:
 800a6e0:	b530      	push	{r4, r5, lr}
 800a6e2:	6902      	ldr	r2, [r0, #16]
 800a6e4:	690c      	ldr	r4, [r1, #16]
 800a6e6:	1b12      	subs	r2, r2, r4
 800a6e8:	d10e      	bne.n	800a708 <__mcmp+0x28>
 800a6ea:	f100 0314 	add.w	r3, r0, #20
 800a6ee:	3114      	adds	r1, #20
 800a6f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a700:	42a5      	cmp	r5, r4
 800a702:	d003      	beq.n	800a70c <__mcmp+0x2c>
 800a704:	d305      	bcc.n	800a712 <__mcmp+0x32>
 800a706:	2201      	movs	r2, #1
 800a708:	4610      	mov	r0, r2
 800a70a:	bd30      	pop	{r4, r5, pc}
 800a70c:	4283      	cmp	r3, r0
 800a70e:	d3f3      	bcc.n	800a6f8 <__mcmp+0x18>
 800a710:	e7fa      	b.n	800a708 <__mcmp+0x28>
 800a712:	f04f 32ff 	mov.w	r2, #4294967295
 800a716:	e7f7      	b.n	800a708 <__mcmp+0x28>

0800a718 <__mdiff>:
 800a718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	4606      	mov	r6, r0
 800a720:	4611      	mov	r1, r2
 800a722:	4620      	mov	r0, r4
 800a724:	4617      	mov	r7, r2
 800a726:	f7ff ffdb 	bl	800a6e0 <__mcmp>
 800a72a:	1e05      	subs	r5, r0, #0
 800a72c:	d110      	bne.n	800a750 <__mdiff+0x38>
 800a72e:	4629      	mov	r1, r5
 800a730:	4630      	mov	r0, r6
 800a732:	f7ff fd57 	bl	800a1e4 <_Balloc>
 800a736:	b930      	cbnz	r0, 800a746 <__mdiff+0x2e>
 800a738:	4b39      	ldr	r3, [pc, #228]	; (800a820 <__mdiff+0x108>)
 800a73a:	4602      	mov	r2, r0
 800a73c:	f240 2132 	movw	r1, #562	; 0x232
 800a740:	4838      	ldr	r0, [pc, #224]	; (800a824 <__mdiff+0x10c>)
 800a742:	f000 faf3 	bl	800ad2c <__assert_func>
 800a746:	2301      	movs	r3, #1
 800a748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a750:	bfa4      	itt	ge
 800a752:	463b      	movge	r3, r7
 800a754:	4627      	movge	r7, r4
 800a756:	4630      	mov	r0, r6
 800a758:	6879      	ldr	r1, [r7, #4]
 800a75a:	bfa6      	itte	ge
 800a75c:	461c      	movge	r4, r3
 800a75e:	2500      	movge	r5, #0
 800a760:	2501      	movlt	r5, #1
 800a762:	f7ff fd3f 	bl	800a1e4 <_Balloc>
 800a766:	b920      	cbnz	r0, 800a772 <__mdiff+0x5a>
 800a768:	4b2d      	ldr	r3, [pc, #180]	; (800a820 <__mdiff+0x108>)
 800a76a:	4602      	mov	r2, r0
 800a76c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a770:	e7e6      	b.n	800a740 <__mdiff+0x28>
 800a772:	693e      	ldr	r6, [r7, #16]
 800a774:	60c5      	str	r5, [r0, #12]
 800a776:	6925      	ldr	r5, [r4, #16]
 800a778:	f107 0114 	add.w	r1, r7, #20
 800a77c:	f104 0914 	add.w	r9, r4, #20
 800a780:	f100 0e14 	add.w	lr, r0, #20
 800a784:	f107 0210 	add.w	r2, r7, #16
 800a788:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a78c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a790:	46f2      	mov	sl, lr
 800a792:	2700      	movs	r7, #0
 800a794:	f859 3b04 	ldr.w	r3, [r9], #4
 800a798:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a79c:	fa1f f883 	uxth.w	r8, r3
 800a7a0:	fa17 f78b 	uxtah	r7, r7, fp
 800a7a4:	0c1b      	lsrs	r3, r3, #16
 800a7a6:	eba7 0808 	sub.w	r8, r7, r8
 800a7aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7b2:	fa1f f888 	uxth.w	r8, r8
 800a7b6:	141f      	asrs	r7, r3, #16
 800a7b8:	454d      	cmp	r5, r9
 800a7ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7be:	f84a 3b04 	str.w	r3, [sl], #4
 800a7c2:	d8e7      	bhi.n	800a794 <__mdiff+0x7c>
 800a7c4:	1b2b      	subs	r3, r5, r4
 800a7c6:	3b15      	subs	r3, #21
 800a7c8:	f023 0303 	bic.w	r3, r3, #3
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	3415      	adds	r4, #21
 800a7d0:	42a5      	cmp	r5, r4
 800a7d2:	bf38      	it	cc
 800a7d4:	2304      	movcc	r3, #4
 800a7d6:	4419      	add	r1, r3
 800a7d8:	4473      	add	r3, lr
 800a7da:	469e      	mov	lr, r3
 800a7dc:	460d      	mov	r5, r1
 800a7de:	4565      	cmp	r5, ip
 800a7e0:	d30e      	bcc.n	800a800 <__mdiff+0xe8>
 800a7e2:	f10c 0203 	add.w	r2, ip, #3
 800a7e6:	1a52      	subs	r2, r2, r1
 800a7e8:	f022 0203 	bic.w	r2, r2, #3
 800a7ec:	3903      	subs	r1, #3
 800a7ee:	458c      	cmp	ip, r1
 800a7f0:	bf38      	it	cc
 800a7f2:	2200      	movcc	r2, #0
 800a7f4:	441a      	add	r2, r3
 800a7f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7fa:	b17b      	cbz	r3, 800a81c <__mdiff+0x104>
 800a7fc:	6106      	str	r6, [r0, #16]
 800a7fe:	e7a5      	b.n	800a74c <__mdiff+0x34>
 800a800:	f855 8b04 	ldr.w	r8, [r5], #4
 800a804:	fa17 f488 	uxtah	r4, r7, r8
 800a808:	1422      	asrs	r2, r4, #16
 800a80a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a80e:	b2a4      	uxth	r4, r4
 800a810:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a814:	f84e 4b04 	str.w	r4, [lr], #4
 800a818:	1417      	asrs	r7, r2, #16
 800a81a:	e7e0      	b.n	800a7de <__mdiff+0xc6>
 800a81c:	3e01      	subs	r6, #1
 800a81e:	e7ea      	b.n	800a7f6 <__mdiff+0xde>
 800a820:	0800eddf 	.word	0x0800eddf
 800a824:	0800edf0 	.word	0x0800edf0

0800a828 <__d2b>:
 800a828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a82c:	4689      	mov	r9, r1
 800a82e:	2101      	movs	r1, #1
 800a830:	ec57 6b10 	vmov	r6, r7, d0
 800a834:	4690      	mov	r8, r2
 800a836:	f7ff fcd5 	bl	800a1e4 <_Balloc>
 800a83a:	4604      	mov	r4, r0
 800a83c:	b930      	cbnz	r0, 800a84c <__d2b+0x24>
 800a83e:	4602      	mov	r2, r0
 800a840:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <__d2b+0xb0>)
 800a842:	4826      	ldr	r0, [pc, #152]	; (800a8dc <__d2b+0xb4>)
 800a844:	f240 310a 	movw	r1, #778	; 0x30a
 800a848:	f000 fa70 	bl	800ad2c <__assert_func>
 800a84c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a854:	bb35      	cbnz	r5, 800a8a4 <__d2b+0x7c>
 800a856:	2e00      	cmp	r6, #0
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	d028      	beq.n	800a8ae <__d2b+0x86>
 800a85c:	4668      	mov	r0, sp
 800a85e:	9600      	str	r6, [sp, #0]
 800a860:	f7ff fd8c 	bl	800a37c <__lo0bits>
 800a864:	9900      	ldr	r1, [sp, #0]
 800a866:	b300      	cbz	r0, 800a8aa <__d2b+0x82>
 800a868:	9a01      	ldr	r2, [sp, #4]
 800a86a:	f1c0 0320 	rsb	r3, r0, #32
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	430b      	orrs	r3, r1
 800a874:	40c2      	lsrs	r2, r0
 800a876:	6163      	str	r3, [r4, #20]
 800a878:	9201      	str	r2, [sp, #4]
 800a87a:	9b01      	ldr	r3, [sp, #4]
 800a87c:	61a3      	str	r3, [r4, #24]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bf14      	ite	ne
 800a882:	2202      	movne	r2, #2
 800a884:	2201      	moveq	r2, #1
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	b1d5      	cbz	r5, 800a8c0 <__d2b+0x98>
 800a88a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a88e:	4405      	add	r5, r0
 800a890:	f8c9 5000 	str.w	r5, [r9]
 800a894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a898:	f8c8 0000 	str.w	r0, [r8]
 800a89c:	4620      	mov	r0, r4
 800a89e:	b003      	add	sp, #12
 800a8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8a8:	e7d5      	b.n	800a856 <__d2b+0x2e>
 800a8aa:	6161      	str	r1, [r4, #20]
 800a8ac:	e7e5      	b.n	800a87a <__d2b+0x52>
 800a8ae:	a801      	add	r0, sp, #4
 800a8b0:	f7ff fd64 	bl	800a37c <__lo0bits>
 800a8b4:	9b01      	ldr	r3, [sp, #4]
 800a8b6:	6163      	str	r3, [r4, #20]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	6122      	str	r2, [r4, #16]
 800a8bc:	3020      	adds	r0, #32
 800a8be:	e7e3      	b.n	800a888 <__d2b+0x60>
 800a8c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8c8:	f8c9 0000 	str.w	r0, [r9]
 800a8cc:	6918      	ldr	r0, [r3, #16]
 800a8ce:	f7ff fd35 	bl	800a33c <__hi0bits>
 800a8d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8d6:	e7df      	b.n	800a898 <__d2b+0x70>
 800a8d8:	0800eddf 	.word	0x0800eddf
 800a8dc:	0800edf0 	.word	0x0800edf0

0800a8e0 <_calloc_r>:
 800a8e0:	b513      	push	{r0, r1, r4, lr}
 800a8e2:	434a      	muls	r2, r1
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	9201      	str	r2, [sp, #4]
 800a8e8:	f000 f85a 	bl	800a9a0 <_malloc_r>
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	b118      	cbz	r0, 800a8f8 <_calloc_r+0x18>
 800a8f0:	9a01      	ldr	r2, [sp, #4]
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	f7fe f950 	bl	8008b98 <memset>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	b002      	add	sp, #8
 800a8fc:	bd10      	pop	{r4, pc}
	...

0800a900 <_free_r>:
 800a900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a902:	2900      	cmp	r1, #0
 800a904:	d048      	beq.n	800a998 <_free_r+0x98>
 800a906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90a:	9001      	str	r0, [sp, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f1a1 0404 	sub.w	r4, r1, #4
 800a912:	bfb8      	it	lt
 800a914:	18e4      	addlt	r4, r4, r3
 800a916:	f000 fa65 	bl	800ade4 <__malloc_lock>
 800a91a:	4a20      	ldr	r2, [pc, #128]	; (800a99c <_free_r+0x9c>)
 800a91c:	9801      	ldr	r0, [sp, #4]
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	4615      	mov	r5, r2
 800a922:	b933      	cbnz	r3, 800a932 <_free_r+0x32>
 800a924:	6063      	str	r3, [r4, #4]
 800a926:	6014      	str	r4, [r2, #0]
 800a928:	b003      	add	sp, #12
 800a92a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a92e:	f000 ba5f 	b.w	800adf0 <__malloc_unlock>
 800a932:	42a3      	cmp	r3, r4
 800a934:	d90b      	bls.n	800a94e <_free_r+0x4e>
 800a936:	6821      	ldr	r1, [r4, #0]
 800a938:	1862      	adds	r2, r4, r1
 800a93a:	4293      	cmp	r3, r2
 800a93c:	bf04      	itt	eq
 800a93e:	681a      	ldreq	r2, [r3, #0]
 800a940:	685b      	ldreq	r3, [r3, #4]
 800a942:	6063      	str	r3, [r4, #4]
 800a944:	bf04      	itt	eq
 800a946:	1852      	addeq	r2, r2, r1
 800a948:	6022      	streq	r2, [r4, #0]
 800a94a:	602c      	str	r4, [r5, #0]
 800a94c:	e7ec      	b.n	800a928 <_free_r+0x28>
 800a94e:	461a      	mov	r2, r3
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	b10b      	cbz	r3, 800a958 <_free_r+0x58>
 800a954:	42a3      	cmp	r3, r4
 800a956:	d9fa      	bls.n	800a94e <_free_r+0x4e>
 800a958:	6811      	ldr	r1, [r2, #0]
 800a95a:	1855      	adds	r5, r2, r1
 800a95c:	42a5      	cmp	r5, r4
 800a95e:	d10b      	bne.n	800a978 <_free_r+0x78>
 800a960:	6824      	ldr	r4, [r4, #0]
 800a962:	4421      	add	r1, r4
 800a964:	1854      	adds	r4, r2, r1
 800a966:	42a3      	cmp	r3, r4
 800a968:	6011      	str	r1, [r2, #0]
 800a96a:	d1dd      	bne.n	800a928 <_free_r+0x28>
 800a96c:	681c      	ldr	r4, [r3, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	6053      	str	r3, [r2, #4]
 800a972:	4421      	add	r1, r4
 800a974:	6011      	str	r1, [r2, #0]
 800a976:	e7d7      	b.n	800a928 <_free_r+0x28>
 800a978:	d902      	bls.n	800a980 <_free_r+0x80>
 800a97a:	230c      	movs	r3, #12
 800a97c:	6003      	str	r3, [r0, #0]
 800a97e:	e7d3      	b.n	800a928 <_free_r+0x28>
 800a980:	6825      	ldr	r5, [r4, #0]
 800a982:	1961      	adds	r1, r4, r5
 800a984:	428b      	cmp	r3, r1
 800a986:	bf04      	itt	eq
 800a988:	6819      	ldreq	r1, [r3, #0]
 800a98a:	685b      	ldreq	r3, [r3, #4]
 800a98c:	6063      	str	r3, [r4, #4]
 800a98e:	bf04      	itt	eq
 800a990:	1949      	addeq	r1, r1, r5
 800a992:	6021      	streq	r1, [r4, #0]
 800a994:	6054      	str	r4, [r2, #4]
 800a996:	e7c7      	b.n	800a928 <_free_r+0x28>
 800a998:	b003      	add	sp, #12
 800a99a:	bd30      	pop	{r4, r5, pc}
 800a99c:	20000940 	.word	0x20000940

0800a9a0 <_malloc_r>:
 800a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a2:	1ccd      	adds	r5, r1, #3
 800a9a4:	f025 0503 	bic.w	r5, r5, #3
 800a9a8:	3508      	adds	r5, #8
 800a9aa:	2d0c      	cmp	r5, #12
 800a9ac:	bf38      	it	cc
 800a9ae:	250c      	movcc	r5, #12
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	db01      	blt.n	800a9ba <_malloc_r+0x1a>
 800a9b6:	42a9      	cmp	r1, r5
 800a9b8:	d903      	bls.n	800a9c2 <_malloc_r+0x22>
 800a9ba:	230c      	movs	r3, #12
 800a9bc:	6033      	str	r3, [r6, #0]
 800a9be:	2000      	movs	r0, #0
 800a9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c2:	f000 fa0f 	bl	800ade4 <__malloc_lock>
 800a9c6:	4921      	ldr	r1, [pc, #132]	; (800aa4c <_malloc_r+0xac>)
 800a9c8:	680a      	ldr	r2, [r1, #0]
 800a9ca:	4614      	mov	r4, r2
 800a9cc:	b99c      	cbnz	r4, 800a9f6 <_malloc_r+0x56>
 800a9ce:	4f20      	ldr	r7, [pc, #128]	; (800aa50 <_malloc_r+0xb0>)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	b923      	cbnz	r3, 800a9de <_malloc_r+0x3e>
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f000 f998 	bl	800ad0c <_sbrk_r>
 800a9dc:	6038      	str	r0, [r7, #0]
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	f000 f993 	bl	800ad0c <_sbrk_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d123      	bne.n	800aa32 <_malloc_r+0x92>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	6033      	str	r3, [r6, #0]
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f000 f9fe 	bl	800adf0 <__malloc_unlock>
 800a9f4:	e7e3      	b.n	800a9be <_malloc_r+0x1e>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	1b5b      	subs	r3, r3, r5
 800a9fa:	d417      	bmi.n	800aa2c <_malloc_r+0x8c>
 800a9fc:	2b0b      	cmp	r3, #11
 800a9fe:	d903      	bls.n	800aa08 <_malloc_r+0x68>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	441c      	add	r4, r3
 800aa04:	6025      	str	r5, [r4, #0]
 800aa06:	e004      	b.n	800aa12 <_malloc_r+0x72>
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	42a2      	cmp	r2, r4
 800aa0c:	bf0c      	ite	eq
 800aa0e:	600b      	streq	r3, [r1, #0]
 800aa10:	6053      	strne	r3, [r2, #4]
 800aa12:	4630      	mov	r0, r6
 800aa14:	f000 f9ec 	bl	800adf0 <__malloc_unlock>
 800aa18:	f104 000b 	add.w	r0, r4, #11
 800aa1c:	1d23      	adds	r3, r4, #4
 800aa1e:	f020 0007 	bic.w	r0, r0, #7
 800aa22:	1ac2      	subs	r2, r0, r3
 800aa24:	d0cc      	beq.n	800a9c0 <_malloc_r+0x20>
 800aa26:	1a1b      	subs	r3, r3, r0
 800aa28:	50a3      	str	r3, [r4, r2]
 800aa2a:	e7c9      	b.n	800a9c0 <_malloc_r+0x20>
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	6864      	ldr	r4, [r4, #4]
 800aa30:	e7cc      	b.n	800a9cc <_malloc_r+0x2c>
 800aa32:	1cc4      	adds	r4, r0, #3
 800aa34:	f024 0403 	bic.w	r4, r4, #3
 800aa38:	42a0      	cmp	r0, r4
 800aa3a:	d0e3      	beq.n	800aa04 <_malloc_r+0x64>
 800aa3c:	1a21      	subs	r1, r4, r0
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f000 f964 	bl	800ad0c <_sbrk_r>
 800aa44:	3001      	adds	r0, #1
 800aa46:	d1dd      	bne.n	800aa04 <_malloc_r+0x64>
 800aa48:	e7cf      	b.n	800a9ea <_malloc_r+0x4a>
 800aa4a:	bf00      	nop
 800aa4c:	20000940 	.word	0x20000940
 800aa50:	20000944 	.word	0x20000944

0800aa54 <__ssputs_r>:
 800aa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	688e      	ldr	r6, [r1, #8]
 800aa5a:	429e      	cmp	r6, r3
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	4690      	mov	r8, r2
 800aa62:	461f      	mov	r7, r3
 800aa64:	d838      	bhi.n	800aad8 <__ssputs_r+0x84>
 800aa66:	898a      	ldrh	r2, [r1, #12]
 800aa68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa6c:	d032      	beq.n	800aad4 <__ssputs_r+0x80>
 800aa6e:	6825      	ldr	r5, [r4, #0]
 800aa70:	6909      	ldr	r1, [r1, #16]
 800aa72:	eba5 0901 	sub.w	r9, r5, r1
 800aa76:	6965      	ldr	r5, [r4, #20]
 800aa78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa80:	3301      	adds	r3, #1
 800aa82:	444b      	add	r3, r9
 800aa84:	106d      	asrs	r5, r5, #1
 800aa86:	429d      	cmp	r5, r3
 800aa88:	bf38      	it	cc
 800aa8a:	461d      	movcc	r5, r3
 800aa8c:	0553      	lsls	r3, r2, #21
 800aa8e:	d531      	bpl.n	800aaf4 <__ssputs_r+0xa0>
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7ff ff85 	bl	800a9a0 <_malloc_r>
 800aa96:	4606      	mov	r6, r0
 800aa98:	b950      	cbnz	r0, 800aab0 <__ssputs_r+0x5c>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	f8ca 3000 	str.w	r3, [sl]
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa6:	81a3      	strh	r3, [r4, #12]
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab0:	6921      	ldr	r1, [r4, #16]
 800aab2:	464a      	mov	r2, r9
 800aab4:	f7ff fb88 	bl	800a1c8 <memcpy>
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aabe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	6126      	str	r6, [r4, #16]
 800aac6:	6165      	str	r5, [r4, #20]
 800aac8:	444e      	add	r6, r9
 800aaca:	eba5 0509 	sub.w	r5, r5, r9
 800aace:	6026      	str	r6, [r4, #0]
 800aad0:	60a5      	str	r5, [r4, #8]
 800aad2:	463e      	mov	r6, r7
 800aad4:	42be      	cmp	r6, r7
 800aad6:	d900      	bls.n	800aada <__ssputs_r+0x86>
 800aad8:	463e      	mov	r6, r7
 800aada:	4632      	mov	r2, r6
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	4641      	mov	r1, r8
 800aae0:	f000 f966 	bl	800adb0 <memmove>
 800aae4:	68a3      	ldr	r3, [r4, #8]
 800aae6:	6822      	ldr	r2, [r4, #0]
 800aae8:	1b9b      	subs	r3, r3, r6
 800aaea:	4432      	add	r2, r6
 800aaec:	60a3      	str	r3, [r4, #8]
 800aaee:	6022      	str	r2, [r4, #0]
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	e7db      	b.n	800aaac <__ssputs_r+0x58>
 800aaf4:	462a      	mov	r2, r5
 800aaf6:	f000 f981 	bl	800adfc <_realloc_r>
 800aafa:	4606      	mov	r6, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d1e1      	bne.n	800aac4 <__ssputs_r+0x70>
 800ab00:	6921      	ldr	r1, [r4, #16]
 800ab02:	4650      	mov	r0, sl
 800ab04:	f7ff fefc 	bl	800a900 <_free_r>
 800ab08:	e7c7      	b.n	800aa9a <__ssputs_r+0x46>
	...

0800ab0c <_svfiprintf_r>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	4698      	mov	r8, r3
 800ab12:	898b      	ldrh	r3, [r1, #12]
 800ab14:	061b      	lsls	r3, r3, #24
 800ab16:	b09d      	sub	sp, #116	; 0x74
 800ab18:	4607      	mov	r7, r0
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	d50e      	bpl.n	800ab3e <_svfiprintf_r+0x32>
 800ab20:	690b      	ldr	r3, [r1, #16]
 800ab22:	b963      	cbnz	r3, 800ab3e <_svfiprintf_r+0x32>
 800ab24:	2140      	movs	r1, #64	; 0x40
 800ab26:	f7ff ff3b 	bl	800a9a0 <_malloc_r>
 800ab2a:	6028      	str	r0, [r5, #0]
 800ab2c:	6128      	str	r0, [r5, #16]
 800ab2e:	b920      	cbnz	r0, 800ab3a <_svfiprintf_r+0x2e>
 800ab30:	230c      	movs	r3, #12
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	e0d1      	b.n	800acde <_svfiprintf_r+0x1d2>
 800ab3a:	2340      	movs	r3, #64	; 0x40
 800ab3c:	616b      	str	r3, [r5, #20]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	9309      	str	r3, [sp, #36]	; 0x24
 800ab42:	2320      	movs	r3, #32
 800ab44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab48:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab4c:	2330      	movs	r3, #48	; 0x30
 800ab4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800acf8 <_svfiprintf_r+0x1ec>
 800ab52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab56:	f04f 0901 	mov.w	r9, #1
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	469a      	mov	sl, r3
 800ab5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab62:	b10a      	cbz	r2, 800ab68 <_svfiprintf_r+0x5c>
 800ab64:	2a25      	cmp	r2, #37	; 0x25
 800ab66:	d1f9      	bne.n	800ab5c <_svfiprintf_r+0x50>
 800ab68:	ebba 0b04 	subs.w	fp, sl, r4
 800ab6c:	d00b      	beq.n	800ab86 <_svfiprintf_r+0x7a>
 800ab6e:	465b      	mov	r3, fp
 800ab70:	4622      	mov	r2, r4
 800ab72:	4629      	mov	r1, r5
 800ab74:	4638      	mov	r0, r7
 800ab76:	f7ff ff6d 	bl	800aa54 <__ssputs_r>
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	f000 80aa 	beq.w	800acd4 <_svfiprintf_r+0x1c8>
 800ab80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab82:	445a      	add	r2, fp
 800ab84:	9209      	str	r2, [sp, #36]	; 0x24
 800ab86:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 80a2 	beq.w	800acd4 <_svfiprintf_r+0x1c8>
 800ab90:	2300      	movs	r3, #0
 800ab92:	f04f 32ff 	mov.w	r2, #4294967295
 800ab96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab9a:	f10a 0a01 	add.w	sl, sl, #1
 800ab9e:	9304      	str	r3, [sp, #16]
 800aba0:	9307      	str	r3, [sp, #28]
 800aba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aba6:	931a      	str	r3, [sp, #104]	; 0x68
 800aba8:	4654      	mov	r4, sl
 800abaa:	2205      	movs	r2, #5
 800abac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb0:	4851      	ldr	r0, [pc, #324]	; (800acf8 <_svfiprintf_r+0x1ec>)
 800abb2:	f7f5 fb15 	bl	80001e0 <memchr>
 800abb6:	9a04      	ldr	r2, [sp, #16]
 800abb8:	b9d8      	cbnz	r0, 800abf2 <_svfiprintf_r+0xe6>
 800abba:	06d0      	lsls	r0, r2, #27
 800abbc:	bf44      	itt	mi
 800abbe:	2320      	movmi	r3, #32
 800abc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abc4:	0711      	lsls	r1, r2, #28
 800abc6:	bf44      	itt	mi
 800abc8:	232b      	movmi	r3, #43	; 0x2b
 800abca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abce:	f89a 3000 	ldrb.w	r3, [sl]
 800abd2:	2b2a      	cmp	r3, #42	; 0x2a
 800abd4:	d015      	beq.n	800ac02 <_svfiprintf_r+0xf6>
 800abd6:	9a07      	ldr	r2, [sp, #28]
 800abd8:	4654      	mov	r4, sl
 800abda:	2000      	movs	r0, #0
 800abdc:	f04f 0c0a 	mov.w	ip, #10
 800abe0:	4621      	mov	r1, r4
 800abe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abe6:	3b30      	subs	r3, #48	; 0x30
 800abe8:	2b09      	cmp	r3, #9
 800abea:	d94e      	bls.n	800ac8a <_svfiprintf_r+0x17e>
 800abec:	b1b0      	cbz	r0, 800ac1c <_svfiprintf_r+0x110>
 800abee:	9207      	str	r2, [sp, #28]
 800abf0:	e014      	b.n	800ac1c <_svfiprintf_r+0x110>
 800abf2:	eba0 0308 	sub.w	r3, r0, r8
 800abf6:	fa09 f303 	lsl.w	r3, r9, r3
 800abfa:	4313      	orrs	r3, r2
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	46a2      	mov	sl, r4
 800ac00:	e7d2      	b.n	800aba8 <_svfiprintf_r+0x9c>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	1d19      	adds	r1, r3, #4
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	9103      	str	r1, [sp, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	bfbb      	ittet	lt
 800ac0e:	425b      	neglt	r3, r3
 800ac10:	f042 0202 	orrlt.w	r2, r2, #2
 800ac14:	9307      	strge	r3, [sp, #28]
 800ac16:	9307      	strlt	r3, [sp, #28]
 800ac18:	bfb8      	it	lt
 800ac1a:	9204      	strlt	r2, [sp, #16]
 800ac1c:	7823      	ldrb	r3, [r4, #0]
 800ac1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac20:	d10c      	bne.n	800ac3c <_svfiprintf_r+0x130>
 800ac22:	7863      	ldrb	r3, [r4, #1]
 800ac24:	2b2a      	cmp	r3, #42	; 0x2a
 800ac26:	d135      	bne.n	800ac94 <_svfiprintf_r+0x188>
 800ac28:	9b03      	ldr	r3, [sp, #12]
 800ac2a:	1d1a      	adds	r2, r3, #4
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	9203      	str	r2, [sp, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	bfb8      	it	lt
 800ac34:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac38:	3402      	adds	r4, #2
 800ac3a:	9305      	str	r3, [sp, #20]
 800ac3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad08 <_svfiprintf_r+0x1fc>
 800ac40:	7821      	ldrb	r1, [r4, #0]
 800ac42:	2203      	movs	r2, #3
 800ac44:	4650      	mov	r0, sl
 800ac46:	f7f5 facb 	bl	80001e0 <memchr>
 800ac4a:	b140      	cbz	r0, 800ac5e <_svfiprintf_r+0x152>
 800ac4c:	2340      	movs	r3, #64	; 0x40
 800ac4e:	eba0 000a 	sub.w	r0, r0, sl
 800ac52:	fa03 f000 	lsl.w	r0, r3, r0
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	4303      	orrs	r3, r0
 800ac5a:	3401      	adds	r4, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac62:	4826      	ldr	r0, [pc, #152]	; (800acfc <_svfiprintf_r+0x1f0>)
 800ac64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac68:	2206      	movs	r2, #6
 800ac6a:	f7f5 fab9 	bl	80001e0 <memchr>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d038      	beq.n	800ace4 <_svfiprintf_r+0x1d8>
 800ac72:	4b23      	ldr	r3, [pc, #140]	; (800ad00 <_svfiprintf_r+0x1f4>)
 800ac74:	bb1b      	cbnz	r3, 800acbe <_svfiprintf_r+0x1b2>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	3307      	adds	r3, #7
 800ac7a:	f023 0307 	bic.w	r3, r3, #7
 800ac7e:	3308      	adds	r3, #8
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac84:	4433      	add	r3, r6
 800ac86:	9309      	str	r3, [sp, #36]	; 0x24
 800ac88:	e767      	b.n	800ab5a <_svfiprintf_r+0x4e>
 800ac8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8e:	460c      	mov	r4, r1
 800ac90:	2001      	movs	r0, #1
 800ac92:	e7a5      	b.n	800abe0 <_svfiprintf_r+0xd4>
 800ac94:	2300      	movs	r3, #0
 800ac96:	3401      	adds	r4, #1
 800ac98:	9305      	str	r3, [sp, #20]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f04f 0c0a 	mov.w	ip, #10
 800aca0:	4620      	mov	r0, r4
 800aca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca6:	3a30      	subs	r2, #48	; 0x30
 800aca8:	2a09      	cmp	r2, #9
 800acaa:	d903      	bls.n	800acb4 <_svfiprintf_r+0x1a8>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0c5      	beq.n	800ac3c <_svfiprintf_r+0x130>
 800acb0:	9105      	str	r1, [sp, #20]
 800acb2:	e7c3      	b.n	800ac3c <_svfiprintf_r+0x130>
 800acb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb8:	4604      	mov	r4, r0
 800acba:	2301      	movs	r3, #1
 800acbc:	e7f0      	b.n	800aca0 <_svfiprintf_r+0x194>
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	462a      	mov	r2, r5
 800acc4:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <_svfiprintf_r+0x1f8>)
 800acc6:	a904      	add	r1, sp, #16
 800acc8:	4638      	mov	r0, r7
 800acca:	f7fe f80d 	bl	8008ce8 <_printf_float>
 800acce:	1c42      	adds	r2, r0, #1
 800acd0:	4606      	mov	r6, r0
 800acd2:	d1d6      	bne.n	800ac82 <_svfiprintf_r+0x176>
 800acd4:	89ab      	ldrh	r3, [r5, #12]
 800acd6:	065b      	lsls	r3, r3, #25
 800acd8:	f53f af2c 	bmi.w	800ab34 <_svfiprintf_r+0x28>
 800acdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acde:	b01d      	add	sp, #116	; 0x74
 800ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace4:	ab03      	add	r3, sp, #12
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	462a      	mov	r2, r5
 800acea:	4b06      	ldr	r3, [pc, #24]	; (800ad04 <_svfiprintf_r+0x1f8>)
 800acec:	a904      	add	r1, sp, #16
 800acee:	4638      	mov	r0, r7
 800acf0:	f7fe fa9e 	bl	8009230 <_printf_i>
 800acf4:	e7eb      	b.n	800acce <_svfiprintf_r+0x1c2>
 800acf6:	bf00      	nop
 800acf8:	0800ef4c 	.word	0x0800ef4c
 800acfc:	0800ef56 	.word	0x0800ef56
 800ad00:	08008ce9 	.word	0x08008ce9
 800ad04:	0800aa55 	.word	0x0800aa55
 800ad08:	0800ef52 	.word	0x0800ef52

0800ad0c <_sbrk_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d06      	ldr	r5, [pc, #24]	; (800ad28 <_sbrk_r+0x1c>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7f7 fa40 	bl	800219c <_sbrk>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_sbrk_r+0x1a>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_sbrk_r+0x1a>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	20000b70 	.word	0x20000b70

0800ad2c <__assert_func>:
 800ad2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad2e:	4614      	mov	r4, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <__assert_func+0x2c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	68d8      	ldr	r0, [r3, #12]
 800ad3a:	b14c      	cbz	r4, 800ad50 <__assert_func+0x24>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <__assert_func+0x30>)
 800ad3e:	9100      	str	r1, [sp, #0]
 800ad40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad44:	4906      	ldr	r1, [pc, #24]	; (800ad60 <__assert_func+0x34>)
 800ad46:	462b      	mov	r3, r5
 800ad48:	f000 f80e 	bl	800ad68 <fiprintf>
 800ad4c:	f000 faa4 	bl	800b298 <abort>
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <__assert_func+0x38>)
 800ad52:	461c      	mov	r4, r3
 800ad54:	e7f3      	b.n	800ad3e <__assert_func+0x12>
 800ad56:	bf00      	nop
 800ad58:	20000064 	.word	0x20000064
 800ad5c:	0800ef5d 	.word	0x0800ef5d
 800ad60:	0800ef6a 	.word	0x0800ef6a
 800ad64:	0800ef98 	.word	0x0800ef98

0800ad68 <fiprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b503      	push	{r0, r1, lr}
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	ab03      	add	r3, sp, #12
 800ad70:	4805      	ldr	r0, [pc, #20]	; (800ad88 <fiprintf+0x20>)
 800ad72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f000 f88f 	bl	800ae9c <_vfiprintf_r>
 800ad7e:	b002      	add	sp, #8
 800ad80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad84:	b003      	add	sp, #12
 800ad86:	4770      	bx	lr
 800ad88:	20000064 	.word	0x20000064

0800ad8c <__ascii_mbtowc>:
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	b901      	cbnz	r1, 800ad92 <__ascii_mbtowc+0x6>
 800ad90:	a901      	add	r1, sp, #4
 800ad92:	b142      	cbz	r2, 800ada6 <__ascii_mbtowc+0x1a>
 800ad94:	b14b      	cbz	r3, 800adaa <__ascii_mbtowc+0x1e>
 800ad96:	7813      	ldrb	r3, [r2, #0]
 800ad98:	600b      	str	r3, [r1, #0]
 800ad9a:	7812      	ldrb	r2, [r2, #0]
 800ad9c:	1e10      	subs	r0, r2, #0
 800ad9e:	bf18      	it	ne
 800ada0:	2001      	movne	r0, #1
 800ada2:	b002      	add	sp, #8
 800ada4:	4770      	bx	lr
 800ada6:	4610      	mov	r0, r2
 800ada8:	e7fb      	b.n	800ada2 <__ascii_mbtowc+0x16>
 800adaa:	f06f 0001 	mvn.w	r0, #1
 800adae:	e7f8      	b.n	800ada2 <__ascii_mbtowc+0x16>

0800adb0 <memmove>:
 800adb0:	4288      	cmp	r0, r1
 800adb2:	b510      	push	{r4, lr}
 800adb4:	eb01 0402 	add.w	r4, r1, r2
 800adb8:	d902      	bls.n	800adc0 <memmove+0x10>
 800adba:	4284      	cmp	r4, r0
 800adbc:	4623      	mov	r3, r4
 800adbe:	d807      	bhi.n	800add0 <memmove+0x20>
 800adc0:	1e43      	subs	r3, r0, #1
 800adc2:	42a1      	cmp	r1, r4
 800adc4:	d008      	beq.n	800add8 <memmove+0x28>
 800adc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adce:	e7f8      	b.n	800adc2 <memmove+0x12>
 800add0:	4402      	add	r2, r0
 800add2:	4601      	mov	r1, r0
 800add4:	428a      	cmp	r2, r1
 800add6:	d100      	bne.n	800adda <memmove+0x2a>
 800add8:	bd10      	pop	{r4, pc}
 800adda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ade2:	e7f7      	b.n	800add4 <memmove+0x24>

0800ade4 <__malloc_lock>:
 800ade4:	4801      	ldr	r0, [pc, #4]	; (800adec <__malloc_lock+0x8>)
 800ade6:	f000 bc17 	b.w	800b618 <__retarget_lock_acquire_recursive>
 800adea:	bf00      	nop
 800adec:	20000b78 	.word	0x20000b78

0800adf0 <__malloc_unlock>:
 800adf0:	4801      	ldr	r0, [pc, #4]	; (800adf8 <__malloc_unlock+0x8>)
 800adf2:	f000 bc12 	b.w	800b61a <__retarget_lock_release_recursive>
 800adf6:	bf00      	nop
 800adf8:	20000b78 	.word	0x20000b78

0800adfc <_realloc_r>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	4607      	mov	r7, r0
 800ae00:	4614      	mov	r4, r2
 800ae02:	460e      	mov	r6, r1
 800ae04:	b921      	cbnz	r1, 800ae10 <_realloc_r+0x14>
 800ae06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	f7ff bdc8 	b.w	800a9a0 <_malloc_r>
 800ae10:	b922      	cbnz	r2, 800ae1c <_realloc_r+0x20>
 800ae12:	f7ff fd75 	bl	800a900 <_free_r>
 800ae16:	4625      	mov	r5, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae1c:	f000 fc62 	bl	800b6e4 <_malloc_usable_size_r>
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d20f      	bcs.n	800ae44 <_realloc_r+0x48>
 800ae24:	4621      	mov	r1, r4
 800ae26:	4638      	mov	r0, r7
 800ae28:	f7ff fdba 	bl	800a9a0 <_malloc_r>
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d0f2      	beq.n	800ae18 <_realloc_r+0x1c>
 800ae32:	4631      	mov	r1, r6
 800ae34:	4622      	mov	r2, r4
 800ae36:	f7ff f9c7 	bl	800a1c8 <memcpy>
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff fd5f 	bl	800a900 <_free_r>
 800ae42:	e7e9      	b.n	800ae18 <_realloc_r+0x1c>
 800ae44:	4635      	mov	r5, r6
 800ae46:	e7e7      	b.n	800ae18 <_realloc_r+0x1c>

0800ae48 <__sfputc_r>:
 800ae48:	6893      	ldr	r3, [r2, #8]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	b410      	push	{r4}
 800ae50:	6093      	str	r3, [r2, #8]
 800ae52:	da08      	bge.n	800ae66 <__sfputc_r+0x1e>
 800ae54:	6994      	ldr	r4, [r2, #24]
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	db01      	blt.n	800ae5e <__sfputc_r+0x16>
 800ae5a:	290a      	cmp	r1, #10
 800ae5c:	d103      	bne.n	800ae66 <__sfputc_r+0x1e>
 800ae5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae62:	f000 b94b 	b.w	800b0fc <__swbuf_r>
 800ae66:	6813      	ldr	r3, [r2, #0]
 800ae68:	1c58      	adds	r0, r3, #1
 800ae6a:	6010      	str	r0, [r2, #0]
 800ae6c:	7019      	strb	r1, [r3, #0]
 800ae6e:	4608      	mov	r0, r1
 800ae70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <__sfputs_r>:
 800ae76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae78:	4606      	mov	r6, r0
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	18d5      	adds	r5, r2, r3
 800ae80:	42ac      	cmp	r4, r5
 800ae82:	d101      	bne.n	800ae88 <__sfputs_r+0x12>
 800ae84:	2000      	movs	r0, #0
 800ae86:	e007      	b.n	800ae98 <__sfputs_r+0x22>
 800ae88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8c:	463a      	mov	r2, r7
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff ffda 	bl	800ae48 <__sfputc_r>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d1f3      	bne.n	800ae80 <__sfputs_r+0xa>
 800ae98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae9c <_vfiprintf_r>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	460d      	mov	r5, r1
 800aea2:	b09d      	sub	sp, #116	; 0x74
 800aea4:	4614      	mov	r4, r2
 800aea6:	4698      	mov	r8, r3
 800aea8:	4606      	mov	r6, r0
 800aeaa:	b118      	cbz	r0, 800aeb4 <_vfiprintf_r+0x18>
 800aeac:	6983      	ldr	r3, [r0, #24]
 800aeae:	b90b      	cbnz	r3, 800aeb4 <_vfiprintf_r+0x18>
 800aeb0:	f000 fb14 	bl	800b4dc <__sinit>
 800aeb4:	4b89      	ldr	r3, [pc, #548]	; (800b0dc <_vfiprintf_r+0x240>)
 800aeb6:	429d      	cmp	r5, r3
 800aeb8:	d11b      	bne.n	800aef2 <_vfiprintf_r+0x56>
 800aeba:	6875      	ldr	r5, [r6, #4]
 800aebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aebe:	07d9      	lsls	r1, r3, #31
 800aec0:	d405      	bmi.n	800aece <_vfiprintf_r+0x32>
 800aec2:	89ab      	ldrh	r3, [r5, #12]
 800aec4:	059a      	lsls	r2, r3, #22
 800aec6:	d402      	bmi.n	800aece <_vfiprintf_r+0x32>
 800aec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeca:	f000 fba5 	bl	800b618 <__retarget_lock_acquire_recursive>
 800aece:	89ab      	ldrh	r3, [r5, #12]
 800aed0:	071b      	lsls	r3, r3, #28
 800aed2:	d501      	bpl.n	800aed8 <_vfiprintf_r+0x3c>
 800aed4:	692b      	ldr	r3, [r5, #16]
 800aed6:	b9eb      	cbnz	r3, 800af14 <_vfiprintf_r+0x78>
 800aed8:	4629      	mov	r1, r5
 800aeda:	4630      	mov	r0, r6
 800aedc:	f000 f96e 	bl	800b1bc <__swsetup_r>
 800aee0:	b1c0      	cbz	r0, 800af14 <_vfiprintf_r+0x78>
 800aee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee4:	07dc      	lsls	r4, r3, #31
 800aee6:	d50e      	bpl.n	800af06 <_vfiprintf_r+0x6a>
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeec:	b01d      	add	sp, #116	; 0x74
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	4b7b      	ldr	r3, [pc, #492]	; (800b0e0 <_vfiprintf_r+0x244>)
 800aef4:	429d      	cmp	r5, r3
 800aef6:	d101      	bne.n	800aefc <_vfiprintf_r+0x60>
 800aef8:	68b5      	ldr	r5, [r6, #8]
 800aefa:	e7df      	b.n	800aebc <_vfiprintf_r+0x20>
 800aefc:	4b79      	ldr	r3, [pc, #484]	; (800b0e4 <_vfiprintf_r+0x248>)
 800aefe:	429d      	cmp	r5, r3
 800af00:	bf08      	it	eq
 800af02:	68f5      	ldreq	r5, [r6, #12]
 800af04:	e7da      	b.n	800aebc <_vfiprintf_r+0x20>
 800af06:	89ab      	ldrh	r3, [r5, #12]
 800af08:	0598      	lsls	r0, r3, #22
 800af0a:	d4ed      	bmi.n	800aee8 <_vfiprintf_r+0x4c>
 800af0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af0e:	f000 fb84 	bl	800b61a <__retarget_lock_release_recursive>
 800af12:	e7e9      	b.n	800aee8 <_vfiprintf_r+0x4c>
 800af14:	2300      	movs	r3, #0
 800af16:	9309      	str	r3, [sp, #36]	; 0x24
 800af18:	2320      	movs	r3, #32
 800af1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af22:	2330      	movs	r3, #48	; 0x30
 800af24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0e8 <_vfiprintf_r+0x24c>
 800af28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af2c:	f04f 0901 	mov.w	r9, #1
 800af30:	4623      	mov	r3, r4
 800af32:	469a      	mov	sl, r3
 800af34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af38:	b10a      	cbz	r2, 800af3e <_vfiprintf_r+0xa2>
 800af3a:	2a25      	cmp	r2, #37	; 0x25
 800af3c:	d1f9      	bne.n	800af32 <_vfiprintf_r+0x96>
 800af3e:	ebba 0b04 	subs.w	fp, sl, r4
 800af42:	d00b      	beq.n	800af5c <_vfiprintf_r+0xc0>
 800af44:	465b      	mov	r3, fp
 800af46:	4622      	mov	r2, r4
 800af48:	4629      	mov	r1, r5
 800af4a:	4630      	mov	r0, r6
 800af4c:	f7ff ff93 	bl	800ae76 <__sfputs_r>
 800af50:	3001      	adds	r0, #1
 800af52:	f000 80aa 	beq.w	800b0aa <_vfiprintf_r+0x20e>
 800af56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af58:	445a      	add	r2, fp
 800af5a:	9209      	str	r2, [sp, #36]	; 0x24
 800af5c:	f89a 3000 	ldrb.w	r3, [sl]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 80a2 	beq.w	800b0aa <_vfiprintf_r+0x20e>
 800af66:	2300      	movs	r3, #0
 800af68:	f04f 32ff 	mov.w	r2, #4294967295
 800af6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af70:	f10a 0a01 	add.w	sl, sl, #1
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	9307      	str	r3, [sp, #28]
 800af78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af7c:	931a      	str	r3, [sp, #104]	; 0x68
 800af7e:	4654      	mov	r4, sl
 800af80:	2205      	movs	r2, #5
 800af82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af86:	4858      	ldr	r0, [pc, #352]	; (800b0e8 <_vfiprintf_r+0x24c>)
 800af88:	f7f5 f92a 	bl	80001e0 <memchr>
 800af8c:	9a04      	ldr	r2, [sp, #16]
 800af8e:	b9d8      	cbnz	r0, 800afc8 <_vfiprintf_r+0x12c>
 800af90:	06d1      	lsls	r1, r2, #27
 800af92:	bf44      	itt	mi
 800af94:	2320      	movmi	r3, #32
 800af96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af9a:	0713      	lsls	r3, r2, #28
 800af9c:	bf44      	itt	mi
 800af9e:	232b      	movmi	r3, #43	; 0x2b
 800afa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afa4:	f89a 3000 	ldrb.w	r3, [sl]
 800afa8:	2b2a      	cmp	r3, #42	; 0x2a
 800afaa:	d015      	beq.n	800afd8 <_vfiprintf_r+0x13c>
 800afac:	9a07      	ldr	r2, [sp, #28]
 800afae:	4654      	mov	r4, sl
 800afb0:	2000      	movs	r0, #0
 800afb2:	f04f 0c0a 	mov.w	ip, #10
 800afb6:	4621      	mov	r1, r4
 800afb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afbc:	3b30      	subs	r3, #48	; 0x30
 800afbe:	2b09      	cmp	r3, #9
 800afc0:	d94e      	bls.n	800b060 <_vfiprintf_r+0x1c4>
 800afc2:	b1b0      	cbz	r0, 800aff2 <_vfiprintf_r+0x156>
 800afc4:	9207      	str	r2, [sp, #28]
 800afc6:	e014      	b.n	800aff2 <_vfiprintf_r+0x156>
 800afc8:	eba0 0308 	sub.w	r3, r0, r8
 800afcc:	fa09 f303 	lsl.w	r3, r9, r3
 800afd0:	4313      	orrs	r3, r2
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	46a2      	mov	sl, r4
 800afd6:	e7d2      	b.n	800af7e <_vfiprintf_r+0xe2>
 800afd8:	9b03      	ldr	r3, [sp, #12]
 800afda:	1d19      	adds	r1, r3, #4
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	9103      	str	r1, [sp, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	bfbb      	ittet	lt
 800afe4:	425b      	neglt	r3, r3
 800afe6:	f042 0202 	orrlt.w	r2, r2, #2
 800afea:	9307      	strge	r3, [sp, #28]
 800afec:	9307      	strlt	r3, [sp, #28]
 800afee:	bfb8      	it	lt
 800aff0:	9204      	strlt	r2, [sp, #16]
 800aff2:	7823      	ldrb	r3, [r4, #0]
 800aff4:	2b2e      	cmp	r3, #46	; 0x2e
 800aff6:	d10c      	bne.n	800b012 <_vfiprintf_r+0x176>
 800aff8:	7863      	ldrb	r3, [r4, #1]
 800affa:	2b2a      	cmp	r3, #42	; 0x2a
 800affc:	d135      	bne.n	800b06a <_vfiprintf_r+0x1ce>
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	1d1a      	adds	r2, r3, #4
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	9203      	str	r2, [sp, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	bfb8      	it	lt
 800b00a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b00e:	3402      	adds	r4, #2
 800b010:	9305      	str	r3, [sp, #20]
 800b012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0f8 <_vfiprintf_r+0x25c>
 800b016:	7821      	ldrb	r1, [r4, #0]
 800b018:	2203      	movs	r2, #3
 800b01a:	4650      	mov	r0, sl
 800b01c:	f7f5 f8e0 	bl	80001e0 <memchr>
 800b020:	b140      	cbz	r0, 800b034 <_vfiprintf_r+0x198>
 800b022:	2340      	movs	r3, #64	; 0x40
 800b024:	eba0 000a 	sub.w	r0, r0, sl
 800b028:	fa03 f000 	lsl.w	r0, r3, r0
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	4303      	orrs	r3, r0
 800b030:	3401      	adds	r4, #1
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b038:	482c      	ldr	r0, [pc, #176]	; (800b0ec <_vfiprintf_r+0x250>)
 800b03a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b03e:	2206      	movs	r2, #6
 800b040:	f7f5 f8ce 	bl	80001e0 <memchr>
 800b044:	2800      	cmp	r0, #0
 800b046:	d03f      	beq.n	800b0c8 <_vfiprintf_r+0x22c>
 800b048:	4b29      	ldr	r3, [pc, #164]	; (800b0f0 <_vfiprintf_r+0x254>)
 800b04a:	bb1b      	cbnz	r3, 800b094 <_vfiprintf_r+0x1f8>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	3307      	adds	r3, #7
 800b050:	f023 0307 	bic.w	r3, r3, #7
 800b054:	3308      	adds	r3, #8
 800b056:	9303      	str	r3, [sp, #12]
 800b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05a:	443b      	add	r3, r7
 800b05c:	9309      	str	r3, [sp, #36]	; 0x24
 800b05e:	e767      	b.n	800af30 <_vfiprintf_r+0x94>
 800b060:	fb0c 3202 	mla	r2, ip, r2, r3
 800b064:	460c      	mov	r4, r1
 800b066:	2001      	movs	r0, #1
 800b068:	e7a5      	b.n	800afb6 <_vfiprintf_r+0x11a>
 800b06a:	2300      	movs	r3, #0
 800b06c:	3401      	adds	r4, #1
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	4619      	mov	r1, r3
 800b072:	f04f 0c0a 	mov.w	ip, #10
 800b076:	4620      	mov	r0, r4
 800b078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b07c:	3a30      	subs	r2, #48	; 0x30
 800b07e:	2a09      	cmp	r2, #9
 800b080:	d903      	bls.n	800b08a <_vfiprintf_r+0x1ee>
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0c5      	beq.n	800b012 <_vfiprintf_r+0x176>
 800b086:	9105      	str	r1, [sp, #20]
 800b088:	e7c3      	b.n	800b012 <_vfiprintf_r+0x176>
 800b08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b08e:	4604      	mov	r4, r0
 800b090:	2301      	movs	r3, #1
 800b092:	e7f0      	b.n	800b076 <_vfiprintf_r+0x1da>
 800b094:	ab03      	add	r3, sp, #12
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	462a      	mov	r2, r5
 800b09a:	4b16      	ldr	r3, [pc, #88]	; (800b0f4 <_vfiprintf_r+0x258>)
 800b09c:	a904      	add	r1, sp, #16
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7fd fe22 	bl	8008ce8 <_printf_float>
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	1c78      	adds	r0, r7, #1
 800b0a8:	d1d6      	bne.n	800b058 <_vfiprintf_r+0x1bc>
 800b0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ac:	07d9      	lsls	r1, r3, #31
 800b0ae:	d405      	bmi.n	800b0bc <_vfiprintf_r+0x220>
 800b0b0:	89ab      	ldrh	r3, [r5, #12]
 800b0b2:	059a      	lsls	r2, r3, #22
 800b0b4:	d402      	bmi.n	800b0bc <_vfiprintf_r+0x220>
 800b0b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0b8:	f000 faaf 	bl	800b61a <__retarget_lock_release_recursive>
 800b0bc:	89ab      	ldrh	r3, [r5, #12]
 800b0be:	065b      	lsls	r3, r3, #25
 800b0c0:	f53f af12 	bmi.w	800aee8 <_vfiprintf_r+0x4c>
 800b0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0c6:	e711      	b.n	800aeec <_vfiprintf_r+0x50>
 800b0c8:	ab03      	add	r3, sp, #12
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	462a      	mov	r2, r5
 800b0ce:	4b09      	ldr	r3, [pc, #36]	; (800b0f4 <_vfiprintf_r+0x258>)
 800b0d0:	a904      	add	r1, sp, #16
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f7fe f8ac 	bl	8009230 <_printf_i>
 800b0d8:	e7e4      	b.n	800b0a4 <_vfiprintf_r+0x208>
 800b0da:	bf00      	nop
 800b0dc:	0800f0c4 	.word	0x0800f0c4
 800b0e0:	0800f0e4 	.word	0x0800f0e4
 800b0e4:	0800f0a4 	.word	0x0800f0a4
 800b0e8:	0800ef4c 	.word	0x0800ef4c
 800b0ec:	0800ef56 	.word	0x0800ef56
 800b0f0:	08008ce9 	.word	0x08008ce9
 800b0f4:	0800ae77 	.word	0x0800ae77
 800b0f8:	0800ef52 	.word	0x0800ef52

0800b0fc <__swbuf_r>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	460e      	mov	r6, r1
 800b100:	4614      	mov	r4, r2
 800b102:	4605      	mov	r5, r0
 800b104:	b118      	cbz	r0, 800b10e <__swbuf_r+0x12>
 800b106:	6983      	ldr	r3, [r0, #24]
 800b108:	b90b      	cbnz	r3, 800b10e <__swbuf_r+0x12>
 800b10a:	f000 f9e7 	bl	800b4dc <__sinit>
 800b10e:	4b21      	ldr	r3, [pc, #132]	; (800b194 <__swbuf_r+0x98>)
 800b110:	429c      	cmp	r4, r3
 800b112:	d12b      	bne.n	800b16c <__swbuf_r+0x70>
 800b114:	686c      	ldr	r4, [r5, #4]
 800b116:	69a3      	ldr	r3, [r4, #24]
 800b118:	60a3      	str	r3, [r4, #8]
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	071a      	lsls	r2, r3, #28
 800b11e:	d52f      	bpl.n	800b180 <__swbuf_r+0x84>
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	b36b      	cbz	r3, 800b180 <__swbuf_r+0x84>
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	6820      	ldr	r0, [r4, #0]
 800b128:	1ac0      	subs	r0, r0, r3
 800b12a:	6963      	ldr	r3, [r4, #20]
 800b12c:	b2f6      	uxtb	r6, r6
 800b12e:	4283      	cmp	r3, r0
 800b130:	4637      	mov	r7, r6
 800b132:	dc04      	bgt.n	800b13e <__swbuf_r+0x42>
 800b134:	4621      	mov	r1, r4
 800b136:	4628      	mov	r0, r5
 800b138:	f000 f93c 	bl	800b3b4 <_fflush_r>
 800b13c:	bb30      	cbnz	r0, 800b18c <__swbuf_r+0x90>
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	3b01      	subs	r3, #1
 800b142:	60a3      	str	r3, [r4, #8]
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	6022      	str	r2, [r4, #0]
 800b14a:	701e      	strb	r6, [r3, #0]
 800b14c:	6963      	ldr	r3, [r4, #20]
 800b14e:	3001      	adds	r0, #1
 800b150:	4283      	cmp	r3, r0
 800b152:	d004      	beq.n	800b15e <__swbuf_r+0x62>
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	07db      	lsls	r3, r3, #31
 800b158:	d506      	bpl.n	800b168 <__swbuf_r+0x6c>
 800b15a:	2e0a      	cmp	r6, #10
 800b15c:	d104      	bne.n	800b168 <__swbuf_r+0x6c>
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f000 f927 	bl	800b3b4 <_fflush_r>
 800b166:	b988      	cbnz	r0, 800b18c <__swbuf_r+0x90>
 800b168:	4638      	mov	r0, r7
 800b16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b16c:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <__swbuf_r+0x9c>)
 800b16e:	429c      	cmp	r4, r3
 800b170:	d101      	bne.n	800b176 <__swbuf_r+0x7a>
 800b172:	68ac      	ldr	r4, [r5, #8]
 800b174:	e7cf      	b.n	800b116 <__swbuf_r+0x1a>
 800b176:	4b09      	ldr	r3, [pc, #36]	; (800b19c <__swbuf_r+0xa0>)
 800b178:	429c      	cmp	r4, r3
 800b17a:	bf08      	it	eq
 800b17c:	68ec      	ldreq	r4, [r5, #12]
 800b17e:	e7ca      	b.n	800b116 <__swbuf_r+0x1a>
 800b180:	4621      	mov	r1, r4
 800b182:	4628      	mov	r0, r5
 800b184:	f000 f81a 	bl	800b1bc <__swsetup_r>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d0cb      	beq.n	800b124 <__swbuf_r+0x28>
 800b18c:	f04f 37ff 	mov.w	r7, #4294967295
 800b190:	e7ea      	b.n	800b168 <__swbuf_r+0x6c>
 800b192:	bf00      	nop
 800b194:	0800f0c4 	.word	0x0800f0c4
 800b198:	0800f0e4 	.word	0x0800f0e4
 800b19c:	0800f0a4 	.word	0x0800f0a4

0800b1a0 <__ascii_wctomb>:
 800b1a0:	b149      	cbz	r1, 800b1b6 <__ascii_wctomb+0x16>
 800b1a2:	2aff      	cmp	r2, #255	; 0xff
 800b1a4:	bf85      	ittet	hi
 800b1a6:	238a      	movhi	r3, #138	; 0x8a
 800b1a8:	6003      	strhi	r3, [r0, #0]
 800b1aa:	700a      	strbls	r2, [r1, #0]
 800b1ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1b0:	bf98      	it	ls
 800b1b2:	2001      	movls	r0, #1
 800b1b4:	4770      	bx	lr
 800b1b6:	4608      	mov	r0, r1
 800b1b8:	4770      	bx	lr
	...

0800b1bc <__swsetup_r>:
 800b1bc:	4b32      	ldr	r3, [pc, #200]	; (800b288 <__swsetup_r+0xcc>)
 800b1be:	b570      	push	{r4, r5, r6, lr}
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	b125      	cbz	r5, 800b1d2 <__swsetup_r+0x16>
 800b1c8:	69ab      	ldr	r3, [r5, #24]
 800b1ca:	b913      	cbnz	r3, 800b1d2 <__swsetup_r+0x16>
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	f000 f985 	bl	800b4dc <__sinit>
 800b1d2:	4b2e      	ldr	r3, [pc, #184]	; (800b28c <__swsetup_r+0xd0>)
 800b1d4:	429c      	cmp	r4, r3
 800b1d6:	d10f      	bne.n	800b1f8 <__swsetup_r+0x3c>
 800b1d8:	686c      	ldr	r4, [r5, #4]
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1e0:	0719      	lsls	r1, r3, #28
 800b1e2:	d42c      	bmi.n	800b23e <__swsetup_r+0x82>
 800b1e4:	06dd      	lsls	r5, r3, #27
 800b1e6:	d411      	bmi.n	800b20c <__swsetup_r+0x50>
 800b1e8:	2309      	movs	r3, #9
 800b1ea:	6033      	str	r3, [r6, #0]
 800b1ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f6:	e03e      	b.n	800b276 <__swsetup_r+0xba>
 800b1f8:	4b25      	ldr	r3, [pc, #148]	; (800b290 <__swsetup_r+0xd4>)
 800b1fa:	429c      	cmp	r4, r3
 800b1fc:	d101      	bne.n	800b202 <__swsetup_r+0x46>
 800b1fe:	68ac      	ldr	r4, [r5, #8]
 800b200:	e7eb      	b.n	800b1da <__swsetup_r+0x1e>
 800b202:	4b24      	ldr	r3, [pc, #144]	; (800b294 <__swsetup_r+0xd8>)
 800b204:	429c      	cmp	r4, r3
 800b206:	bf08      	it	eq
 800b208:	68ec      	ldreq	r4, [r5, #12]
 800b20a:	e7e6      	b.n	800b1da <__swsetup_r+0x1e>
 800b20c:	0758      	lsls	r0, r3, #29
 800b20e:	d512      	bpl.n	800b236 <__swsetup_r+0x7a>
 800b210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b212:	b141      	cbz	r1, 800b226 <__swsetup_r+0x6a>
 800b214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b218:	4299      	cmp	r1, r3
 800b21a:	d002      	beq.n	800b222 <__swsetup_r+0x66>
 800b21c:	4630      	mov	r0, r6
 800b21e:	f7ff fb6f 	bl	800a900 <_free_r>
 800b222:	2300      	movs	r3, #0
 800b224:	6363      	str	r3, [r4, #52]	; 0x34
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b22c:	81a3      	strh	r3, [r4, #12]
 800b22e:	2300      	movs	r3, #0
 800b230:	6063      	str	r3, [r4, #4]
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	f043 0308 	orr.w	r3, r3, #8
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	b94b      	cbnz	r3, 800b256 <__swsetup_r+0x9a>
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b24c:	d003      	beq.n	800b256 <__swsetup_r+0x9a>
 800b24e:	4621      	mov	r1, r4
 800b250:	4630      	mov	r0, r6
 800b252:	f000 fa07 	bl	800b664 <__smakebuf_r>
 800b256:	89a0      	ldrh	r0, [r4, #12]
 800b258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b25c:	f010 0301 	ands.w	r3, r0, #1
 800b260:	d00a      	beq.n	800b278 <__swsetup_r+0xbc>
 800b262:	2300      	movs	r3, #0
 800b264:	60a3      	str	r3, [r4, #8]
 800b266:	6963      	ldr	r3, [r4, #20]
 800b268:	425b      	negs	r3, r3
 800b26a:	61a3      	str	r3, [r4, #24]
 800b26c:	6923      	ldr	r3, [r4, #16]
 800b26e:	b943      	cbnz	r3, 800b282 <__swsetup_r+0xc6>
 800b270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b274:	d1ba      	bne.n	800b1ec <__swsetup_r+0x30>
 800b276:	bd70      	pop	{r4, r5, r6, pc}
 800b278:	0781      	lsls	r1, r0, #30
 800b27a:	bf58      	it	pl
 800b27c:	6963      	ldrpl	r3, [r4, #20]
 800b27e:	60a3      	str	r3, [r4, #8]
 800b280:	e7f4      	b.n	800b26c <__swsetup_r+0xb0>
 800b282:	2000      	movs	r0, #0
 800b284:	e7f7      	b.n	800b276 <__swsetup_r+0xba>
 800b286:	bf00      	nop
 800b288:	20000064 	.word	0x20000064
 800b28c:	0800f0c4 	.word	0x0800f0c4
 800b290:	0800f0e4 	.word	0x0800f0e4
 800b294:	0800f0a4 	.word	0x0800f0a4

0800b298 <abort>:
 800b298:	b508      	push	{r3, lr}
 800b29a:	2006      	movs	r0, #6
 800b29c:	f000 fa52 	bl	800b744 <raise>
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	f7f6 ff03 	bl	80020ac <_exit>
	...

0800b2a8 <__sflush_r>:
 800b2a8:	898a      	ldrh	r2, [r1, #12]
 800b2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	0710      	lsls	r0, r2, #28
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	d458      	bmi.n	800b368 <__sflush_r+0xc0>
 800b2b6:	684b      	ldr	r3, [r1, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dc05      	bgt.n	800b2c8 <__sflush_r+0x20>
 800b2bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	dc02      	bgt.n	800b2c8 <__sflush_r+0x20>
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2ca:	2e00      	cmp	r6, #0
 800b2cc:	d0f9      	beq.n	800b2c2 <__sflush_r+0x1a>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2d4:	682f      	ldr	r7, [r5, #0]
 800b2d6:	602b      	str	r3, [r5, #0]
 800b2d8:	d032      	beq.n	800b340 <__sflush_r+0x98>
 800b2da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	075a      	lsls	r2, r3, #29
 800b2e0:	d505      	bpl.n	800b2ee <__sflush_r+0x46>
 800b2e2:	6863      	ldr	r3, [r4, #4]
 800b2e4:	1ac0      	subs	r0, r0, r3
 800b2e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2e8:	b10b      	cbz	r3, 800b2ee <__sflush_r+0x46>
 800b2ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2ec:	1ac0      	subs	r0, r0, r3
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2f4:	6a21      	ldr	r1, [r4, #32]
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b0      	blx	r6
 800b2fa:	1c43      	adds	r3, r0, #1
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	d106      	bne.n	800b30e <__sflush_r+0x66>
 800b300:	6829      	ldr	r1, [r5, #0]
 800b302:	291d      	cmp	r1, #29
 800b304:	d82c      	bhi.n	800b360 <__sflush_r+0xb8>
 800b306:	4a2a      	ldr	r2, [pc, #168]	; (800b3b0 <__sflush_r+0x108>)
 800b308:	40ca      	lsrs	r2, r1
 800b30a:	07d6      	lsls	r6, r2, #31
 800b30c:	d528      	bpl.n	800b360 <__sflush_r+0xb8>
 800b30e:	2200      	movs	r2, #0
 800b310:	6062      	str	r2, [r4, #4]
 800b312:	04d9      	lsls	r1, r3, #19
 800b314:	6922      	ldr	r2, [r4, #16]
 800b316:	6022      	str	r2, [r4, #0]
 800b318:	d504      	bpl.n	800b324 <__sflush_r+0x7c>
 800b31a:	1c42      	adds	r2, r0, #1
 800b31c:	d101      	bne.n	800b322 <__sflush_r+0x7a>
 800b31e:	682b      	ldr	r3, [r5, #0]
 800b320:	b903      	cbnz	r3, 800b324 <__sflush_r+0x7c>
 800b322:	6560      	str	r0, [r4, #84]	; 0x54
 800b324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b326:	602f      	str	r7, [r5, #0]
 800b328:	2900      	cmp	r1, #0
 800b32a:	d0ca      	beq.n	800b2c2 <__sflush_r+0x1a>
 800b32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b330:	4299      	cmp	r1, r3
 800b332:	d002      	beq.n	800b33a <__sflush_r+0x92>
 800b334:	4628      	mov	r0, r5
 800b336:	f7ff fae3 	bl	800a900 <_free_r>
 800b33a:	2000      	movs	r0, #0
 800b33c:	6360      	str	r0, [r4, #52]	; 0x34
 800b33e:	e7c1      	b.n	800b2c4 <__sflush_r+0x1c>
 800b340:	6a21      	ldr	r1, [r4, #32]
 800b342:	2301      	movs	r3, #1
 800b344:	4628      	mov	r0, r5
 800b346:	47b0      	blx	r6
 800b348:	1c41      	adds	r1, r0, #1
 800b34a:	d1c7      	bne.n	800b2dc <__sflush_r+0x34>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d0c4      	beq.n	800b2dc <__sflush_r+0x34>
 800b352:	2b1d      	cmp	r3, #29
 800b354:	d001      	beq.n	800b35a <__sflush_r+0xb2>
 800b356:	2b16      	cmp	r3, #22
 800b358:	d101      	bne.n	800b35e <__sflush_r+0xb6>
 800b35a:	602f      	str	r7, [r5, #0]
 800b35c:	e7b1      	b.n	800b2c2 <__sflush_r+0x1a>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	e7ad      	b.n	800b2c4 <__sflush_r+0x1c>
 800b368:	690f      	ldr	r7, [r1, #16]
 800b36a:	2f00      	cmp	r7, #0
 800b36c:	d0a9      	beq.n	800b2c2 <__sflush_r+0x1a>
 800b36e:	0793      	lsls	r3, r2, #30
 800b370:	680e      	ldr	r6, [r1, #0]
 800b372:	bf08      	it	eq
 800b374:	694b      	ldreq	r3, [r1, #20]
 800b376:	600f      	str	r7, [r1, #0]
 800b378:	bf18      	it	ne
 800b37a:	2300      	movne	r3, #0
 800b37c:	eba6 0807 	sub.w	r8, r6, r7
 800b380:	608b      	str	r3, [r1, #8]
 800b382:	f1b8 0f00 	cmp.w	r8, #0
 800b386:	dd9c      	ble.n	800b2c2 <__sflush_r+0x1a>
 800b388:	6a21      	ldr	r1, [r4, #32]
 800b38a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b38c:	4643      	mov	r3, r8
 800b38e:	463a      	mov	r2, r7
 800b390:	4628      	mov	r0, r5
 800b392:	47b0      	blx	r6
 800b394:	2800      	cmp	r0, #0
 800b396:	dc06      	bgt.n	800b3a6 <__sflush_r+0xfe>
 800b398:	89a3      	ldrh	r3, [r4, #12]
 800b39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b39e:	81a3      	strh	r3, [r4, #12]
 800b3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a4:	e78e      	b.n	800b2c4 <__sflush_r+0x1c>
 800b3a6:	4407      	add	r7, r0
 800b3a8:	eba8 0800 	sub.w	r8, r8, r0
 800b3ac:	e7e9      	b.n	800b382 <__sflush_r+0xda>
 800b3ae:	bf00      	nop
 800b3b0:	20400001 	.word	0x20400001

0800b3b4 <_fflush_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	690b      	ldr	r3, [r1, #16]
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	b913      	cbnz	r3, 800b3c4 <_fflush_r+0x10>
 800b3be:	2500      	movs	r5, #0
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	b118      	cbz	r0, 800b3ce <_fflush_r+0x1a>
 800b3c6:	6983      	ldr	r3, [r0, #24]
 800b3c8:	b90b      	cbnz	r3, 800b3ce <_fflush_r+0x1a>
 800b3ca:	f000 f887 	bl	800b4dc <__sinit>
 800b3ce:	4b14      	ldr	r3, [pc, #80]	; (800b420 <_fflush_r+0x6c>)
 800b3d0:	429c      	cmp	r4, r3
 800b3d2:	d11b      	bne.n	800b40c <_fflush_r+0x58>
 800b3d4:	686c      	ldr	r4, [r5, #4]
 800b3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0ef      	beq.n	800b3be <_fflush_r+0xa>
 800b3de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3e0:	07d0      	lsls	r0, r2, #31
 800b3e2:	d404      	bmi.n	800b3ee <_fflush_r+0x3a>
 800b3e4:	0599      	lsls	r1, r3, #22
 800b3e6:	d402      	bmi.n	800b3ee <_fflush_r+0x3a>
 800b3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ea:	f000 f915 	bl	800b618 <__retarget_lock_acquire_recursive>
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	f7ff ff59 	bl	800b2a8 <__sflush_r>
 800b3f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3f8:	07da      	lsls	r2, r3, #31
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	d4e0      	bmi.n	800b3c0 <_fflush_r+0xc>
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	059b      	lsls	r3, r3, #22
 800b402:	d4dd      	bmi.n	800b3c0 <_fflush_r+0xc>
 800b404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b406:	f000 f908 	bl	800b61a <__retarget_lock_release_recursive>
 800b40a:	e7d9      	b.n	800b3c0 <_fflush_r+0xc>
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <_fflush_r+0x70>)
 800b40e:	429c      	cmp	r4, r3
 800b410:	d101      	bne.n	800b416 <_fflush_r+0x62>
 800b412:	68ac      	ldr	r4, [r5, #8]
 800b414:	e7df      	b.n	800b3d6 <_fflush_r+0x22>
 800b416:	4b04      	ldr	r3, [pc, #16]	; (800b428 <_fflush_r+0x74>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	bf08      	it	eq
 800b41c:	68ec      	ldreq	r4, [r5, #12]
 800b41e:	e7da      	b.n	800b3d6 <_fflush_r+0x22>
 800b420:	0800f0c4 	.word	0x0800f0c4
 800b424:	0800f0e4 	.word	0x0800f0e4
 800b428:	0800f0a4 	.word	0x0800f0a4

0800b42c <std>:
 800b42c:	2300      	movs	r3, #0
 800b42e:	b510      	push	{r4, lr}
 800b430:	4604      	mov	r4, r0
 800b432:	e9c0 3300 	strd	r3, r3, [r0]
 800b436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b43a:	6083      	str	r3, [r0, #8]
 800b43c:	8181      	strh	r1, [r0, #12]
 800b43e:	6643      	str	r3, [r0, #100]	; 0x64
 800b440:	81c2      	strh	r2, [r0, #14]
 800b442:	6183      	str	r3, [r0, #24]
 800b444:	4619      	mov	r1, r3
 800b446:	2208      	movs	r2, #8
 800b448:	305c      	adds	r0, #92	; 0x5c
 800b44a:	f7fd fba5 	bl	8008b98 <memset>
 800b44e:	4b05      	ldr	r3, [pc, #20]	; (800b464 <std+0x38>)
 800b450:	6263      	str	r3, [r4, #36]	; 0x24
 800b452:	4b05      	ldr	r3, [pc, #20]	; (800b468 <std+0x3c>)
 800b454:	62a3      	str	r3, [r4, #40]	; 0x28
 800b456:	4b05      	ldr	r3, [pc, #20]	; (800b46c <std+0x40>)
 800b458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b45a:	4b05      	ldr	r3, [pc, #20]	; (800b470 <std+0x44>)
 800b45c:	6224      	str	r4, [r4, #32]
 800b45e:	6323      	str	r3, [r4, #48]	; 0x30
 800b460:	bd10      	pop	{r4, pc}
 800b462:	bf00      	nop
 800b464:	0800b77d 	.word	0x0800b77d
 800b468:	0800b79f 	.word	0x0800b79f
 800b46c:	0800b7d7 	.word	0x0800b7d7
 800b470:	0800b7fb 	.word	0x0800b7fb

0800b474 <_cleanup_r>:
 800b474:	4901      	ldr	r1, [pc, #4]	; (800b47c <_cleanup_r+0x8>)
 800b476:	f000 b8af 	b.w	800b5d8 <_fwalk_reent>
 800b47a:	bf00      	nop
 800b47c:	0800b3b5 	.word	0x0800b3b5

0800b480 <__sfmoreglue>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	1e4a      	subs	r2, r1, #1
 800b484:	2568      	movs	r5, #104	; 0x68
 800b486:	4355      	muls	r5, r2
 800b488:	460e      	mov	r6, r1
 800b48a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b48e:	f7ff fa87 	bl	800a9a0 <_malloc_r>
 800b492:	4604      	mov	r4, r0
 800b494:	b140      	cbz	r0, 800b4a8 <__sfmoreglue+0x28>
 800b496:	2100      	movs	r1, #0
 800b498:	e9c0 1600 	strd	r1, r6, [r0]
 800b49c:	300c      	adds	r0, #12
 800b49e:	60a0      	str	r0, [r4, #8]
 800b4a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4a4:	f7fd fb78 	bl	8008b98 <memset>
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}

0800b4ac <__sfp_lock_acquire>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <__sfp_lock_acquire+0x8>)
 800b4ae:	f000 b8b3 	b.w	800b618 <__retarget_lock_acquire_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	20000b7c 	.word	0x20000b7c

0800b4b8 <__sfp_lock_release>:
 800b4b8:	4801      	ldr	r0, [pc, #4]	; (800b4c0 <__sfp_lock_release+0x8>)
 800b4ba:	f000 b8ae 	b.w	800b61a <__retarget_lock_release_recursive>
 800b4be:	bf00      	nop
 800b4c0:	20000b7c 	.word	0x20000b7c

0800b4c4 <__sinit_lock_acquire>:
 800b4c4:	4801      	ldr	r0, [pc, #4]	; (800b4cc <__sinit_lock_acquire+0x8>)
 800b4c6:	f000 b8a7 	b.w	800b618 <__retarget_lock_acquire_recursive>
 800b4ca:	bf00      	nop
 800b4cc:	20000b77 	.word	0x20000b77

0800b4d0 <__sinit_lock_release>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <__sinit_lock_release+0x8>)
 800b4d2:	f000 b8a2 	b.w	800b61a <__retarget_lock_release_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	20000b77 	.word	0x20000b77

0800b4dc <__sinit>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	4604      	mov	r4, r0
 800b4e0:	f7ff fff0 	bl	800b4c4 <__sinit_lock_acquire>
 800b4e4:	69a3      	ldr	r3, [r4, #24]
 800b4e6:	b11b      	cbz	r3, 800b4f0 <__sinit+0x14>
 800b4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ec:	f7ff bff0 	b.w	800b4d0 <__sinit_lock_release>
 800b4f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4f4:	6523      	str	r3, [r4, #80]	; 0x50
 800b4f6:	4b13      	ldr	r3, [pc, #76]	; (800b544 <__sinit+0x68>)
 800b4f8:	4a13      	ldr	r2, [pc, #76]	; (800b548 <__sinit+0x6c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4fe:	42a3      	cmp	r3, r4
 800b500:	bf04      	itt	eq
 800b502:	2301      	moveq	r3, #1
 800b504:	61a3      	streq	r3, [r4, #24]
 800b506:	4620      	mov	r0, r4
 800b508:	f000 f820 	bl	800b54c <__sfp>
 800b50c:	6060      	str	r0, [r4, #4]
 800b50e:	4620      	mov	r0, r4
 800b510:	f000 f81c 	bl	800b54c <__sfp>
 800b514:	60a0      	str	r0, [r4, #8]
 800b516:	4620      	mov	r0, r4
 800b518:	f000 f818 	bl	800b54c <__sfp>
 800b51c:	2200      	movs	r2, #0
 800b51e:	60e0      	str	r0, [r4, #12]
 800b520:	2104      	movs	r1, #4
 800b522:	6860      	ldr	r0, [r4, #4]
 800b524:	f7ff ff82 	bl	800b42c <std>
 800b528:	68a0      	ldr	r0, [r4, #8]
 800b52a:	2201      	movs	r2, #1
 800b52c:	2109      	movs	r1, #9
 800b52e:	f7ff ff7d 	bl	800b42c <std>
 800b532:	68e0      	ldr	r0, [r4, #12]
 800b534:	2202      	movs	r2, #2
 800b536:	2112      	movs	r1, #18
 800b538:	f7ff ff78 	bl	800b42c <std>
 800b53c:	2301      	movs	r3, #1
 800b53e:	61a3      	str	r3, [r4, #24]
 800b540:	e7d2      	b.n	800b4e8 <__sinit+0xc>
 800b542:	bf00      	nop
 800b544:	0800ed24 	.word	0x0800ed24
 800b548:	0800b475 	.word	0x0800b475

0800b54c <__sfp>:
 800b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54e:	4607      	mov	r7, r0
 800b550:	f7ff ffac 	bl	800b4ac <__sfp_lock_acquire>
 800b554:	4b1e      	ldr	r3, [pc, #120]	; (800b5d0 <__sfp+0x84>)
 800b556:	681e      	ldr	r6, [r3, #0]
 800b558:	69b3      	ldr	r3, [r6, #24]
 800b55a:	b913      	cbnz	r3, 800b562 <__sfp+0x16>
 800b55c:	4630      	mov	r0, r6
 800b55e:	f7ff ffbd 	bl	800b4dc <__sinit>
 800b562:	3648      	adds	r6, #72	; 0x48
 800b564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b568:	3b01      	subs	r3, #1
 800b56a:	d503      	bpl.n	800b574 <__sfp+0x28>
 800b56c:	6833      	ldr	r3, [r6, #0]
 800b56e:	b30b      	cbz	r3, 800b5b4 <__sfp+0x68>
 800b570:	6836      	ldr	r6, [r6, #0]
 800b572:	e7f7      	b.n	800b564 <__sfp+0x18>
 800b574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b578:	b9d5      	cbnz	r5, 800b5b0 <__sfp+0x64>
 800b57a:	4b16      	ldr	r3, [pc, #88]	; (800b5d4 <__sfp+0x88>)
 800b57c:	60e3      	str	r3, [r4, #12]
 800b57e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b582:	6665      	str	r5, [r4, #100]	; 0x64
 800b584:	f000 f847 	bl	800b616 <__retarget_lock_init_recursive>
 800b588:	f7ff ff96 	bl	800b4b8 <__sfp_lock_release>
 800b58c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b594:	6025      	str	r5, [r4, #0]
 800b596:	61a5      	str	r5, [r4, #24]
 800b598:	2208      	movs	r2, #8
 800b59a:	4629      	mov	r1, r5
 800b59c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5a0:	f7fd fafa 	bl	8008b98 <memset>
 800b5a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b0:	3468      	adds	r4, #104	; 0x68
 800b5b2:	e7d9      	b.n	800b568 <__sfp+0x1c>
 800b5b4:	2104      	movs	r1, #4
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	f7ff ff62 	bl	800b480 <__sfmoreglue>
 800b5bc:	4604      	mov	r4, r0
 800b5be:	6030      	str	r0, [r6, #0]
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d1d5      	bne.n	800b570 <__sfp+0x24>
 800b5c4:	f7ff ff78 	bl	800b4b8 <__sfp_lock_release>
 800b5c8:	230c      	movs	r3, #12
 800b5ca:	603b      	str	r3, [r7, #0]
 800b5cc:	e7ee      	b.n	800b5ac <__sfp+0x60>
 800b5ce:	bf00      	nop
 800b5d0:	0800ed24 	.word	0x0800ed24
 800b5d4:	ffff0001 	.word	0xffff0001

0800b5d8 <_fwalk_reent>:
 800b5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	4606      	mov	r6, r0
 800b5de:	4688      	mov	r8, r1
 800b5e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5e4:	2700      	movs	r7, #0
 800b5e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5ea:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ee:	d505      	bpl.n	800b5fc <_fwalk_reent+0x24>
 800b5f0:	6824      	ldr	r4, [r4, #0]
 800b5f2:	2c00      	cmp	r4, #0
 800b5f4:	d1f7      	bne.n	800b5e6 <_fwalk_reent+0xe>
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5fc:	89ab      	ldrh	r3, [r5, #12]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d907      	bls.n	800b612 <_fwalk_reent+0x3a>
 800b602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b606:	3301      	adds	r3, #1
 800b608:	d003      	beq.n	800b612 <_fwalk_reent+0x3a>
 800b60a:	4629      	mov	r1, r5
 800b60c:	4630      	mov	r0, r6
 800b60e:	47c0      	blx	r8
 800b610:	4307      	orrs	r7, r0
 800b612:	3568      	adds	r5, #104	; 0x68
 800b614:	e7e9      	b.n	800b5ea <_fwalk_reent+0x12>

0800b616 <__retarget_lock_init_recursive>:
 800b616:	4770      	bx	lr

0800b618 <__retarget_lock_acquire_recursive>:
 800b618:	4770      	bx	lr

0800b61a <__retarget_lock_release_recursive>:
 800b61a:	4770      	bx	lr

0800b61c <__swhatbuf_r>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	460e      	mov	r6, r1
 800b620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b624:	2900      	cmp	r1, #0
 800b626:	b096      	sub	sp, #88	; 0x58
 800b628:	4614      	mov	r4, r2
 800b62a:	461d      	mov	r5, r3
 800b62c:	da07      	bge.n	800b63e <__swhatbuf_r+0x22>
 800b62e:	2300      	movs	r3, #0
 800b630:	602b      	str	r3, [r5, #0]
 800b632:	89b3      	ldrh	r3, [r6, #12]
 800b634:	061a      	lsls	r2, r3, #24
 800b636:	d410      	bmi.n	800b65a <__swhatbuf_r+0x3e>
 800b638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b63c:	e00e      	b.n	800b65c <__swhatbuf_r+0x40>
 800b63e:	466a      	mov	r2, sp
 800b640:	f000 f902 	bl	800b848 <_fstat_r>
 800b644:	2800      	cmp	r0, #0
 800b646:	dbf2      	blt.n	800b62e <__swhatbuf_r+0x12>
 800b648:	9a01      	ldr	r2, [sp, #4]
 800b64a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b64e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b652:	425a      	negs	r2, r3
 800b654:	415a      	adcs	r2, r3
 800b656:	602a      	str	r2, [r5, #0]
 800b658:	e7ee      	b.n	800b638 <__swhatbuf_r+0x1c>
 800b65a:	2340      	movs	r3, #64	; 0x40
 800b65c:	2000      	movs	r0, #0
 800b65e:	6023      	str	r3, [r4, #0]
 800b660:	b016      	add	sp, #88	; 0x58
 800b662:	bd70      	pop	{r4, r5, r6, pc}

0800b664 <__smakebuf_r>:
 800b664:	898b      	ldrh	r3, [r1, #12]
 800b666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b668:	079d      	lsls	r5, r3, #30
 800b66a:	4606      	mov	r6, r0
 800b66c:	460c      	mov	r4, r1
 800b66e:	d507      	bpl.n	800b680 <__smakebuf_r+0x1c>
 800b670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	6123      	str	r3, [r4, #16]
 800b678:	2301      	movs	r3, #1
 800b67a:	6163      	str	r3, [r4, #20]
 800b67c:	b002      	add	sp, #8
 800b67e:	bd70      	pop	{r4, r5, r6, pc}
 800b680:	ab01      	add	r3, sp, #4
 800b682:	466a      	mov	r2, sp
 800b684:	f7ff ffca 	bl	800b61c <__swhatbuf_r>
 800b688:	9900      	ldr	r1, [sp, #0]
 800b68a:	4605      	mov	r5, r0
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7ff f987 	bl	800a9a0 <_malloc_r>
 800b692:	b948      	cbnz	r0, 800b6a8 <__smakebuf_r+0x44>
 800b694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b698:	059a      	lsls	r2, r3, #22
 800b69a:	d4ef      	bmi.n	800b67c <__smakebuf_r+0x18>
 800b69c:	f023 0303 	bic.w	r3, r3, #3
 800b6a0:	f043 0302 	orr.w	r3, r3, #2
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	e7e3      	b.n	800b670 <__smakebuf_r+0xc>
 800b6a8:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <__smakebuf_r+0x7c>)
 800b6aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	6020      	str	r0, [r4, #0]
 800b6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	9b00      	ldr	r3, [sp, #0]
 800b6b8:	6163      	str	r3, [r4, #20]
 800b6ba:	9b01      	ldr	r3, [sp, #4]
 800b6bc:	6120      	str	r0, [r4, #16]
 800b6be:	b15b      	cbz	r3, 800b6d8 <__smakebuf_r+0x74>
 800b6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f000 f8d1 	bl	800b86c <_isatty_r>
 800b6ca:	b128      	cbz	r0, 800b6d8 <__smakebuf_r+0x74>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	f023 0303 	bic.w	r3, r3, #3
 800b6d2:	f043 0301 	orr.w	r3, r3, #1
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	89a0      	ldrh	r0, [r4, #12]
 800b6da:	4305      	orrs	r5, r0
 800b6dc:	81a5      	strh	r5, [r4, #12]
 800b6de:	e7cd      	b.n	800b67c <__smakebuf_r+0x18>
 800b6e0:	0800b475 	.word	0x0800b475

0800b6e4 <_malloc_usable_size_r>:
 800b6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6e8:	1f18      	subs	r0, r3, #4
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	bfbc      	itt	lt
 800b6ee:	580b      	ldrlt	r3, [r1, r0]
 800b6f0:	18c0      	addlt	r0, r0, r3
 800b6f2:	4770      	bx	lr

0800b6f4 <_raise_r>:
 800b6f4:	291f      	cmp	r1, #31
 800b6f6:	b538      	push	{r3, r4, r5, lr}
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	d904      	bls.n	800b708 <_raise_r+0x14>
 800b6fe:	2316      	movs	r3, #22
 800b700:	6003      	str	r3, [r0, #0]
 800b702:	f04f 30ff 	mov.w	r0, #4294967295
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b70a:	b112      	cbz	r2, 800b712 <_raise_r+0x1e>
 800b70c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b710:	b94b      	cbnz	r3, 800b726 <_raise_r+0x32>
 800b712:	4620      	mov	r0, r4
 800b714:	f000 f830 	bl	800b778 <_getpid_r>
 800b718:	462a      	mov	r2, r5
 800b71a:	4601      	mov	r1, r0
 800b71c:	4620      	mov	r0, r4
 800b71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b722:	f000 b817 	b.w	800b754 <_kill_r>
 800b726:	2b01      	cmp	r3, #1
 800b728:	d00a      	beq.n	800b740 <_raise_r+0x4c>
 800b72a:	1c59      	adds	r1, r3, #1
 800b72c:	d103      	bne.n	800b736 <_raise_r+0x42>
 800b72e:	2316      	movs	r3, #22
 800b730:	6003      	str	r3, [r0, #0]
 800b732:	2001      	movs	r0, #1
 800b734:	e7e7      	b.n	800b706 <_raise_r+0x12>
 800b736:	2400      	movs	r4, #0
 800b738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b73c:	4628      	mov	r0, r5
 800b73e:	4798      	blx	r3
 800b740:	2000      	movs	r0, #0
 800b742:	e7e0      	b.n	800b706 <_raise_r+0x12>

0800b744 <raise>:
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <raise+0xc>)
 800b746:	4601      	mov	r1, r0
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f7ff bfd3 	b.w	800b6f4 <_raise_r>
 800b74e:	bf00      	nop
 800b750:	20000064 	.word	0x20000064

0800b754 <_kill_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d07      	ldr	r5, [pc, #28]	; (800b774 <_kill_r+0x20>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	4611      	mov	r1, r2
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f7f6 fc93 	bl	800208c <_kill>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	d102      	bne.n	800b770 <_kill_r+0x1c>
 800b76a:	682b      	ldr	r3, [r5, #0]
 800b76c:	b103      	cbz	r3, 800b770 <_kill_r+0x1c>
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	bd38      	pop	{r3, r4, r5, pc}
 800b772:	bf00      	nop
 800b774:	20000b70 	.word	0x20000b70

0800b778 <_getpid_r>:
 800b778:	f7f6 bc80 	b.w	800207c <_getpid>

0800b77c <__sread>:
 800b77c:	b510      	push	{r4, lr}
 800b77e:	460c      	mov	r4, r1
 800b780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b784:	f000 f894 	bl	800b8b0 <_read_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	bfab      	itete	ge
 800b78c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b78e:	89a3      	ldrhlt	r3, [r4, #12]
 800b790:	181b      	addge	r3, r3, r0
 800b792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b796:	bfac      	ite	ge
 800b798:	6563      	strge	r3, [r4, #84]	; 0x54
 800b79a:	81a3      	strhlt	r3, [r4, #12]
 800b79c:	bd10      	pop	{r4, pc}

0800b79e <__swrite>:
 800b79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a2:	461f      	mov	r7, r3
 800b7a4:	898b      	ldrh	r3, [r1, #12]
 800b7a6:	05db      	lsls	r3, r3, #23
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	d505      	bpl.n	800b7bc <__swrite+0x1e>
 800b7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f000 f868 	bl	800b88c <_lseek_r>
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	463b      	mov	r3, r7
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d2:	f000 b817 	b.w	800b804 <_write_r>

0800b7d6 <__sseek>:
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7de:	f000 f855 	bl	800b88c <_lseek_r>
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	bf15      	itete	ne
 800b7e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7f2:	81a3      	strheq	r3, [r4, #12]
 800b7f4:	bf18      	it	ne
 800b7f6:	81a3      	strhne	r3, [r4, #12]
 800b7f8:	bd10      	pop	{r4, pc}

0800b7fa <__sclose>:
 800b7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fe:	f000 b813 	b.w	800b828 <_close_r>
	...

0800b804 <_write_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d07      	ldr	r5, [pc, #28]	; (800b824 <_write_r+0x20>)
 800b808:	4604      	mov	r4, r0
 800b80a:	4608      	mov	r0, r1
 800b80c:	4611      	mov	r1, r2
 800b80e:	2200      	movs	r2, #0
 800b810:	602a      	str	r2, [r5, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	f7f6 fc71 	bl	80020fa <_write>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_write_r+0x1e>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_write_r+0x1e>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	20000b70 	.word	0x20000b70

0800b828 <_close_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d06      	ldr	r5, [pc, #24]	; (800b844 <_close_r+0x1c>)
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7f6 fc7d 	bl	8002132 <_close>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_close_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_close_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	20000b70 	.word	0x20000b70

0800b848 <_fstat_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	4d07      	ldr	r5, [pc, #28]	; (800b868 <_fstat_r+0x20>)
 800b84c:	2300      	movs	r3, #0
 800b84e:	4604      	mov	r4, r0
 800b850:	4608      	mov	r0, r1
 800b852:	4611      	mov	r1, r2
 800b854:	602b      	str	r3, [r5, #0]
 800b856:	f7f6 fc78 	bl	800214a <_fstat>
 800b85a:	1c43      	adds	r3, r0, #1
 800b85c:	d102      	bne.n	800b864 <_fstat_r+0x1c>
 800b85e:	682b      	ldr	r3, [r5, #0]
 800b860:	b103      	cbz	r3, 800b864 <_fstat_r+0x1c>
 800b862:	6023      	str	r3, [r4, #0]
 800b864:	bd38      	pop	{r3, r4, r5, pc}
 800b866:	bf00      	nop
 800b868:	20000b70 	.word	0x20000b70

0800b86c <_isatty_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d06      	ldr	r5, [pc, #24]	; (800b888 <_isatty_r+0x1c>)
 800b870:	2300      	movs	r3, #0
 800b872:	4604      	mov	r4, r0
 800b874:	4608      	mov	r0, r1
 800b876:	602b      	str	r3, [r5, #0]
 800b878:	f7f6 fc77 	bl	800216a <_isatty>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_isatty_r+0x1a>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_isatty_r+0x1a>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	20000b70 	.word	0x20000b70

0800b88c <_lseek_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	; (800b8ac <_lseek_r+0x20>)
 800b890:	4604      	mov	r4, r0
 800b892:	4608      	mov	r0, r1
 800b894:	4611      	mov	r1, r2
 800b896:	2200      	movs	r2, #0
 800b898:	602a      	str	r2, [r5, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f7f6 fc70 	bl	8002180 <_lseek>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_lseek_r+0x1e>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_lseek_r+0x1e>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	20000b70 	.word	0x20000b70

0800b8b0 <_read_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d07      	ldr	r5, [pc, #28]	; (800b8d0 <_read_r+0x20>)
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	602a      	str	r2, [r5, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f7f6 fbfe 	bl	80020c0 <_read>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_read_r+0x1e>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_read_r+0x1e>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	20000b70 	.word	0x20000b70
 800b8d4:	00000000 	.word	0x00000000

0800b8d8 <cos>:
 800b8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8da:	ec53 2b10 	vmov	r2, r3, d0
 800b8de:	4824      	ldr	r0, [pc, #144]	; (800b970 <cos+0x98>)
 800b8e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8e4:	4281      	cmp	r1, r0
 800b8e6:	dc06      	bgt.n	800b8f6 <cos+0x1e>
 800b8e8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b968 <cos+0x90>
 800b8ec:	f000 faa4 	bl	800be38 <__kernel_cos>
 800b8f0:	ec51 0b10 	vmov	r0, r1, d0
 800b8f4:	e007      	b.n	800b906 <cos+0x2e>
 800b8f6:	481f      	ldr	r0, [pc, #124]	; (800b974 <cos+0x9c>)
 800b8f8:	4281      	cmp	r1, r0
 800b8fa:	dd09      	ble.n	800b910 <cos+0x38>
 800b8fc:	ee10 0a10 	vmov	r0, s0
 800b900:	4619      	mov	r1, r3
 800b902:	f7f4 fcc1 	bl	8000288 <__aeabi_dsub>
 800b906:	ec41 0b10 	vmov	d0, r0, r1
 800b90a:	b005      	add	sp, #20
 800b90c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b910:	4668      	mov	r0, sp
 800b912:	f000 f885 	bl	800ba20 <__ieee754_rem_pio2>
 800b916:	f000 0003 	and.w	r0, r0, #3
 800b91a:	2801      	cmp	r0, #1
 800b91c:	d007      	beq.n	800b92e <cos+0x56>
 800b91e:	2802      	cmp	r0, #2
 800b920:	d012      	beq.n	800b948 <cos+0x70>
 800b922:	b9c0      	cbnz	r0, 800b956 <cos+0x7e>
 800b924:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b928:	ed9d 0b00 	vldr	d0, [sp]
 800b92c:	e7de      	b.n	800b8ec <cos+0x14>
 800b92e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b932:	ed9d 0b00 	vldr	d0, [sp]
 800b936:	f000 fe87 	bl	800c648 <__kernel_sin>
 800b93a:	ec53 2b10 	vmov	r2, r3, d0
 800b93e:	ee10 0a10 	vmov	r0, s0
 800b942:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b946:	e7de      	b.n	800b906 <cos+0x2e>
 800b948:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b94c:	ed9d 0b00 	vldr	d0, [sp]
 800b950:	f000 fa72 	bl	800be38 <__kernel_cos>
 800b954:	e7f1      	b.n	800b93a <cos+0x62>
 800b956:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b95a:	ed9d 0b00 	vldr	d0, [sp]
 800b95e:	2001      	movs	r0, #1
 800b960:	f000 fe72 	bl	800c648 <__kernel_sin>
 800b964:	e7c4      	b.n	800b8f0 <cos+0x18>
 800b966:	bf00      	nop
	...
 800b970:	3fe921fb 	.word	0x3fe921fb
 800b974:	7fefffff 	.word	0x7fefffff

0800b978 <sin>:
 800b978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b97a:	ec53 2b10 	vmov	r2, r3, d0
 800b97e:	4826      	ldr	r0, [pc, #152]	; (800ba18 <sin+0xa0>)
 800b980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b984:	4281      	cmp	r1, r0
 800b986:	dc07      	bgt.n	800b998 <sin+0x20>
 800b988:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ba10 <sin+0x98>
 800b98c:	2000      	movs	r0, #0
 800b98e:	f000 fe5b 	bl	800c648 <__kernel_sin>
 800b992:	ec51 0b10 	vmov	r0, r1, d0
 800b996:	e007      	b.n	800b9a8 <sin+0x30>
 800b998:	4820      	ldr	r0, [pc, #128]	; (800ba1c <sin+0xa4>)
 800b99a:	4281      	cmp	r1, r0
 800b99c:	dd09      	ble.n	800b9b2 <sin+0x3a>
 800b99e:	ee10 0a10 	vmov	r0, s0
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f7f4 fc70 	bl	8000288 <__aeabi_dsub>
 800b9a8:	ec41 0b10 	vmov	d0, r0, r1
 800b9ac:	b005      	add	sp, #20
 800b9ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9b2:	4668      	mov	r0, sp
 800b9b4:	f000 f834 	bl	800ba20 <__ieee754_rem_pio2>
 800b9b8:	f000 0003 	and.w	r0, r0, #3
 800b9bc:	2801      	cmp	r0, #1
 800b9be:	d008      	beq.n	800b9d2 <sin+0x5a>
 800b9c0:	2802      	cmp	r0, #2
 800b9c2:	d00d      	beq.n	800b9e0 <sin+0x68>
 800b9c4:	b9d0      	cbnz	r0, 800b9fc <sin+0x84>
 800b9c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9ca:	ed9d 0b00 	vldr	d0, [sp]
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7dd      	b.n	800b98e <sin+0x16>
 800b9d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9d6:	ed9d 0b00 	vldr	d0, [sp]
 800b9da:	f000 fa2d 	bl	800be38 <__kernel_cos>
 800b9de:	e7d8      	b.n	800b992 <sin+0x1a>
 800b9e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9e4:	ed9d 0b00 	vldr	d0, [sp]
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	f000 fe2d 	bl	800c648 <__kernel_sin>
 800b9ee:	ec53 2b10 	vmov	r2, r3, d0
 800b9f2:	ee10 0a10 	vmov	r0, s0
 800b9f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9fa:	e7d5      	b.n	800b9a8 <sin+0x30>
 800b9fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba00:	ed9d 0b00 	vldr	d0, [sp]
 800ba04:	f000 fa18 	bl	800be38 <__kernel_cos>
 800ba08:	e7f1      	b.n	800b9ee <sin+0x76>
 800ba0a:	bf00      	nop
 800ba0c:	f3af 8000 	nop.w
	...
 800ba18:	3fe921fb 	.word	0x3fe921fb
 800ba1c:	7fefffff 	.word	0x7fefffff

0800ba20 <__ieee754_rem_pio2>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	ed2d 8b02 	vpush	{d8}
 800ba28:	ec55 4b10 	vmov	r4, r5, d0
 800ba2c:	4bca      	ldr	r3, [pc, #808]	; (800bd58 <__ieee754_rem_pio2+0x338>)
 800ba2e:	b08b      	sub	sp, #44	; 0x2c
 800ba30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ba34:	4598      	cmp	r8, r3
 800ba36:	4682      	mov	sl, r0
 800ba38:	9502      	str	r5, [sp, #8]
 800ba3a:	dc08      	bgt.n	800ba4e <__ieee754_rem_pio2+0x2e>
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2300      	movs	r3, #0
 800ba40:	ed80 0b00 	vstr	d0, [r0]
 800ba44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ba48:	f04f 0b00 	mov.w	fp, #0
 800ba4c:	e028      	b.n	800baa0 <__ieee754_rem_pio2+0x80>
 800ba4e:	4bc3      	ldr	r3, [pc, #780]	; (800bd5c <__ieee754_rem_pio2+0x33c>)
 800ba50:	4598      	cmp	r8, r3
 800ba52:	dc78      	bgt.n	800bb46 <__ieee754_rem_pio2+0x126>
 800ba54:	9b02      	ldr	r3, [sp, #8]
 800ba56:	4ec2      	ldr	r6, [pc, #776]	; (800bd60 <__ieee754_rem_pio2+0x340>)
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	ee10 0a10 	vmov	r0, s0
 800ba5e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bd20 <__ieee754_rem_pio2+0x300>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	4629      	mov	r1, r5
 800ba66:	dd39      	ble.n	800badc <__ieee754_rem_pio2+0xbc>
 800ba68:	f7f4 fc0e 	bl	8000288 <__aeabi_dsub>
 800ba6c:	45b0      	cmp	r8, r6
 800ba6e:	4604      	mov	r4, r0
 800ba70:	460d      	mov	r5, r1
 800ba72:	d01b      	beq.n	800baac <__ieee754_rem_pio2+0x8c>
 800ba74:	a3ac      	add	r3, pc, #688	; (adr r3, 800bd28 <__ieee754_rem_pio2+0x308>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7f4 fc05 	bl	8000288 <__aeabi_dsub>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	e9ca 2300 	strd	r2, r3, [sl]
 800ba86:	4620      	mov	r0, r4
 800ba88:	4629      	mov	r1, r5
 800ba8a:	f7f4 fbfd 	bl	8000288 <__aeabi_dsub>
 800ba8e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bd28 <__ieee754_rem_pio2+0x308>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f7f4 fbf8 	bl	8000288 <__aeabi_dsub>
 800ba98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba9c:	f04f 0b01 	mov.w	fp, #1
 800baa0:	4658      	mov	r0, fp
 800baa2:	b00b      	add	sp, #44	; 0x2c
 800baa4:	ecbd 8b02 	vpop	{d8}
 800baa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baac:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd30 <__ieee754_rem_pio2+0x310>)
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	f7f4 fbe9 	bl	8000288 <__aeabi_dsub>
 800bab6:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd38 <__ieee754_rem_pio2+0x318>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	4604      	mov	r4, r0
 800babe:	460d      	mov	r5, r1
 800bac0:	f7f4 fbe2 	bl	8000288 <__aeabi_dsub>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	e9ca 2300 	strd	r2, r3, [sl]
 800bacc:	4620      	mov	r0, r4
 800bace:	4629      	mov	r1, r5
 800bad0:	f7f4 fbda 	bl	8000288 <__aeabi_dsub>
 800bad4:	a398      	add	r3, pc, #608	; (adr r3, 800bd38 <__ieee754_rem_pio2+0x318>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	e7db      	b.n	800ba94 <__ieee754_rem_pio2+0x74>
 800badc:	f7f4 fbd6 	bl	800028c <__adddf3>
 800bae0:	45b0      	cmp	r8, r6
 800bae2:	4604      	mov	r4, r0
 800bae4:	460d      	mov	r5, r1
 800bae6:	d016      	beq.n	800bb16 <__ieee754_rem_pio2+0xf6>
 800bae8:	a38f      	add	r3, pc, #572	; (adr r3, 800bd28 <__ieee754_rem_pio2+0x308>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 fbcd 	bl	800028c <__adddf3>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	e9ca 2300 	strd	r2, r3, [sl]
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fbc3 	bl	8000288 <__aeabi_dsub>
 800bb02:	a389      	add	r3, pc, #548	; (adr r3, 800bd28 <__ieee754_rem_pio2+0x308>)
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	f7f4 fbc0 	bl	800028c <__adddf3>
 800bb0c:	f04f 3bff 	mov.w	fp, #4294967295
 800bb10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb14:	e7c4      	b.n	800baa0 <__ieee754_rem_pio2+0x80>
 800bb16:	a386      	add	r3, pc, #536	; (adr r3, 800bd30 <__ieee754_rem_pio2+0x310>)
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	f7f4 fbb6 	bl	800028c <__adddf3>
 800bb20:	a385      	add	r3, pc, #532	; (adr r3, 800bd38 <__ieee754_rem_pio2+0x318>)
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	4604      	mov	r4, r0
 800bb28:	460d      	mov	r5, r1
 800bb2a:	f7f4 fbaf 	bl	800028c <__adddf3>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	e9ca 2300 	strd	r2, r3, [sl]
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 fba5 	bl	8000288 <__aeabi_dsub>
 800bb3e:	a37e      	add	r3, pc, #504	; (adr r3, 800bd38 <__ieee754_rem_pio2+0x318>)
 800bb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb44:	e7e0      	b.n	800bb08 <__ieee754_rem_pio2+0xe8>
 800bb46:	4b87      	ldr	r3, [pc, #540]	; (800bd64 <__ieee754_rem_pio2+0x344>)
 800bb48:	4598      	cmp	r8, r3
 800bb4a:	f300 80d9 	bgt.w	800bd00 <__ieee754_rem_pio2+0x2e0>
 800bb4e:	f000 fe39 	bl	800c7c4 <fabs>
 800bb52:	ec55 4b10 	vmov	r4, r5, d0
 800bb56:	ee10 0a10 	vmov	r0, s0
 800bb5a:	a379      	add	r3, pc, #484	; (adr r3, 800bd40 <__ieee754_rem_pio2+0x320>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	4629      	mov	r1, r5
 800bb62:	f7f4 fd49 	bl	80005f8 <__aeabi_dmul>
 800bb66:	4b80      	ldr	r3, [pc, #512]	; (800bd68 <__ieee754_rem_pio2+0x348>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f7f4 fb8f 	bl	800028c <__adddf3>
 800bb6e:	f7f4 fff3 	bl	8000b58 <__aeabi_d2iz>
 800bb72:	4683      	mov	fp, r0
 800bb74:	f7f4 fcd6 	bl	8000524 <__aeabi_i2d>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	ec43 2b18 	vmov	d8, r2, r3
 800bb80:	a367      	add	r3, pc, #412	; (adr r3, 800bd20 <__ieee754_rem_pio2+0x300>)
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f7f4 fd37 	bl	80005f8 <__aeabi_dmul>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	f7f4 fb79 	bl	8000288 <__aeabi_dsub>
 800bb96:	a364      	add	r3, pc, #400	; (adr r3, 800bd28 <__ieee754_rem_pio2+0x308>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	460f      	mov	r7, r1
 800bba0:	ec51 0b18 	vmov	r0, r1, d8
 800bba4:	f7f4 fd28 	bl	80005f8 <__aeabi_dmul>
 800bba8:	f1bb 0f1f 	cmp.w	fp, #31
 800bbac:	4604      	mov	r4, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	dc0d      	bgt.n	800bbce <__ieee754_rem_pio2+0x1ae>
 800bbb2:	4b6e      	ldr	r3, [pc, #440]	; (800bd6c <__ieee754_rem_pio2+0x34c>)
 800bbb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbc:	4543      	cmp	r3, r8
 800bbbe:	d006      	beq.n	800bbce <__ieee754_rem_pio2+0x1ae>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	f7f4 fb5e 	bl	8000288 <__aeabi_dsub>
 800bbcc:	e00f      	b.n	800bbee <__ieee754_rem_pio2+0x1ce>
 800bbce:	462b      	mov	r3, r5
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fb57 	bl	8000288 <__aeabi_dsub>
 800bbda:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bbde:	9303      	str	r3, [sp, #12]
 800bbe0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbe4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bbe8:	f1b8 0f10 	cmp.w	r8, #16
 800bbec:	dc02      	bgt.n	800bbf4 <__ieee754_rem_pio2+0x1d4>
 800bbee:	e9ca 0100 	strd	r0, r1, [sl]
 800bbf2:	e039      	b.n	800bc68 <__ieee754_rem_pio2+0x248>
 800bbf4:	a34e      	add	r3, pc, #312	; (adr r3, 800bd30 <__ieee754_rem_pio2+0x310>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	ec51 0b18 	vmov	r0, r1, d8
 800bbfe:	f7f4 fcfb 	bl	80005f8 <__aeabi_dmul>
 800bc02:	4604      	mov	r4, r0
 800bc04:	460d      	mov	r5, r1
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	f7f4 fb3b 	bl	8000288 <__aeabi_dsub>
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	4680      	mov	r8, r0
 800bc18:	4689      	mov	r9, r1
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	f7f4 fb33 	bl	8000288 <__aeabi_dsub>
 800bc22:	4622      	mov	r2, r4
 800bc24:	462b      	mov	r3, r5
 800bc26:	f7f4 fb2f 	bl	8000288 <__aeabi_dsub>
 800bc2a:	a343      	add	r3, pc, #268	; (adr r3, 800bd38 <__ieee754_rem_pio2+0x318>)
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	4604      	mov	r4, r0
 800bc32:	460d      	mov	r5, r1
 800bc34:	ec51 0b18 	vmov	r0, r1, d8
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	462b      	mov	r3, r5
 800bc40:	f7f4 fb22 	bl	8000288 <__aeabi_dsub>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4604      	mov	r4, r0
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	4640      	mov	r0, r8
 800bc4e:	4649      	mov	r1, r9
 800bc50:	f7f4 fb1a 	bl	8000288 <__aeabi_dsub>
 800bc54:	9a03      	ldr	r2, [sp, #12]
 800bc56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b31      	cmp	r3, #49	; 0x31
 800bc5e:	dc24      	bgt.n	800bcaa <__ieee754_rem_pio2+0x28a>
 800bc60:	e9ca 0100 	strd	r0, r1, [sl]
 800bc64:	4646      	mov	r6, r8
 800bc66:	464f      	mov	r7, r9
 800bc68:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	4642      	mov	r2, r8
 800bc70:	464b      	mov	r3, r9
 800bc72:	4639      	mov	r1, r7
 800bc74:	f7f4 fb08 	bl	8000288 <__aeabi_dsub>
 800bc78:	462b      	mov	r3, r5
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	f7f4 fb04 	bl	8000288 <__aeabi_dsub>
 800bc80:	9b02      	ldr	r3, [sp, #8]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc88:	f6bf af0a 	bge.w	800baa0 <__ieee754_rem_pio2+0x80>
 800bc8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc90:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc94:	f8ca 8000 	str.w	r8, [sl]
 800bc98:	f8ca 0008 	str.w	r0, [sl, #8]
 800bc9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bca0:	f8ca 300c 	str.w	r3, [sl, #12]
 800bca4:	f1cb 0b00 	rsb	fp, fp, #0
 800bca8:	e6fa      	b.n	800baa0 <__ieee754_rem_pio2+0x80>
 800bcaa:	a327      	add	r3, pc, #156	; (adr r3, 800bd48 <__ieee754_rem_pio2+0x328>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	ec51 0b18 	vmov	r0, r1, d8
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	4604      	mov	r4, r0
 800bcba:	460d      	mov	r5, r1
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	f7f4 fae0 	bl	8000288 <__aeabi_dsub>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	4606      	mov	r6, r0
 800bcce:	460f      	mov	r7, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 fad8 	bl	8000288 <__aeabi_dsub>
 800bcd8:	4622      	mov	r2, r4
 800bcda:	462b      	mov	r3, r5
 800bcdc:	f7f4 fad4 	bl	8000288 <__aeabi_dsub>
 800bce0:	a31b      	add	r3, pc, #108	; (adr r3, 800bd50 <__ieee754_rem_pio2+0x330>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	4604      	mov	r4, r0
 800bce8:	460d      	mov	r5, r1
 800bcea:	ec51 0b18 	vmov	r0, r1, d8
 800bcee:	f7f4 fc83 	bl	80005f8 <__aeabi_dmul>
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	f7f4 fac7 	bl	8000288 <__aeabi_dsub>
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	460d      	mov	r5, r1
 800bcfe:	e75f      	b.n	800bbc0 <__ieee754_rem_pio2+0x1a0>
 800bd00:	4b1b      	ldr	r3, [pc, #108]	; (800bd70 <__ieee754_rem_pio2+0x350>)
 800bd02:	4598      	cmp	r8, r3
 800bd04:	dd36      	ble.n	800bd74 <__ieee754_rem_pio2+0x354>
 800bd06:	ee10 2a10 	vmov	r2, s0
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 faba 	bl	8000288 <__aeabi_dsub>
 800bd14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bd18:	e9ca 0100 	strd	r0, r1, [sl]
 800bd1c:	e694      	b.n	800ba48 <__ieee754_rem_pio2+0x28>
 800bd1e:	bf00      	nop
 800bd20:	54400000 	.word	0x54400000
 800bd24:	3ff921fb 	.word	0x3ff921fb
 800bd28:	1a626331 	.word	0x1a626331
 800bd2c:	3dd0b461 	.word	0x3dd0b461
 800bd30:	1a600000 	.word	0x1a600000
 800bd34:	3dd0b461 	.word	0x3dd0b461
 800bd38:	2e037073 	.word	0x2e037073
 800bd3c:	3ba3198a 	.word	0x3ba3198a
 800bd40:	6dc9c883 	.word	0x6dc9c883
 800bd44:	3fe45f30 	.word	0x3fe45f30
 800bd48:	2e000000 	.word	0x2e000000
 800bd4c:	3ba3198a 	.word	0x3ba3198a
 800bd50:	252049c1 	.word	0x252049c1
 800bd54:	397b839a 	.word	0x397b839a
 800bd58:	3fe921fb 	.word	0x3fe921fb
 800bd5c:	4002d97b 	.word	0x4002d97b
 800bd60:	3ff921fb 	.word	0x3ff921fb
 800bd64:	413921fb 	.word	0x413921fb
 800bd68:	3fe00000 	.word	0x3fe00000
 800bd6c:	0800f104 	.word	0x0800f104
 800bd70:	7fefffff 	.word	0x7fefffff
 800bd74:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bd78:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bd7c:	ee10 0a10 	vmov	r0, s0
 800bd80:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bd84:	ee10 6a10 	vmov	r6, s0
 800bd88:	460f      	mov	r7, r1
 800bd8a:	f7f4 fee5 	bl	8000b58 <__aeabi_d2iz>
 800bd8e:	f7f4 fbc9 	bl	8000524 <__aeabi_i2d>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4630      	mov	r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd9e:	f7f4 fa73 	bl	8000288 <__aeabi_dsub>
 800bda2:	4b22      	ldr	r3, [pc, #136]	; (800be2c <__ieee754_rem_pio2+0x40c>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	f7f4 fc27 	bl	80005f8 <__aeabi_dmul>
 800bdaa:	460f      	mov	r7, r1
 800bdac:	4606      	mov	r6, r0
 800bdae:	f7f4 fed3 	bl	8000b58 <__aeabi_d2iz>
 800bdb2:	f7f4 fbb7 	bl	8000524 <__aeabi_i2d>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4630      	mov	r0, r6
 800bdbc:	4639      	mov	r1, r7
 800bdbe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bdc2:	f7f4 fa61 	bl	8000288 <__aeabi_dsub>
 800bdc6:	4b19      	ldr	r3, [pc, #100]	; (800be2c <__ieee754_rem_pio2+0x40c>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f7f4 fc15 	bl	80005f8 <__aeabi_dmul>
 800bdce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bdd2:	ad04      	add	r5, sp, #16
 800bdd4:	f04f 0803 	mov.w	r8, #3
 800bdd8:	46a9      	mov	r9, r5
 800bdda:	2600      	movs	r6, #0
 800bddc:	2700      	movs	r7, #0
 800bdde:	4632      	mov	r2, r6
 800bde0:	463b      	mov	r3, r7
 800bde2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bde6:	46c3      	mov	fp, r8
 800bde8:	3d08      	subs	r5, #8
 800bdea:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdee:	f7f4 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d1f3      	bne.n	800bdde <__ieee754_rem_pio2+0x3be>
 800bdf6:	4b0e      	ldr	r3, [pc, #56]	; (800be30 <__ieee754_rem_pio2+0x410>)
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	4622      	mov	r2, r4
 800be00:	465b      	mov	r3, fp
 800be02:	4651      	mov	r1, sl
 800be04:	4648      	mov	r0, r9
 800be06:	f000 f8df 	bl	800bfc8 <__kernel_rem_pio2>
 800be0a:	9b02      	ldr	r3, [sp, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	4683      	mov	fp, r0
 800be10:	f6bf ae46 	bge.w	800baa0 <__ieee754_rem_pio2+0x80>
 800be14:	f8da 3004 	ldr.w	r3, [sl, #4]
 800be18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be1c:	f8ca 3004 	str.w	r3, [sl, #4]
 800be20:	f8da 300c 	ldr.w	r3, [sl, #12]
 800be24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be28:	e73a      	b.n	800bca0 <__ieee754_rem_pio2+0x280>
 800be2a:	bf00      	nop
 800be2c:	41700000 	.word	0x41700000
 800be30:	0800f184 	.word	0x0800f184
 800be34:	00000000 	.word	0x00000000

0800be38 <__kernel_cos>:
 800be38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	ec57 6b10 	vmov	r6, r7, d0
 800be40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800be44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800be48:	ed8d 1b00 	vstr	d1, [sp]
 800be4c:	da07      	bge.n	800be5e <__kernel_cos+0x26>
 800be4e:	ee10 0a10 	vmov	r0, s0
 800be52:	4639      	mov	r1, r7
 800be54:	f7f4 fe80 	bl	8000b58 <__aeabi_d2iz>
 800be58:	2800      	cmp	r0, #0
 800be5a:	f000 8088 	beq.w	800bf6e <__kernel_cos+0x136>
 800be5e:	4632      	mov	r2, r6
 800be60:	463b      	mov	r3, r7
 800be62:	4630      	mov	r0, r6
 800be64:	4639      	mov	r1, r7
 800be66:	f7f4 fbc7 	bl	80005f8 <__aeabi_dmul>
 800be6a:	4b51      	ldr	r3, [pc, #324]	; (800bfb0 <__kernel_cos+0x178>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	4604      	mov	r4, r0
 800be70:	460d      	mov	r5, r1
 800be72:	f7f4 fbc1 	bl	80005f8 <__aeabi_dmul>
 800be76:	a340      	add	r3, pc, #256	; (adr r3, 800bf78 <__kernel_cos+0x140>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	4682      	mov	sl, r0
 800be7e:	468b      	mov	fp, r1
 800be80:	4620      	mov	r0, r4
 800be82:	4629      	mov	r1, r5
 800be84:	f7f4 fbb8 	bl	80005f8 <__aeabi_dmul>
 800be88:	a33d      	add	r3, pc, #244	; (adr r3, 800bf80 <__kernel_cos+0x148>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 f9fd 	bl	800028c <__adddf3>
 800be92:	4622      	mov	r2, r4
 800be94:	462b      	mov	r3, r5
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	a33b      	add	r3, pc, #236	; (adr r3, 800bf88 <__kernel_cos+0x150>)
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	f7f4 f9f2 	bl	8000288 <__aeabi_dsub>
 800bea4:	4622      	mov	r2, r4
 800bea6:	462b      	mov	r3, r5
 800bea8:	f7f4 fba6 	bl	80005f8 <__aeabi_dmul>
 800beac:	a338      	add	r3, pc, #224	; (adr r3, 800bf90 <__kernel_cos+0x158>)
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f7f4 f9eb 	bl	800028c <__adddf3>
 800beb6:	4622      	mov	r2, r4
 800beb8:	462b      	mov	r3, r5
 800beba:	f7f4 fb9d 	bl	80005f8 <__aeabi_dmul>
 800bebe:	a336      	add	r3, pc, #216	; (adr r3, 800bf98 <__kernel_cos+0x160>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 f9e0 	bl	8000288 <__aeabi_dsub>
 800bec8:	4622      	mov	r2, r4
 800beca:	462b      	mov	r3, r5
 800becc:	f7f4 fb94 	bl	80005f8 <__aeabi_dmul>
 800bed0:	a333      	add	r3, pc, #204	; (adr r3, 800bfa0 <__kernel_cos+0x168>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f7f4 f9d9 	bl	800028c <__adddf3>
 800beda:	4622      	mov	r2, r4
 800bedc:	462b      	mov	r3, r5
 800bede:	f7f4 fb8b 	bl	80005f8 <__aeabi_dmul>
 800bee2:	4622      	mov	r2, r4
 800bee4:	462b      	mov	r3, r5
 800bee6:	f7f4 fb87 	bl	80005f8 <__aeabi_dmul>
 800beea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	4630      	mov	r0, r6
 800bef4:	4639      	mov	r1, r7
 800bef6:	f7f4 fb7f 	bl	80005f8 <__aeabi_dmul>
 800befa:	460b      	mov	r3, r1
 800befc:	4602      	mov	r2, r0
 800befe:	4629      	mov	r1, r5
 800bf00:	4620      	mov	r0, r4
 800bf02:	f7f4 f9c1 	bl	8000288 <__aeabi_dsub>
 800bf06:	4b2b      	ldr	r3, [pc, #172]	; (800bfb4 <__kernel_cos+0x17c>)
 800bf08:	4598      	cmp	r8, r3
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460f      	mov	r7, r1
 800bf0e:	dc10      	bgt.n	800bf32 <__kernel_cos+0xfa>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4650      	mov	r0, sl
 800bf16:	4659      	mov	r1, fp
 800bf18:	f7f4 f9b6 	bl	8000288 <__aeabi_dsub>
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	4926      	ldr	r1, [pc, #152]	; (800bfb8 <__kernel_cos+0x180>)
 800bf20:	4602      	mov	r2, r0
 800bf22:	2000      	movs	r0, #0
 800bf24:	f7f4 f9b0 	bl	8000288 <__aeabi_dsub>
 800bf28:	ec41 0b10 	vmov	d0, r0, r1
 800bf2c:	b003      	add	sp, #12
 800bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf32:	4b22      	ldr	r3, [pc, #136]	; (800bfbc <__kernel_cos+0x184>)
 800bf34:	4920      	ldr	r1, [pc, #128]	; (800bfb8 <__kernel_cos+0x180>)
 800bf36:	4598      	cmp	r8, r3
 800bf38:	bfcc      	ite	gt
 800bf3a:	4d21      	ldrgt	r5, [pc, #132]	; (800bfc0 <__kernel_cos+0x188>)
 800bf3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bf40:	2400      	movs	r4, #0
 800bf42:	4622      	mov	r2, r4
 800bf44:	462b      	mov	r3, r5
 800bf46:	2000      	movs	r0, #0
 800bf48:	f7f4 f99e 	bl	8000288 <__aeabi_dsub>
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	4680      	mov	r8, r0
 800bf50:	4689      	mov	r9, r1
 800bf52:	462b      	mov	r3, r5
 800bf54:	4650      	mov	r0, sl
 800bf56:	4659      	mov	r1, fp
 800bf58:	f7f4 f996 	bl	8000288 <__aeabi_dsub>
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	463b      	mov	r3, r7
 800bf60:	f7f4 f992 	bl	8000288 <__aeabi_dsub>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	e7da      	b.n	800bf24 <__kernel_cos+0xec>
 800bf6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bfa8 <__kernel_cos+0x170>
 800bf72:	e7db      	b.n	800bf2c <__kernel_cos+0xf4>
 800bf74:	f3af 8000 	nop.w
 800bf78:	be8838d4 	.word	0xbe8838d4
 800bf7c:	bda8fae9 	.word	0xbda8fae9
 800bf80:	bdb4b1c4 	.word	0xbdb4b1c4
 800bf84:	3e21ee9e 	.word	0x3e21ee9e
 800bf88:	809c52ad 	.word	0x809c52ad
 800bf8c:	3e927e4f 	.word	0x3e927e4f
 800bf90:	19cb1590 	.word	0x19cb1590
 800bf94:	3efa01a0 	.word	0x3efa01a0
 800bf98:	16c15177 	.word	0x16c15177
 800bf9c:	3f56c16c 	.word	0x3f56c16c
 800bfa0:	5555554c 	.word	0x5555554c
 800bfa4:	3fa55555 	.word	0x3fa55555
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	3ff00000 	.word	0x3ff00000
 800bfb0:	3fe00000 	.word	0x3fe00000
 800bfb4:	3fd33332 	.word	0x3fd33332
 800bfb8:	3ff00000 	.word	0x3ff00000
 800bfbc:	3fe90000 	.word	0x3fe90000
 800bfc0:	3fd20000 	.word	0x3fd20000
 800bfc4:	00000000 	.word	0x00000000

0800bfc8 <__kernel_rem_pio2>:
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	ed2d 8b02 	vpush	{d8}
 800bfd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bfd4:	f112 0f14 	cmn.w	r2, #20
 800bfd8:	9308      	str	r3, [sp, #32]
 800bfda:	9101      	str	r1, [sp, #4]
 800bfdc:	4bc6      	ldr	r3, [pc, #792]	; (800c2f8 <__kernel_rem_pio2+0x330>)
 800bfde:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800bfe0:	9009      	str	r0, [sp, #36]	; 0x24
 800bfe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfe6:	9304      	str	r3, [sp, #16]
 800bfe8:	9b08      	ldr	r3, [sp, #32]
 800bfea:	f103 33ff 	add.w	r3, r3, #4294967295
 800bfee:	bfa8      	it	ge
 800bff0:	1ed4      	subge	r4, r2, #3
 800bff2:	9306      	str	r3, [sp, #24]
 800bff4:	bfb2      	itee	lt
 800bff6:	2400      	movlt	r4, #0
 800bff8:	2318      	movge	r3, #24
 800bffa:	fb94 f4f3 	sdivge	r4, r4, r3
 800bffe:	f06f 0317 	mvn.w	r3, #23
 800c002:	fb04 3303 	mla	r3, r4, r3, r3
 800c006:	eb03 0a02 	add.w	sl, r3, r2
 800c00a:	9b04      	ldr	r3, [sp, #16]
 800c00c:	9a06      	ldr	r2, [sp, #24]
 800c00e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c2e8 <__kernel_rem_pio2+0x320>
 800c012:	eb03 0802 	add.w	r8, r3, r2
 800c016:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c018:	1aa7      	subs	r7, r4, r2
 800c01a:	ae20      	add	r6, sp, #128	; 0x80
 800c01c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c020:	2500      	movs	r5, #0
 800c022:	4545      	cmp	r5, r8
 800c024:	dd18      	ble.n	800c058 <__kernel_rem_pio2+0x90>
 800c026:	9b08      	ldr	r3, [sp, #32]
 800c028:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c02c:	aa20      	add	r2, sp, #128	; 0x80
 800c02e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c2e8 <__kernel_rem_pio2+0x320>
 800c032:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c036:	f1c3 0301 	rsb	r3, r3, #1
 800c03a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c03e:	9307      	str	r3, [sp, #28]
 800c040:	9b07      	ldr	r3, [sp, #28]
 800c042:	9a04      	ldr	r2, [sp, #16]
 800c044:	4443      	add	r3, r8
 800c046:	429a      	cmp	r2, r3
 800c048:	db2f      	blt.n	800c0aa <__kernel_rem_pio2+0xe2>
 800c04a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c04e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c052:	462f      	mov	r7, r5
 800c054:	2600      	movs	r6, #0
 800c056:	e01b      	b.n	800c090 <__kernel_rem_pio2+0xc8>
 800c058:	42ef      	cmn	r7, r5
 800c05a:	d407      	bmi.n	800c06c <__kernel_rem_pio2+0xa4>
 800c05c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c060:	f7f4 fa60 	bl	8000524 <__aeabi_i2d>
 800c064:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c068:	3501      	adds	r5, #1
 800c06a:	e7da      	b.n	800c022 <__kernel_rem_pio2+0x5a>
 800c06c:	ec51 0b18 	vmov	r0, r1, d8
 800c070:	e7f8      	b.n	800c064 <__kernel_rem_pio2+0x9c>
 800c072:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c076:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c07a:	f7f4 fabd 	bl	80005f8 <__aeabi_dmul>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c086:	f7f4 f901 	bl	800028c <__adddf3>
 800c08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c08e:	3601      	adds	r6, #1
 800c090:	9b06      	ldr	r3, [sp, #24]
 800c092:	429e      	cmp	r6, r3
 800c094:	f1a7 0708 	sub.w	r7, r7, #8
 800c098:	ddeb      	ble.n	800c072 <__kernel_rem_pio2+0xaa>
 800c09a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c09e:	3508      	adds	r5, #8
 800c0a0:	ecab 7b02 	vstmia	fp!, {d7}
 800c0a4:	f108 0801 	add.w	r8, r8, #1
 800c0a8:	e7ca      	b.n	800c040 <__kernel_rem_pio2+0x78>
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	aa0c      	add	r2, sp, #48	; 0x30
 800c0ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0b4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c0b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c0ba:	9c04      	ldr	r4, [sp, #16]
 800c0bc:	930a      	str	r3, [sp, #40]	; 0x28
 800c0be:	ab98      	add	r3, sp, #608	; 0x260
 800c0c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0c4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c0c8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c0cc:	f8cd b008 	str.w	fp, [sp, #8]
 800c0d0:	4625      	mov	r5, r4
 800c0d2:	2d00      	cmp	r5, #0
 800c0d4:	dc78      	bgt.n	800c1c8 <__kernel_rem_pio2+0x200>
 800c0d6:	ec47 6b10 	vmov	d0, r6, r7
 800c0da:	4650      	mov	r0, sl
 800c0dc:	f000 fbfc 	bl	800c8d8 <scalbn>
 800c0e0:	ec57 6b10 	vmov	r6, r7, d0
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c0ea:	ee10 0a10 	vmov	r0, s0
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f7f4 fa82 	bl	80005f8 <__aeabi_dmul>
 800c0f4:	ec41 0b10 	vmov	d0, r0, r1
 800c0f8:	f000 fb6e 	bl	800c7d8 <floor>
 800c0fc:	4b7f      	ldr	r3, [pc, #508]	; (800c2fc <__kernel_rem_pio2+0x334>)
 800c0fe:	ec51 0b10 	vmov	r0, r1, d0
 800c102:	2200      	movs	r2, #0
 800c104:	f7f4 fa78 	bl	80005f8 <__aeabi_dmul>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4630      	mov	r0, r6
 800c10e:	4639      	mov	r1, r7
 800c110:	f7f4 f8ba 	bl	8000288 <__aeabi_dsub>
 800c114:	460f      	mov	r7, r1
 800c116:	4606      	mov	r6, r0
 800c118:	f7f4 fd1e 	bl	8000b58 <__aeabi_d2iz>
 800c11c:	9007      	str	r0, [sp, #28]
 800c11e:	f7f4 fa01 	bl	8000524 <__aeabi_i2d>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4630      	mov	r0, r6
 800c128:	4639      	mov	r1, r7
 800c12a:	f7f4 f8ad 	bl	8000288 <__aeabi_dsub>
 800c12e:	f1ba 0f00 	cmp.w	sl, #0
 800c132:	4606      	mov	r6, r0
 800c134:	460f      	mov	r7, r1
 800c136:	dd70      	ble.n	800c21a <__kernel_rem_pio2+0x252>
 800c138:	1e62      	subs	r2, r4, #1
 800c13a:	ab0c      	add	r3, sp, #48	; 0x30
 800c13c:	9d07      	ldr	r5, [sp, #28]
 800c13e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c142:	f1ca 0118 	rsb	r1, sl, #24
 800c146:	fa40 f301 	asr.w	r3, r0, r1
 800c14a:	441d      	add	r5, r3
 800c14c:	408b      	lsls	r3, r1
 800c14e:	1ac0      	subs	r0, r0, r3
 800c150:	ab0c      	add	r3, sp, #48	; 0x30
 800c152:	9507      	str	r5, [sp, #28]
 800c154:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c158:	f1ca 0317 	rsb	r3, sl, #23
 800c15c:	fa40 f303 	asr.w	r3, r0, r3
 800c160:	9302      	str	r3, [sp, #8]
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	dd66      	ble.n	800c236 <__kernel_rem_pio2+0x26e>
 800c168:	9b07      	ldr	r3, [sp, #28]
 800c16a:	2200      	movs	r2, #0
 800c16c:	3301      	adds	r3, #1
 800c16e:	9307      	str	r3, [sp, #28]
 800c170:	4615      	mov	r5, r2
 800c172:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c176:	4294      	cmp	r4, r2
 800c178:	f300 8099 	bgt.w	800c2ae <__kernel_rem_pio2+0x2e6>
 800c17c:	f1ba 0f00 	cmp.w	sl, #0
 800c180:	dd07      	ble.n	800c192 <__kernel_rem_pio2+0x1ca>
 800c182:	f1ba 0f01 	cmp.w	sl, #1
 800c186:	f000 80a5 	beq.w	800c2d4 <__kernel_rem_pio2+0x30c>
 800c18a:	f1ba 0f02 	cmp.w	sl, #2
 800c18e:	f000 80c1 	beq.w	800c314 <__kernel_rem_pio2+0x34c>
 800c192:	9b02      	ldr	r3, [sp, #8]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d14e      	bne.n	800c236 <__kernel_rem_pio2+0x26e>
 800c198:	4632      	mov	r2, r6
 800c19a:	463b      	mov	r3, r7
 800c19c:	4958      	ldr	r1, [pc, #352]	; (800c300 <__kernel_rem_pio2+0x338>)
 800c19e:	2000      	movs	r0, #0
 800c1a0:	f7f4 f872 	bl	8000288 <__aeabi_dsub>
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	460f      	mov	r7, r1
 800c1a8:	2d00      	cmp	r5, #0
 800c1aa:	d044      	beq.n	800c236 <__kernel_rem_pio2+0x26e>
 800c1ac:	4650      	mov	r0, sl
 800c1ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c2f0 <__kernel_rem_pio2+0x328>
 800c1b2:	f000 fb91 	bl	800c8d8 <scalbn>
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	ec53 2b10 	vmov	r2, r3, d0
 800c1be:	f7f4 f863 	bl	8000288 <__aeabi_dsub>
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	e036      	b.n	800c236 <__kernel_rem_pio2+0x26e>
 800c1c8:	4b4e      	ldr	r3, [pc, #312]	; (800c304 <__kernel_rem_pio2+0x33c>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	f7f4 fa12 	bl	80005f8 <__aeabi_dmul>
 800c1d4:	f7f4 fcc0 	bl	8000b58 <__aeabi_d2iz>
 800c1d8:	f7f4 f9a4 	bl	8000524 <__aeabi_i2d>
 800c1dc:	4b4a      	ldr	r3, [pc, #296]	; (800c308 <__kernel_rem_pio2+0x340>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	4689      	mov	r9, r1
 800c1e4:	f7f4 fa08 	bl	80005f8 <__aeabi_dmul>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f7f4 f84a 	bl	8000288 <__aeabi_dsub>
 800c1f4:	f7f4 fcb0 	bl	8000b58 <__aeabi_d2iz>
 800c1f8:	9b02      	ldr	r3, [sp, #8]
 800c1fa:	f843 0b04 	str.w	r0, [r3], #4
 800c1fe:	3d01      	subs	r5, #1
 800c200:	9302      	str	r3, [sp, #8]
 800c202:	ab70      	add	r3, sp, #448	; 0x1c0
 800c204:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	4640      	mov	r0, r8
 800c20e:	4649      	mov	r1, r9
 800c210:	f7f4 f83c 	bl	800028c <__adddf3>
 800c214:	4606      	mov	r6, r0
 800c216:	460f      	mov	r7, r1
 800c218:	e75b      	b.n	800c0d2 <__kernel_rem_pio2+0x10a>
 800c21a:	d105      	bne.n	800c228 <__kernel_rem_pio2+0x260>
 800c21c:	1e63      	subs	r3, r4, #1
 800c21e:	aa0c      	add	r2, sp, #48	; 0x30
 800c220:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c224:	15c3      	asrs	r3, r0, #23
 800c226:	e79b      	b.n	800c160 <__kernel_rem_pio2+0x198>
 800c228:	4b38      	ldr	r3, [pc, #224]	; (800c30c <__kernel_rem_pio2+0x344>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 fc6a 	bl	8000b04 <__aeabi_dcmpge>
 800c230:	2800      	cmp	r0, #0
 800c232:	d139      	bne.n	800c2a8 <__kernel_rem_pio2+0x2e0>
 800c234:	9002      	str	r0, [sp, #8]
 800c236:	2200      	movs	r2, #0
 800c238:	2300      	movs	r3, #0
 800c23a:	4630      	mov	r0, r6
 800c23c:	4639      	mov	r1, r7
 800c23e:	f7f4 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c242:	2800      	cmp	r0, #0
 800c244:	f000 80b4 	beq.w	800c3b0 <__kernel_rem_pio2+0x3e8>
 800c248:	f104 3bff 	add.w	fp, r4, #4294967295
 800c24c:	465b      	mov	r3, fp
 800c24e:	2200      	movs	r2, #0
 800c250:	9904      	ldr	r1, [sp, #16]
 800c252:	428b      	cmp	r3, r1
 800c254:	da65      	bge.n	800c322 <__kernel_rem_pio2+0x35a>
 800c256:	2a00      	cmp	r2, #0
 800c258:	d07b      	beq.n	800c352 <__kernel_rem_pio2+0x38a>
 800c25a:	ab0c      	add	r3, sp, #48	; 0x30
 800c25c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c260:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c264:	2b00      	cmp	r3, #0
 800c266:	f000 80a0 	beq.w	800c3aa <__kernel_rem_pio2+0x3e2>
 800c26a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c2f0 <__kernel_rem_pio2+0x328>
 800c26e:	4650      	mov	r0, sl
 800c270:	f000 fb32 	bl	800c8d8 <scalbn>
 800c274:	4f23      	ldr	r7, [pc, #140]	; (800c304 <__kernel_rem_pio2+0x33c>)
 800c276:	ec55 4b10 	vmov	r4, r5, d0
 800c27a:	46d8      	mov	r8, fp
 800c27c:	2600      	movs	r6, #0
 800c27e:	f1b8 0f00 	cmp.w	r8, #0
 800c282:	f280 80cf 	bge.w	800c424 <__kernel_rem_pio2+0x45c>
 800c286:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c2e8 <__kernel_rem_pio2+0x320>
 800c28a:	465f      	mov	r7, fp
 800c28c:	f04f 0800 	mov.w	r8, #0
 800c290:	2f00      	cmp	r7, #0
 800c292:	f2c0 80fd 	blt.w	800c490 <__kernel_rem_pio2+0x4c8>
 800c296:	ab70      	add	r3, sp, #448	; 0x1c0
 800c298:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c310 <__kernel_rem_pio2+0x348>
 800c29c:	ec55 4b18 	vmov	r4, r5, d8
 800c2a0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c2a4:	2600      	movs	r6, #0
 800c2a6:	e0e5      	b.n	800c474 <__kernel_rem_pio2+0x4ac>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	9302      	str	r3, [sp, #8]
 800c2ac:	e75c      	b.n	800c168 <__kernel_rem_pio2+0x1a0>
 800c2ae:	f8db 3000 	ldr.w	r3, [fp]
 800c2b2:	b955      	cbnz	r5, 800c2ca <__kernel_rem_pio2+0x302>
 800c2b4:	b123      	cbz	r3, 800c2c0 <__kernel_rem_pio2+0x2f8>
 800c2b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c2ba:	f8cb 3000 	str.w	r3, [fp]
 800c2be:	2301      	movs	r3, #1
 800c2c0:	3201      	adds	r2, #1
 800c2c2:	f10b 0b04 	add.w	fp, fp, #4
 800c2c6:	461d      	mov	r5, r3
 800c2c8:	e755      	b.n	800c176 <__kernel_rem_pio2+0x1ae>
 800c2ca:	1acb      	subs	r3, r1, r3
 800c2cc:	f8cb 3000 	str.w	r3, [fp]
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	e7f5      	b.n	800c2c0 <__kernel_rem_pio2+0x2f8>
 800c2d4:	1e62      	subs	r2, r4, #1
 800c2d6:	ab0c      	add	r3, sp, #48	; 0x30
 800c2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c2e0:	a90c      	add	r1, sp, #48	; 0x30
 800c2e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c2e6:	e754      	b.n	800c192 <__kernel_rem_pio2+0x1ca>
	...
 800c2f4:	3ff00000 	.word	0x3ff00000
 800c2f8:	0800f2d0 	.word	0x0800f2d0
 800c2fc:	40200000 	.word	0x40200000
 800c300:	3ff00000 	.word	0x3ff00000
 800c304:	3e700000 	.word	0x3e700000
 800c308:	41700000 	.word	0x41700000
 800c30c:	3fe00000 	.word	0x3fe00000
 800c310:	0800f290 	.word	0x0800f290
 800c314:	1e62      	subs	r2, r4, #1
 800c316:	ab0c      	add	r3, sp, #48	; 0x30
 800c318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c320:	e7de      	b.n	800c2e0 <__kernel_rem_pio2+0x318>
 800c322:	a90c      	add	r1, sp, #48	; 0x30
 800c324:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c328:	3b01      	subs	r3, #1
 800c32a:	430a      	orrs	r2, r1
 800c32c:	e790      	b.n	800c250 <__kernel_rem_pio2+0x288>
 800c32e:	3301      	adds	r3, #1
 800c330:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c334:	2900      	cmp	r1, #0
 800c336:	d0fa      	beq.n	800c32e <__kernel_rem_pio2+0x366>
 800c338:	9a08      	ldr	r2, [sp, #32]
 800c33a:	18e3      	adds	r3, r4, r3
 800c33c:	18a6      	adds	r6, r4, r2
 800c33e:	aa20      	add	r2, sp, #128	; 0x80
 800c340:	1c65      	adds	r5, r4, #1
 800c342:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c346:	9302      	str	r3, [sp, #8]
 800c348:	9b02      	ldr	r3, [sp, #8]
 800c34a:	42ab      	cmp	r3, r5
 800c34c:	da04      	bge.n	800c358 <__kernel_rem_pio2+0x390>
 800c34e:	461c      	mov	r4, r3
 800c350:	e6b5      	b.n	800c0be <__kernel_rem_pio2+0xf6>
 800c352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c354:	2301      	movs	r3, #1
 800c356:	e7eb      	b.n	800c330 <__kernel_rem_pio2+0x368>
 800c358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c35a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c35e:	f7f4 f8e1 	bl	8000524 <__aeabi_i2d>
 800c362:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c368:	46b3      	mov	fp, r6
 800c36a:	461c      	mov	r4, r3
 800c36c:	2700      	movs	r7, #0
 800c36e:	f04f 0800 	mov.w	r8, #0
 800c372:	f04f 0900 	mov.w	r9, #0
 800c376:	9b06      	ldr	r3, [sp, #24]
 800c378:	429f      	cmp	r7, r3
 800c37a:	dd06      	ble.n	800c38a <__kernel_rem_pio2+0x3c2>
 800c37c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c37e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c382:	e9c3 8900 	strd	r8, r9, [r3]
 800c386:	3501      	adds	r5, #1
 800c388:	e7de      	b.n	800c348 <__kernel_rem_pio2+0x380>
 800c38a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c38e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c392:	f7f4 f931 	bl	80005f8 <__aeabi_dmul>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	4640      	mov	r0, r8
 800c39c:	4649      	mov	r1, r9
 800c39e:	f7f3 ff75 	bl	800028c <__adddf3>
 800c3a2:	3701      	adds	r7, #1
 800c3a4:	4680      	mov	r8, r0
 800c3a6:	4689      	mov	r9, r1
 800c3a8:	e7e5      	b.n	800c376 <__kernel_rem_pio2+0x3ae>
 800c3aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3ae:	e754      	b.n	800c25a <__kernel_rem_pio2+0x292>
 800c3b0:	ec47 6b10 	vmov	d0, r6, r7
 800c3b4:	f1ca 0000 	rsb	r0, sl, #0
 800c3b8:	f000 fa8e 	bl	800c8d8 <scalbn>
 800c3bc:	ec57 6b10 	vmov	r6, r7, d0
 800c3c0:	4b9f      	ldr	r3, [pc, #636]	; (800c640 <__kernel_rem_pio2+0x678>)
 800c3c2:	ee10 0a10 	vmov	r0, s0
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4639      	mov	r1, r7
 800c3ca:	f7f4 fb9b 	bl	8000b04 <__aeabi_dcmpge>
 800c3ce:	b300      	cbz	r0, 800c412 <__kernel_rem_pio2+0x44a>
 800c3d0:	4b9c      	ldr	r3, [pc, #624]	; (800c644 <__kernel_rem_pio2+0x67c>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	f7f4 f90e 	bl	80005f8 <__aeabi_dmul>
 800c3dc:	f7f4 fbbc 	bl	8000b58 <__aeabi_d2iz>
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	f7f4 f89f 	bl	8000524 <__aeabi_i2d>
 800c3e6:	4b96      	ldr	r3, [pc, #600]	; (800c640 <__kernel_rem_pio2+0x678>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f7f4 f905 	bl	80005f8 <__aeabi_dmul>
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7f3 ff47 	bl	8000288 <__aeabi_dsub>
 800c3fa:	f7f4 fbad 	bl	8000b58 <__aeabi_d2iz>
 800c3fe:	f104 0b01 	add.w	fp, r4, #1
 800c402:	ab0c      	add	r3, sp, #48	; 0x30
 800c404:	f10a 0a18 	add.w	sl, sl, #24
 800c408:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c40c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c410:	e72b      	b.n	800c26a <__kernel_rem_pio2+0x2a2>
 800c412:	4630      	mov	r0, r6
 800c414:	4639      	mov	r1, r7
 800c416:	f7f4 fb9f 	bl	8000b58 <__aeabi_d2iz>
 800c41a:	ab0c      	add	r3, sp, #48	; 0x30
 800c41c:	46a3      	mov	fp, r4
 800c41e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c422:	e722      	b.n	800c26a <__kernel_rem_pio2+0x2a2>
 800c424:	ab70      	add	r3, sp, #448	; 0x1c0
 800c426:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c42a:	ab0c      	add	r3, sp, #48	; 0x30
 800c42c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c430:	f7f4 f878 	bl	8000524 <__aeabi_i2d>
 800c434:	4622      	mov	r2, r4
 800c436:	462b      	mov	r3, r5
 800c438:	f7f4 f8de 	bl	80005f8 <__aeabi_dmul>
 800c43c:	4632      	mov	r2, r6
 800c43e:	e9c9 0100 	strd	r0, r1, [r9]
 800c442:	463b      	mov	r3, r7
 800c444:	4620      	mov	r0, r4
 800c446:	4629      	mov	r1, r5
 800c448:	f7f4 f8d6 	bl	80005f8 <__aeabi_dmul>
 800c44c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c450:	4604      	mov	r4, r0
 800c452:	460d      	mov	r5, r1
 800c454:	e713      	b.n	800c27e <__kernel_rem_pio2+0x2b6>
 800c456:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c45a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c45e:	f7f4 f8cb 	bl	80005f8 <__aeabi_dmul>
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	4620      	mov	r0, r4
 800c468:	4629      	mov	r1, r5
 800c46a:	f7f3 ff0f 	bl	800028c <__adddf3>
 800c46e:	3601      	adds	r6, #1
 800c470:	4604      	mov	r4, r0
 800c472:	460d      	mov	r5, r1
 800c474:	9b04      	ldr	r3, [sp, #16]
 800c476:	429e      	cmp	r6, r3
 800c478:	dc01      	bgt.n	800c47e <__kernel_rem_pio2+0x4b6>
 800c47a:	45b0      	cmp	r8, r6
 800c47c:	daeb      	bge.n	800c456 <__kernel_rem_pio2+0x48e>
 800c47e:	ab48      	add	r3, sp, #288	; 0x120
 800c480:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c484:	e9c3 4500 	strd	r4, r5, [r3]
 800c488:	3f01      	subs	r7, #1
 800c48a:	f108 0801 	add.w	r8, r8, #1
 800c48e:	e6ff      	b.n	800c290 <__kernel_rem_pio2+0x2c8>
 800c490:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c492:	2b02      	cmp	r3, #2
 800c494:	dc0b      	bgt.n	800c4ae <__kernel_rem_pio2+0x4e6>
 800c496:	2b00      	cmp	r3, #0
 800c498:	dc6e      	bgt.n	800c578 <__kernel_rem_pio2+0x5b0>
 800c49a:	d045      	beq.n	800c528 <__kernel_rem_pio2+0x560>
 800c49c:	9b07      	ldr	r3, [sp, #28]
 800c49e:	f003 0007 	and.w	r0, r3, #7
 800c4a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c4a6:	ecbd 8b02 	vpop	{d8}
 800c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d1f3      	bne.n	800c49c <__kernel_rem_pio2+0x4d4>
 800c4b4:	ab48      	add	r3, sp, #288	; 0x120
 800c4b6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c4ba:	46d0      	mov	r8, sl
 800c4bc:	46d9      	mov	r9, fp
 800c4be:	f1b9 0f00 	cmp.w	r9, #0
 800c4c2:	f1a8 0808 	sub.w	r8, r8, #8
 800c4c6:	dc64      	bgt.n	800c592 <__kernel_rem_pio2+0x5ca>
 800c4c8:	465c      	mov	r4, fp
 800c4ca:	2c01      	cmp	r4, #1
 800c4cc:	f1aa 0a08 	sub.w	sl, sl, #8
 800c4d0:	dc7e      	bgt.n	800c5d0 <__kernel_rem_pio2+0x608>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	f1bb 0f01 	cmp.w	fp, #1
 800c4da:	f300 8097 	bgt.w	800c60c <__kernel_rem_pio2+0x644>
 800c4de:	9b02      	ldr	r3, [sp, #8]
 800c4e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c4e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f040 8099 	bne.w	800c620 <__kernel_rem_pio2+0x658>
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	e9c3 5600 	strd	r5, r6, [r3]
 800c4f4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c4f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c4fc:	e7ce      	b.n	800c49c <__kernel_rem_pio2+0x4d4>
 800c4fe:	ab48      	add	r3, sp, #288	; 0x120
 800c500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c508:	f7f3 fec0 	bl	800028c <__adddf3>
 800c50c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c510:	f1bb 0f00 	cmp.w	fp, #0
 800c514:	daf3      	bge.n	800c4fe <__kernel_rem_pio2+0x536>
 800c516:	9b02      	ldr	r3, [sp, #8]
 800c518:	b113      	cbz	r3, 800c520 <__kernel_rem_pio2+0x558>
 800c51a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c51e:	4619      	mov	r1, r3
 800c520:	9b01      	ldr	r3, [sp, #4]
 800c522:	e9c3 0100 	strd	r0, r1, [r3]
 800c526:	e7b9      	b.n	800c49c <__kernel_rem_pio2+0x4d4>
 800c528:	2000      	movs	r0, #0
 800c52a:	2100      	movs	r1, #0
 800c52c:	e7f0      	b.n	800c510 <__kernel_rem_pio2+0x548>
 800c52e:	ab48      	add	r3, sp, #288	; 0x120
 800c530:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f3 fea8 	bl	800028c <__adddf3>
 800c53c:	3c01      	subs	r4, #1
 800c53e:	2c00      	cmp	r4, #0
 800c540:	daf5      	bge.n	800c52e <__kernel_rem_pio2+0x566>
 800c542:	9b02      	ldr	r3, [sp, #8]
 800c544:	b1e3      	cbz	r3, 800c580 <__kernel_rem_pio2+0x5b8>
 800c546:	4602      	mov	r2, r0
 800c548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c54c:	9c01      	ldr	r4, [sp, #4]
 800c54e:	e9c4 2300 	strd	r2, r3, [r4]
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c55a:	f7f3 fe95 	bl	8000288 <__aeabi_dsub>
 800c55e:	ad4a      	add	r5, sp, #296	; 0x128
 800c560:	2401      	movs	r4, #1
 800c562:	45a3      	cmp	fp, r4
 800c564:	da0f      	bge.n	800c586 <__kernel_rem_pio2+0x5be>
 800c566:	9b02      	ldr	r3, [sp, #8]
 800c568:	b113      	cbz	r3, 800c570 <__kernel_rem_pio2+0x5a8>
 800c56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c56e:	4619      	mov	r1, r3
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c576:	e791      	b.n	800c49c <__kernel_rem_pio2+0x4d4>
 800c578:	465c      	mov	r4, fp
 800c57a:	2000      	movs	r0, #0
 800c57c:	2100      	movs	r1, #0
 800c57e:	e7de      	b.n	800c53e <__kernel_rem_pio2+0x576>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	e7e2      	b.n	800c54c <__kernel_rem_pio2+0x584>
 800c586:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c58a:	f7f3 fe7f 	bl	800028c <__adddf3>
 800c58e:	3401      	adds	r4, #1
 800c590:	e7e7      	b.n	800c562 <__kernel_rem_pio2+0x59a>
 800c592:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c596:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c59a:	4620      	mov	r0, r4
 800c59c:	4632      	mov	r2, r6
 800c59e:	463b      	mov	r3, r7
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7f3 fe73 	bl	800028c <__adddf3>
 800c5a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	f7f3 fe69 	bl	8000288 <__aeabi_dsub>
 800c5b6:	4632      	mov	r2, r6
 800c5b8:	463b      	mov	r3, r7
 800c5ba:	f7f3 fe67 	bl	800028c <__adddf3>
 800c5be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c5c2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c5c6:	ed88 7b00 	vstr	d7, [r8]
 800c5ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5ce:	e776      	b.n	800c4be <__kernel_rem_pio2+0x4f6>
 800c5d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800c5d4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c5d8:	4640      	mov	r0, r8
 800c5da:	4632      	mov	r2, r6
 800c5dc:	463b      	mov	r3, r7
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f3 fe54 	bl	800028c <__adddf3>
 800c5e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4640      	mov	r0, r8
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	f7f3 fe4a 	bl	8000288 <__aeabi_dsub>
 800c5f4:	4632      	mov	r2, r6
 800c5f6:	463b      	mov	r3, r7
 800c5f8:	f7f3 fe48 	bl	800028c <__adddf3>
 800c5fc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c600:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c604:	ed8a 7b00 	vstr	d7, [sl]
 800c608:	3c01      	subs	r4, #1
 800c60a:	e75e      	b.n	800c4ca <__kernel_rem_pio2+0x502>
 800c60c:	ab48      	add	r3, sp, #288	; 0x120
 800c60e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fe39 	bl	800028c <__adddf3>
 800c61a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c61e:	e75a      	b.n	800c4d6 <__kernel_rem_pio2+0x50e>
 800c620:	9b01      	ldr	r3, [sp, #4]
 800c622:	9a01      	ldr	r2, [sp, #4]
 800c624:	601d      	str	r5, [r3, #0]
 800c626:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c62a:	605c      	str	r4, [r3, #4]
 800c62c:	609f      	str	r7, [r3, #8]
 800c62e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c632:	60d3      	str	r3, [r2, #12]
 800c634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c638:	6110      	str	r0, [r2, #16]
 800c63a:	6153      	str	r3, [r2, #20]
 800c63c:	e72e      	b.n	800c49c <__kernel_rem_pio2+0x4d4>
 800c63e:	bf00      	nop
 800c640:	41700000 	.word	0x41700000
 800c644:	3e700000 	.word	0x3e700000

0800c648 <__kernel_sin>:
 800c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	ed2d 8b04 	vpush	{d8-d9}
 800c650:	eeb0 8a41 	vmov.f32	s16, s2
 800c654:	eef0 8a61 	vmov.f32	s17, s3
 800c658:	ec55 4b10 	vmov	r4, r5, d0
 800c65c:	b083      	sub	sp, #12
 800c65e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c662:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c666:	9001      	str	r0, [sp, #4]
 800c668:	da06      	bge.n	800c678 <__kernel_sin+0x30>
 800c66a:	ee10 0a10 	vmov	r0, s0
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f4 fa72 	bl	8000b58 <__aeabi_d2iz>
 800c674:	2800      	cmp	r0, #0
 800c676:	d051      	beq.n	800c71c <__kernel_sin+0xd4>
 800c678:	4622      	mov	r2, r4
 800c67a:	462b      	mov	r3, r5
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 ffba 	bl	80005f8 <__aeabi_dmul>
 800c684:	4682      	mov	sl, r0
 800c686:	468b      	mov	fp, r1
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	4620      	mov	r0, r4
 800c68e:	4629      	mov	r1, r5
 800c690:	f7f3 ffb2 	bl	80005f8 <__aeabi_dmul>
 800c694:	a341      	add	r3, pc, #260	; (adr r3, 800c79c <__kernel_sin+0x154>)
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	4680      	mov	r8, r0
 800c69c:	4689      	mov	r9, r1
 800c69e:	4650      	mov	r0, sl
 800c6a0:	4659      	mov	r1, fp
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	a33f      	add	r3, pc, #252	; (adr r3, 800c7a4 <__kernel_sin+0x15c>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	f7f3 fdec 	bl	8000288 <__aeabi_dsub>
 800c6b0:	4652      	mov	r2, sl
 800c6b2:	465b      	mov	r3, fp
 800c6b4:	f7f3 ffa0 	bl	80005f8 <__aeabi_dmul>
 800c6b8:	a33c      	add	r3, pc, #240	; (adr r3, 800c7ac <__kernel_sin+0x164>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 fde5 	bl	800028c <__adddf3>
 800c6c2:	4652      	mov	r2, sl
 800c6c4:	465b      	mov	r3, fp
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	a33a      	add	r3, pc, #232	; (adr r3, 800c7b4 <__kernel_sin+0x16c>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f3 fdda 	bl	8000288 <__aeabi_dsub>
 800c6d4:	4652      	mov	r2, sl
 800c6d6:	465b      	mov	r3, fp
 800c6d8:	f7f3 ff8e 	bl	80005f8 <__aeabi_dmul>
 800c6dc:	a337      	add	r3, pc, #220	; (adr r3, 800c7bc <__kernel_sin+0x174>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f7f3 fdd3 	bl	800028c <__adddf3>
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	460f      	mov	r7, r1
 800c6ec:	b9eb      	cbnz	r3, 800c72a <__kernel_sin+0xe2>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4650      	mov	r0, sl
 800c6f4:	4659      	mov	r1, fp
 800c6f6:	f7f3 ff7f 	bl	80005f8 <__aeabi_dmul>
 800c6fa:	a325      	add	r3, pc, #148	; (adr r3, 800c790 <__kernel_sin+0x148>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	f7f3 fdc2 	bl	8000288 <__aeabi_dsub>
 800c704:	4642      	mov	r2, r8
 800c706:	464b      	mov	r3, r9
 800c708:	f7f3 ff76 	bl	80005f8 <__aeabi_dmul>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	4620      	mov	r0, r4
 800c712:	4629      	mov	r1, r5
 800c714:	f7f3 fdba 	bl	800028c <__adddf3>
 800c718:	4604      	mov	r4, r0
 800c71a:	460d      	mov	r5, r1
 800c71c:	ec45 4b10 	vmov	d0, r4, r5
 800c720:	b003      	add	sp, #12
 800c722:	ecbd 8b04 	vpop	{d8-d9}
 800c726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72a:	4b1b      	ldr	r3, [pc, #108]	; (800c798 <__kernel_sin+0x150>)
 800c72c:	ec51 0b18 	vmov	r0, r1, d8
 800c730:	2200      	movs	r2, #0
 800c732:	f7f3 ff61 	bl	80005f8 <__aeabi_dmul>
 800c736:	4632      	mov	r2, r6
 800c738:	ec41 0b19 	vmov	d9, r0, r1
 800c73c:	463b      	mov	r3, r7
 800c73e:	4640      	mov	r0, r8
 800c740:	4649      	mov	r1, r9
 800c742:	f7f3 ff59 	bl	80005f8 <__aeabi_dmul>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	ec51 0b19 	vmov	r0, r1, d9
 800c74e:	f7f3 fd9b 	bl	8000288 <__aeabi_dsub>
 800c752:	4652      	mov	r2, sl
 800c754:	465b      	mov	r3, fp
 800c756:	f7f3 ff4f 	bl	80005f8 <__aeabi_dmul>
 800c75a:	ec53 2b18 	vmov	r2, r3, d8
 800c75e:	f7f3 fd93 	bl	8000288 <__aeabi_dsub>
 800c762:	a30b      	add	r3, pc, #44	; (adr r3, 800c790 <__kernel_sin+0x148>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	4606      	mov	r6, r0
 800c76a:	460f      	mov	r7, r1
 800c76c:	4640      	mov	r0, r8
 800c76e:	4649      	mov	r1, r9
 800c770:	f7f3 ff42 	bl	80005f8 <__aeabi_dmul>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4630      	mov	r0, r6
 800c77a:	4639      	mov	r1, r7
 800c77c:	f7f3 fd86 	bl	800028c <__adddf3>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4620      	mov	r0, r4
 800c786:	4629      	mov	r1, r5
 800c788:	f7f3 fd7e 	bl	8000288 <__aeabi_dsub>
 800c78c:	e7c4      	b.n	800c718 <__kernel_sin+0xd0>
 800c78e:	bf00      	nop
 800c790:	55555549 	.word	0x55555549
 800c794:	3fc55555 	.word	0x3fc55555
 800c798:	3fe00000 	.word	0x3fe00000
 800c79c:	5acfd57c 	.word	0x5acfd57c
 800c7a0:	3de5d93a 	.word	0x3de5d93a
 800c7a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c7a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c7ac:	57b1fe7d 	.word	0x57b1fe7d
 800c7b0:	3ec71de3 	.word	0x3ec71de3
 800c7b4:	19c161d5 	.word	0x19c161d5
 800c7b8:	3f2a01a0 	.word	0x3f2a01a0
 800c7bc:	1110f8a6 	.word	0x1110f8a6
 800c7c0:	3f811111 	.word	0x3f811111

0800c7c4 <fabs>:
 800c7c4:	ec51 0b10 	vmov	r0, r1, d0
 800c7c8:	ee10 2a10 	vmov	r2, s0
 800c7cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7d0:	ec43 2b10 	vmov	d0, r2, r3
 800c7d4:	4770      	bx	lr
	...

0800c7d8 <floor>:
 800c7d8:	ec51 0b10 	vmov	r0, r1, d0
 800c7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c7e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c7e8:	2e13      	cmp	r6, #19
 800c7ea:	ee10 5a10 	vmov	r5, s0
 800c7ee:	ee10 8a10 	vmov	r8, s0
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	dc32      	bgt.n	800c85c <floor+0x84>
 800c7f6:	2e00      	cmp	r6, #0
 800c7f8:	da14      	bge.n	800c824 <floor+0x4c>
 800c7fa:	a333      	add	r3, pc, #204	; (adr r3, 800c8c8 <floor+0xf0>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f7f3 fd44 	bl	800028c <__adddf3>
 800c804:	2200      	movs	r2, #0
 800c806:	2300      	movs	r3, #0
 800c808:	f7f4 f986 	bl	8000b18 <__aeabi_dcmpgt>
 800c80c:	b138      	cbz	r0, 800c81e <floor+0x46>
 800c80e:	2c00      	cmp	r4, #0
 800c810:	da57      	bge.n	800c8c2 <floor+0xea>
 800c812:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c816:	431d      	orrs	r5, r3
 800c818:	d001      	beq.n	800c81e <floor+0x46>
 800c81a:	4c2d      	ldr	r4, [pc, #180]	; (800c8d0 <floor+0xf8>)
 800c81c:	2500      	movs	r5, #0
 800c81e:	4621      	mov	r1, r4
 800c820:	4628      	mov	r0, r5
 800c822:	e025      	b.n	800c870 <floor+0x98>
 800c824:	4f2b      	ldr	r7, [pc, #172]	; (800c8d4 <floor+0xfc>)
 800c826:	4137      	asrs	r7, r6
 800c828:	ea01 0307 	and.w	r3, r1, r7
 800c82c:	4303      	orrs	r3, r0
 800c82e:	d01f      	beq.n	800c870 <floor+0x98>
 800c830:	a325      	add	r3, pc, #148	; (adr r3, 800c8c8 <floor+0xf0>)
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	f7f3 fd29 	bl	800028c <__adddf3>
 800c83a:	2200      	movs	r2, #0
 800c83c:	2300      	movs	r3, #0
 800c83e:	f7f4 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 800c842:	2800      	cmp	r0, #0
 800c844:	d0eb      	beq.n	800c81e <floor+0x46>
 800c846:	2c00      	cmp	r4, #0
 800c848:	bfbe      	ittt	lt
 800c84a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c84e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c852:	19a4      	addlt	r4, r4, r6
 800c854:	ea24 0407 	bic.w	r4, r4, r7
 800c858:	2500      	movs	r5, #0
 800c85a:	e7e0      	b.n	800c81e <floor+0x46>
 800c85c:	2e33      	cmp	r6, #51	; 0x33
 800c85e:	dd0b      	ble.n	800c878 <floor+0xa0>
 800c860:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c864:	d104      	bne.n	800c870 <floor+0x98>
 800c866:	ee10 2a10 	vmov	r2, s0
 800c86a:	460b      	mov	r3, r1
 800c86c:	f7f3 fd0e 	bl	800028c <__adddf3>
 800c870:	ec41 0b10 	vmov	d0, r0, r1
 800c874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c878:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295
 800c880:	fa23 f707 	lsr.w	r7, r3, r7
 800c884:	4207      	tst	r7, r0
 800c886:	d0f3      	beq.n	800c870 <floor+0x98>
 800c888:	a30f      	add	r3, pc, #60	; (adr r3, 800c8c8 <floor+0xf0>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f7f3 fcfd 	bl	800028c <__adddf3>
 800c892:	2200      	movs	r2, #0
 800c894:	2300      	movs	r3, #0
 800c896:	f7f4 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	d0bf      	beq.n	800c81e <floor+0x46>
 800c89e:	2c00      	cmp	r4, #0
 800c8a0:	da02      	bge.n	800c8a8 <floor+0xd0>
 800c8a2:	2e14      	cmp	r6, #20
 800c8a4:	d103      	bne.n	800c8ae <floor+0xd6>
 800c8a6:	3401      	adds	r4, #1
 800c8a8:	ea25 0507 	bic.w	r5, r5, r7
 800c8ac:	e7b7      	b.n	800c81e <floor+0x46>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c8b4:	fa03 f606 	lsl.w	r6, r3, r6
 800c8b8:	4435      	add	r5, r6
 800c8ba:	4545      	cmp	r5, r8
 800c8bc:	bf38      	it	cc
 800c8be:	18e4      	addcc	r4, r4, r3
 800c8c0:	e7f2      	b.n	800c8a8 <floor+0xd0>
 800c8c2:	2500      	movs	r5, #0
 800c8c4:	462c      	mov	r4, r5
 800c8c6:	e7aa      	b.n	800c81e <floor+0x46>
 800c8c8:	8800759c 	.word	0x8800759c
 800c8cc:	7e37e43c 	.word	0x7e37e43c
 800c8d0:	bff00000 	.word	0xbff00000
 800c8d4:	000fffff 	.word	0x000fffff

0800c8d8 <scalbn>:
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	ec55 4b10 	vmov	r4, r5, d0
 800c8de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	462b      	mov	r3, r5
 800c8e6:	b99a      	cbnz	r2, 800c910 <scalbn+0x38>
 800c8e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8ec:	4323      	orrs	r3, r4
 800c8ee:	d036      	beq.n	800c95e <scalbn+0x86>
 800c8f0:	4b39      	ldr	r3, [pc, #228]	; (800c9d8 <scalbn+0x100>)
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	ee10 0a10 	vmov	r0, s0
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f7f3 fe7d 	bl	80005f8 <__aeabi_dmul>
 800c8fe:	4b37      	ldr	r3, [pc, #220]	; (800c9dc <scalbn+0x104>)
 800c900:	429e      	cmp	r6, r3
 800c902:	4604      	mov	r4, r0
 800c904:	460d      	mov	r5, r1
 800c906:	da10      	bge.n	800c92a <scalbn+0x52>
 800c908:	a32b      	add	r3, pc, #172	; (adr r3, 800c9b8 <scalbn+0xe0>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	e03a      	b.n	800c986 <scalbn+0xae>
 800c910:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c914:	428a      	cmp	r2, r1
 800c916:	d10c      	bne.n	800c932 <scalbn+0x5a>
 800c918:	ee10 2a10 	vmov	r2, s0
 800c91c:	4620      	mov	r0, r4
 800c91e:	4629      	mov	r1, r5
 800c920:	f7f3 fcb4 	bl	800028c <__adddf3>
 800c924:	4604      	mov	r4, r0
 800c926:	460d      	mov	r5, r1
 800c928:	e019      	b.n	800c95e <scalbn+0x86>
 800c92a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c92e:	460b      	mov	r3, r1
 800c930:	3a36      	subs	r2, #54	; 0x36
 800c932:	4432      	add	r2, r6
 800c934:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c938:	428a      	cmp	r2, r1
 800c93a:	dd08      	ble.n	800c94e <scalbn+0x76>
 800c93c:	2d00      	cmp	r5, #0
 800c93e:	a120      	add	r1, pc, #128	; (adr r1, 800c9c0 <scalbn+0xe8>)
 800c940:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c944:	da1c      	bge.n	800c980 <scalbn+0xa8>
 800c946:	a120      	add	r1, pc, #128	; (adr r1, 800c9c8 <scalbn+0xf0>)
 800c948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c94c:	e018      	b.n	800c980 <scalbn+0xa8>
 800c94e:	2a00      	cmp	r2, #0
 800c950:	dd08      	ble.n	800c964 <scalbn+0x8c>
 800c952:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c956:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c95a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c95e:	ec45 4b10 	vmov	d0, r4, r5
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c968:	da19      	bge.n	800c99e <scalbn+0xc6>
 800c96a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c96e:	429e      	cmp	r6, r3
 800c970:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c974:	dd0a      	ble.n	800c98c <scalbn+0xb4>
 800c976:	a112      	add	r1, pc, #72	; (adr r1, 800c9c0 <scalbn+0xe8>)
 800c978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e2      	bne.n	800c946 <scalbn+0x6e>
 800c980:	a30f      	add	r3, pc, #60	; (adr r3, 800c9c0 <scalbn+0xe8>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 fe37 	bl	80005f8 <__aeabi_dmul>
 800c98a:	e7cb      	b.n	800c924 <scalbn+0x4c>
 800c98c:	a10a      	add	r1, pc, #40	; (adr r1, 800c9b8 <scalbn+0xe0>)
 800c98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0b8      	beq.n	800c908 <scalbn+0x30>
 800c996:	a10e      	add	r1, pc, #56	; (adr r1, 800c9d0 <scalbn+0xf8>)
 800c998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c99c:	e7b4      	b.n	800c908 <scalbn+0x30>
 800c99e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9a2:	3236      	adds	r2, #54	; 0x36
 800c9a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	4b0c      	ldr	r3, [pc, #48]	; (800c9e0 <scalbn+0x108>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	e7e8      	b.n	800c986 <scalbn+0xae>
 800c9b4:	f3af 8000 	nop.w
 800c9b8:	c2f8f359 	.word	0xc2f8f359
 800c9bc:	01a56e1f 	.word	0x01a56e1f
 800c9c0:	8800759c 	.word	0x8800759c
 800c9c4:	7e37e43c 	.word	0x7e37e43c
 800c9c8:	8800759c 	.word	0x8800759c
 800c9cc:	fe37e43c 	.word	0xfe37e43c
 800c9d0:	c2f8f359 	.word	0xc2f8f359
 800c9d4:	81a56e1f 	.word	0x81a56e1f
 800c9d8:	43500000 	.word	0x43500000
 800c9dc:	ffff3cb0 	.word	0xffff3cb0
 800c9e0:	3c900000 	.word	0x3c900000

0800c9e4 <_init>:
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e6:	bf00      	nop
 800c9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ea:	bc08      	pop	{r3}
 800c9ec:	469e      	mov	lr, r3
 800c9ee:	4770      	bx	lr

0800c9f0 <_fini>:
 800c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f2:	bf00      	nop
 800c9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9f6:	bc08      	pop	{r3}
 800c9f8:	469e      	mov	lr, r3
 800c9fa:	4770      	bx	lr
